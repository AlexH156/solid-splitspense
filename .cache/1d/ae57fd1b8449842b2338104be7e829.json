{"id":"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/OidcLoginHandler.js","dependencies":[{"name":"G:\\VSC\\mysolidapp\\node_modules\\@inrupt\\solid-client-authn-browser\\dist\\login\\oidc\\OidcLoginHandler.js.map","includedInParent":true,"mtime":1624384349188},{"name":"G:\\VSC\\mysolidapp\\node_modules\\@inrupt\\solid-client-authn-browser\\src\\login\\oidc\\OidcLoginHandler.ts","includedInParent":true,"mtime":1624384349260},{"name":"G:\\VSC\\mysolidapp\\package.json","includedInParent":true,"mtime":1624384368825},{"name":"G:\\VSC\\mysolidapp\\node_modules\\@inrupt\\solid-client-authn-browser\\package.json","includedInParent":true,"mtime":1624384349238},{"name":"tsyringe","loc":{"line":15,"column":27},"parent":"G:\\VSC\\mysolidapp\\node_modules\\@inrupt\\solid-client-authn-browser\\dist\\login\\oidc\\OidcLoginHandler.js","resolved":"G:\\VSC\\mysolidapp\\node_modules\\tsyringe\\dist\\esm5\\index.js"},{"name":"@inrupt/solid-client-authn-core","loc":{"line":16,"column":42},"parent":"G:\\VSC\\mysolidapp\\node_modules\\@inrupt\\solid-client-authn-browser\\dist\\login\\oidc\\OidcLoginHandler.js","resolved":"G:\\VSC\\mysolidapp\\node_modules\\@inrupt\\solid-client-authn-core\\dist\\index.js"}],"generated":{"js":"\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tsyringe_1 = require(\"tsyringe\");\r\nconst solid_client_authn_core_1 = require(\"@inrupt/solid-client-authn-core\");\r\nfunction hasIssuer(options) {\r\n    return typeof options.oidcIssuer === \"string\";\r\n}\r\nfunction hasRedirectUrl(options) {\r\n    return typeof options.redirectUrl === \"string\";\r\n}\r\nlet OidcLoginHandler = class OidcLoginHandler {\r\n    constructor(storageUtility, oidcHandler, issuerConfigFetcher, clientRegistrar) {\r\n        this.storageUtility = storageUtility;\r\n        this.oidcHandler = oidcHandler;\r\n        this.issuerConfigFetcher = issuerConfigFetcher;\r\n        this.clientRegistrar = clientRegistrar;\r\n    }\r\n    async canHandle(options) {\r\n        return hasIssuer(options) && hasRedirectUrl(options);\r\n    }\r\n    async handle(options) {\r\n        if (!hasIssuer(options)) {\r\n            throw new solid_client_authn_core_1.ConfigurationError(`OidcLoginHandler requires an OIDC issuer: missing property 'oidcIssuer' in ${JSON.stringify(options)}`);\r\n        }\r\n        if (!hasRedirectUrl(options)) {\r\n            throw new solid_client_authn_core_1.ConfigurationError(`OidcLoginHandler requires a redirect URL: missing property 'redirectUrl' in ${JSON.stringify(options)}`);\r\n        }\r\n        const issuerConfig = await this.issuerConfigFetcher.fetchConfig(options.oidcIssuer);\r\n        const clientRegistration = await solid_client_authn_core_1.handleRegistration(options, issuerConfig, this.storageUtility, this.clientRegistrar);\r\n        const OidcOptions = {\r\n            issuer: issuerConfig.issuer,\r\n            dpop: options.tokenType.toLowerCase() === \"dpop\",\r\n            ...options,\r\n            issuerConfiguration: issuerConfig,\r\n            client: clientRegistration,\r\n        };\r\n        return this.oidcHandler.handle(OidcOptions);\r\n    }\r\n};\r\nOidcLoginHandler = __decorate([\r\n    tsyringe_1.injectable(),\r\n    __param(0, tsyringe_1.inject(\"browser:storageUtility\")),\r\n    __param(1, tsyringe_1.inject(\"browser:oidcHandler\")),\r\n    __param(2, tsyringe_1.inject(\"browser:issuerConfigFetcher\")),\r\n    __param(3, tsyringe_1.inject(\"browser:clientRegistrar\")),\r\n    __metadata(\"design:paramtypes\", [Object, Object, Object, Object])\r\n], OidcLoginHandler);\r\nexports.default = OidcLoginHandler;\r\n"},"sourceMaps":{"js":{"version":3,"file":"OidcLoginHandler.js","sourceRoot":"","sources":["../../../src/login/oidc/OidcLoginHandler.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AA8BA,uCAA8C;AAC9C,6EAYyC;AAEzC,SAAS,SAAS,CAChB,OAAsB;IAEtB,OAAO,OAAO,OAAO,CAAC,UAAU,KAAK,QAAQ,CAAC;AAChD,CAAC;AAED,SAAS,cAAc,CACrB,OAAsB;IAEtB,OAAO,OAAO,OAAO,CAAC,WAAW,KAAK,QAAQ,CAAC;AACjD,CAAC;AAMD,IAAqB,gBAAgB,GAArC,MAAqB,gBAAgB;IACnC,YAC4C,cAA+B,EAClC,WAAyB,EAExD,mBAAyC,EACN,eAAiC;QAJlC,mBAAc,GAAd,cAAc,CAAiB;QAClC,gBAAW,GAAX,WAAW,CAAc;QAExD,wBAAmB,GAAnB,mBAAmB,CAAsB;QACN,oBAAe,GAAf,eAAe,CAAkB;IAC3E,CAAC;IAEJ,KAAK,CAAC,SAAS,CAAC,OAAsB;QACpC,OAAO,SAAS,CAAC,OAAO,CAAC,IAAI,cAAc,CAAC,OAAO,CAAC,CAAC;IACvD,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,OAAsB;QACjC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE;YACvB,MAAM,IAAI,4CAAkB,CAC1B,8EAA8E,IAAI,CAAC,SAAS,CAC1F,OAAO,CACR,EAAE,CACJ,CAAC;SACH;QACD,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE;YAC5B,MAAM,IAAI,4CAAkB,CAC1B,+EAA+E,IAAI,CAAC,SAAS,CAC3F,OAAO,CACR,EAAE,CACJ,CAAC;SACH;QAGD,MAAM,YAAY,GAChB,MAAM,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAEjE,MAAM,kBAAkB,GAAG,MAAM,4CAAkB,CACjD,OAAO,EACP,YAAY,EACZ,IAAI,CAAC,cAAc,EACnB,IAAI,CAAC,eAAe,CACrB,CAAC;QAGF,MAAM,WAAW,GAAiB;YAMhC,MAAM,EAAE,YAAY,CAAC,MAAM;YAE3B,IAAI,EAAE,OAAO,CAAC,SAAS,CAAC,WAAW,EAAE,KAAK,MAAM;YAChD,GAAG,OAAO;YACV,mBAAmB,EAAE,YAAY;YACjC,MAAM,EAAE,kBAAkB;SAC3B,CAAC;QAGF,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IAC9C,CAAC;CACF,CAAA;AA1DoB,gBAAgB;IADpC,qBAAU,EAAE;IAGR,WAAA,iBAAM,CAAC,wBAAwB,CAAC,CAAA;IAChC,WAAA,iBAAM,CAAC,qBAAqB,CAAC,CAAA;IAC7B,WAAA,iBAAM,CAAC,6BAA6B,CAAC,CAAA;IAErC,WAAA,iBAAM,CAAC,yBAAyB,CAAC,CAAA;;GANjB,gBAAgB,CA0DpC;kBA1DoB,gBAAgB","sourcesContent":["/*\r\n * Copyright 2021 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\n/**\r\n * @hidden\r\n * @packageDocumentation\r\n */\r\n\r\n/**\r\n * Handles Common Oidc login functions (Like fetching the configuration)\r\n */\r\n\r\nimport { injectable, inject } from \"tsyringe\";\r\nimport {\r\n  IClientRegistrar,\r\n  IIssuerConfig,\r\n  IIssuerConfigFetcher,\r\n  ILoginOptions,\r\n  ILoginHandler,\r\n  IOidcHandler,\r\n  IOidcOptions,\r\n  IStorageUtility,\r\n  ConfigurationError,\r\n  LoginResult,\r\n  handleRegistration,\r\n} from \"@inrupt/solid-client-authn-core\";\r\n\r\nfunction hasIssuer(\r\n  options: ILoginOptions\r\n): options is ILoginOptions & { oidcIssuer: string } {\r\n  return typeof options.oidcIssuer === \"string\";\r\n}\r\n\r\nfunction hasRedirectUrl(\r\n  options: ILoginOptions\r\n): options is ILoginOptions & { redirectUrl: string } {\r\n  return typeof options.redirectUrl === \"string\";\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\n@injectable()\r\nexport default class OidcLoginHandler implements ILoginHandler {\r\n  constructor(\r\n    @inject(\"browser:storageUtility\") private storageUtility: IStorageUtility,\r\n    @inject(\"browser:oidcHandler\") private oidcHandler: IOidcHandler,\r\n    @inject(\"browser:issuerConfigFetcher\")\r\n    private issuerConfigFetcher: IIssuerConfigFetcher,\r\n    @inject(\"browser:clientRegistrar\") private clientRegistrar: IClientRegistrar\r\n  ) {}\r\n\r\n  async canHandle(options: ILoginOptions): Promise<boolean> {\r\n    return hasIssuer(options) && hasRedirectUrl(options);\r\n  }\r\n\r\n  async handle(options: ILoginOptions): Promise<LoginResult> {\r\n    if (!hasIssuer(options)) {\r\n      throw new ConfigurationError(\r\n        `OidcLoginHandler requires an OIDC issuer: missing property 'oidcIssuer' in ${JSON.stringify(\r\n          options\r\n        )}`\r\n      );\r\n    }\r\n    if (!hasRedirectUrl(options)) {\r\n      throw new ConfigurationError(\r\n        `OidcLoginHandler requires a redirect URL: missing property 'redirectUrl' in ${JSON.stringify(\r\n          options\r\n        )}`\r\n      );\r\n    }\r\n\r\n    // Fetch issuer config.\r\n    const issuerConfig: IIssuerConfig =\r\n      await this.issuerConfigFetcher.fetchConfig(options.oidcIssuer);\r\n\r\n    const clientRegistration = await handleRegistration(\r\n      options,\r\n      issuerConfig,\r\n      this.storageUtility,\r\n      this.clientRegistrar\r\n    );\r\n\r\n    // Construct OIDC Options\r\n    const OidcOptions: IOidcOptions = {\r\n      // Note that here, the issuer is not the one from the received options, but\r\n      // from the issuer's config. This enforces the canonical URL is used and stored,\r\n      // which is also the one present in the ID token, so storing a technically\r\n      // valid, but different issuer URL (e.g. using a trailing slash or not) now\r\n      // could prevent from validating the ID token later.\r\n      issuer: issuerConfig.issuer,\r\n      // TODO: differentiate if DPoP should be true\r\n      dpop: options.tokenType.toLowerCase() === \"dpop\",\r\n      ...options,\r\n      issuerConfiguration: issuerConfig,\r\n      client: clientRegistration,\r\n    };\r\n\r\n    // Call proper OIDC Handler\r\n    return this.oidcHandler.handle(OidcOptions);\r\n  }\r\n}\r\n"]}},"error":null,"hash":"faf147a5a5229273a846fc064207b1e4","cacheData":{"env":{}}}