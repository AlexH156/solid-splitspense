{"id":"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/IssuerConfigFetcher.js","dependencies":[{"name":"G:\\VSC\\mysolidapp\\node_modules\\@inrupt\\solid-client-authn-browser\\dist\\login\\oidc\\IssuerConfigFetcher.js.map","includedInParent":true,"mtime":1624384349188},{"name":"G:\\VSC\\mysolidapp\\node_modules\\@inrupt\\solid-client-authn-browser\\src\\login\\oidc\\IssuerConfigFetcher.ts","includedInParent":true,"mtime":1624384349259},{"name":"G:\\VSC\\mysolidapp\\package.json","includedInParent":true,"mtime":1624384368825},{"name":"G:\\VSC\\mysolidapp\\node_modules\\@inrupt\\solid-client-authn-browser\\package.json","includedInParent":true,"mtime":1624384349238},{"name":"@inrupt/solid-client-authn-core","loc":{"line":17,"column":42},"parent":"G:\\VSC\\mysolidapp\\node_modules\\@inrupt\\solid-client-authn-browser\\dist\\login\\oidc\\IssuerConfigFetcher.js","resolved":"G:\\VSC\\mysolidapp\\node_modules\\@inrupt\\solid-client-authn-core\\dist\\index.js"},{"name":"tsyringe","loc":{"line":18,"column":27},"parent":"G:\\VSC\\mysolidapp\\node_modules\\@inrupt\\solid-client-authn-browser\\dist\\login\\oidc\\IssuerConfigFetcher.js","resolved":"G:\\VSC\\mysolidapp\\node_modules\\tsyringe\\dist\\esm5\\index.js"},{"name":"../../util/urlPath","loc":{"line":19,"column":26},"parent":"G:\\VSC\\mysolidapp\\node_modules\\@inrupt\\solid-client-authn-browser\\dist\\login\\oidc\\IssuerConfigFetcher.js","resolved":"G:\\VSC\\mysolidapp\\node_modules\\@inrupt\\solid-client-authn-browser\\dist\\util\\urlPath.js"}],"generated":{"js":"\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n};\r\nvar IssuerConfigFetcher_1;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.getJwks = exports.WELL_KNOWN_OPENID_CONFIG = void 0;\r\nconst solid_client_authn_core_1 = require(\"@inrupt/solid-client-authn-core\");\r\nconst tsyringe_1 = require(\"tsyringe\");\r\nconst urlPath_1 = require(\"../../util/urlPath\");\r\nexports.WELL_KNOWN_OPENID_CONFIG = \".well-known/openid-configuration\";\r\nconst issuerConfigKeyMap = {\r\n    issuer: {\r\n        toKey: \"issuer\",\r\n        convertToUrl: true,\r\n    },\r\n    authorization_endpoint: {\r\n        toKey: \"authorizationEndpoint\",\r\n        convertToUrl: true,\r\n    },\r\n    token_endpoint: {\r\n        toKey: \"tokenEndpoint\",\r\n        convertToUrl: true,\r\n    },\r\n    userinfo_endpoint: {\r\n        toKey: \"userinfoEndpoint\",\r\n        convertToUrl: true,\r\n    },\r\n    jwks_uri: {\r\n        toKey: \"jwksUri\",\r\n        convertToUrl: true,\r\n    },\r\n    registration_endpoint: {\r\n        toKey: \"registrationEndpoint\",\r\n        convertToUrl: true,\r\n    },\r\n    scopes_supported: { toKey: \"scopesSupported\" },\r\n    response_types_supported: { toKey: \"responseTypesSupported\" },\r\n    response_modes_supported: { toKey: \"responseModesSupported\" },\r\n    grant_types_supported: { toKey: \"grantTypesSupported\" },\r\n    acr_values_supported: { toKey: \"acrValuesSupported\" },\r\n    subject_types_supported: { toKey: \"subjectTypesSupported\" },\r\n    id_token_signing_alg_values_supported: {\r\n        toKey: \"idTokenSigningAlgValuesSupported\",\r\n    },\r\n    id_token_encryption_alg_values_supported: {\r\n        toKey: \"idTokenEncryptionAlgValuesSupported\",\r\n    },\r\n    id_token_encryption_enc_values_supported: {\r\n        toKey: \"idTokenEncryptionEncValuesSupported\",\r\n    },\r\n    userinfo_signing_alg_values_supported: {\r\n        toKey: \"userinfoSigningAlgValuesSupported\",\r\n    },\r\n    userinfo_encryption_alg_values_supported: {\r\n        toKey: \"userinfoEncryptionAlgValuesSupported\",\r\n    },\r\n    userinfo_encryption_enc_values_supported: {\r\n        toKey: \"userinfoEncryptionEncValuesSupported\",\r\n    },\r\n    request_object_signing_alg_values_supported: {\r\n        toKey: \"requestObjectSigningAlgValuesSupported\",\r\n    },\r\n    request_object_encryption_alg_values_supported: {\r\n        toKey: \"requestObjectEncryptionAlgValuesSupported\",\r\n    },\r\n    request_object_encryption_enc_values_supported: {\r\n        toKey: \"requestObjectEncryptionEncValuesSupported\",\r\n    },\r\n    token_endpoint_auth_methods_supported: {\r\n        toKey: \"tokenEndpointAuthMethodsSupported\",\r\n    },\r\n    token_endpoint_auth_signing_alg_values_supported: {\r\n        toKey: \"tokenEndpointAuthSigningAlgValuesSupported\",\r\n    },\r\n    display_values_supported: { toKey: \"displayValuesSupported\" },\r\n    claim_types_supported: { toKey: \"claimTypesSupported\" },\r\n    claims_supported: { toKey: \"claimsSupported\" },\r\n    service_documentation: { toKey: \"serviceDocumentation\" },\r\n    claims_locales_supported: { toKey: \"claimsLocalesSupported\" },\r\n    ui_locales_supported: { toKey: \"uiLocalesSupported\" },\r\n    claims_parameter_supported: { toKey: \"claimsParameterSupported\" },\r\n    request_parameter_supported: { toKey: \"requestParameterSupported\" },\r\n    request_uri_parameter_supported: { toKey: \"requestUriParameterSupported\" },\r\n    require_request_uri_registration: { toKey: \"requireRequestUriRegistration\" },\r\n    op_policy_uri: {\r\n        toKey: \"opPolicyUri\",\r\n        convertToUrl: true,\r\n    },\r\n    op_tos_uri: {\r\n        toKey: \"opTosUri\",\r\n        convertToUrl: true,\r\n    },\r\n    solid_oidc_supported: {\r\n        toKey: \"solidOidcSupported\",\r\n    },\r\n};\r\nasync function getJwks(issuerConfig) {\r\n    const issuerResponse = await fetch(issuerConfig.jwksUri);\r\n    return issuerResponse.json();\r\n}\r\nexports.getJwks = getJwks;\r\nfunction processConfig(config) {\r\n    const parsedConfig = {};\r\n    Object.keys(config).forEach((key) => {\r\n        if (issuerConfigKeyMap[key]) {\r\n            parsedConfig[issuerConfigKeyMap[key].toKey] = config[key];\r\n        }\r\n    });\r\n    return parsedConfig;\r\n}\r\nlet IssuerConfigFetcher = IssuerConfigFetcher_1 = class IssuerConfigFetcher {\r\n    constructor(storageUtility) {\r\n        this.storageUtility = storageUtility;\r\n    }\r\n    static getLocalStorageKey(issuer) {\r\n        return `issuerConfig:${issuer}`;\r\n    }\r\n    async fetchConfig(issuer) {\r\n        let issuerConfig;\r\n        const openIdConfigUrl = urlPath_1.appendToUrlPathname(issuer, exports.WELL_KNOWN_OPENID_CONFIG);\r\n        const issuerConfigRequestBody = await window.fetch(openIdConfigUrl);\r\n        try {\r\n            issuerConfig = processConfig(await issuerConfigRequestBody.json());\r\n        }\r\n        catch (err) {\r\n            throw new solid_client_authn_core_1.ConfigurationError(`[${issuer.toString()}] has an invalid configuration: ${err.message}`);\r\n        }\r\n        await this.storageUtility.set(IssuerConfigFetcher_1.getLocalStorageKey(issuer), JSON.stringify(issuerConfig));\r\n        return issuerConfig;\r\n    }\r\n};\r\nIssuerConfigFetcher = IssuerConfigFetcher_1 = __decorate([\r\n    tsyringe_1.injectable(),\r\n    __param(0, tsyringe_1.inject(\"browser:storageUtility\")),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], IssuerConfigFetcher);\r\nexports.default = IssuerConfigFetcher;\r\n"},"sourceMaps":{"js":{"version":3,"file":"IssuerConfigFetcher.js","sourceRoot":"","sources":["../../../src/login/oidc/IssuerConfigFetcher.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright 2021 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\n/**\r\n * @hidden\r\n * @packageDocumentation\r\n */\r\n\r\n/**\r\n * Responsible for fetching an IDP configuration\r\n */\r\nimport {\r\n  IIssuerConfig,\r\n  IIssuerConfigFetcher,\r\n  IStorageUtility,\r\n  ConfigurationError,\r\n} from \"@inrupt/solid-client-authn-core\";\r\nimport { injectable, inject } from \"tsyringe\";\r\nimport { appendToUrlPathname } from \"../../util/urlPath\";\r\n\r\nexport const WELL_KNOWN_OPENID_CONFIG = \".well-known/openid-configuration\";\r\n\r\n/* eslint-disable camelcase */\r\nconst issuerConfigKeyMap: Record<\r\n  string,\r\n  { toKey: string; convertToUrl?: boolean }\r\n> = {\r\n  issuer: {\r\n    toKey: \"issuer\",\r\n    convertToUrl: true,\r\n  },\r\n  authorization_endpoint: {\r\n    toKey: \"authorizationEndpoint\",\r\n    convertToUrl: true,\r\n  },\r\n  token_endpoint: {\r\n    toKey: \"tokenEndpoint\",\r\n    convertToUrl: true,\r\n  },\r\n  userinfo_endpoint: {\r\n    toKey: \"userinfoEndpoint\",\r\n    convertToUrl: true,\r\n  },\r\n  jwks_uri: {\r\n    toKey: \"jwksUri\",\r\n    convertToUrl: true,\r\n  },\r\n  registration_endpoint: {\r\n    toKey: \"registrationEndpoint\",\r\n    convertToUrl: true,\r\n  },\r\n  scopes_supported: { toKey: \"scopesSupported\" },\r\n  response_types_supported: { toKey: \"responseTypesSupported\" },\r\n  response_modes_supported: { toKey: \"responseModesSupported\" },\r\n  grant_types_supported: { toKey: \"grantTypesSupported\" },\r\n  acr_values_supported: { toKey: \"acrValuesSupported\" },\r\n  subject_types_supported: { toKey: \"subjectTypesSupported\" },\r\n  id_token_signing_alg_values_supported: {\r\n    toKey: \"idTokenSigningAlgValuesSupported\",\r\n  },\r\n  id_token_encryption_alg_values_supported: {\r\n    toKey: \"idTokenEncryptionAlgValuesSupported\",\r\n  },\r\n  id_token_encryption_enc_values_supported: {\r\n    toKey: \"idTokenEncryptionEncValuesSupported\",\r\n  },\r\n  userinfo_signing_alg_values_supported: {\r\n    toKey: \"userinfoSigningAlgValuesSupported\",\r\n  },\r\n  userinfo_encryption_alg_values_supported: {\r\n    toKey: \"userinfoEncryptionAlgValuesSupported\",\r\n  },\r\n  userinfo_encryption_enc_values_supported: {\r\n    toKey: \"userinfoEncryptionEncValuesSupported\",\r\n  },\r\n  request_object_signing_alg_values_supported: {\r\n    toKey: \"requestObjectSigningAlgValuesSupported\",\r\n  },\r\n  request_object_encryption_alg_values_supported: {\r\n    toKey: \"requestObjectEncryptionAlgValuesSupported\",\r\n  },\r\n  request_object_encryption_enc_values_supported: {\r\n    toKey: \"requestObjectEncryptionEncValuesSupported\",\r\n  },\r\n  token_endpoint_auth_methods_supported: {\r\n    toKey: \"tokenEndpointAuthMethodsSupported\",\r\n  },\r\n  token_endpoint_auth_signing_alg_values_supported: {\r\n    toKey: \"tokenEndpointAuthSigningAlgValuesSupported\",\r\n  },\r\n  display_values_supported: { toKey: \"displayValuesSupported\" },\r\n  claim_types_supported: { toKey: \"claimTypesSupported\" },\r\n  claims_supported: { toKey: \"claimsSupported\" },\r\n  service_documentation: { toKey: \"serviceDocumentation\" },\r\n  claims_locales_supported: { toKey: \"claimsLocalesSupported\" },\r\n  ui_locales_supported: { toKey: \"uiLocalesSupported\" },\r\n  claims_parameter_supported: { toKey: \"claimsParameterSupported\" },\r\n  request_parameter_supported: { toKey: \"requestParameterSupported\" },\r\n  request_uri_parameter_supported: { toKey: \"requestUriParameterSupported\" },\r\n  require_request_uri_registration: { toKey: \"requireRequestUriRegistration\" },\r\n  op_policy_uri: {\r\n    toKey: \"opPolicyUri\",\r\n    convertToUrl: true,\r\n  },\r\n  op_tos_uri: {\r\n    toKey: \"opTosUri\",\r\n    convertToUrl: true,\r\n  },\r\n  solid_oidc_supported: {\r\n    toKey: \"solidOidcSupported\",\r\n  },\r\n};\r\n/* eslint-enable camelcase */\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport async function getJwks(issuerConfig: IIssuerConfig): Promise<any> {\r\n  const issuerResponse = await fetch(issuerConfig.jwksUri);\r\n  return issuerResponse.json();\r\n}\r\n\r\nfunction processConfig(\r\n  config: Record<string, string | string[]>\r\n): IIssuerConfig {\r\n  const parsedConfig: Record<string, string | string[]> = {};\r\n  Object.keys(config).forEach((key) => {\r\n    if (issuerConfigKeyMap[key]) {\r\n      // TODO: PMcB55: Validate URL if \"issuerConfigKeyMap[key].convertToUrl\"\r\n      //  if (issuerConfigKeyMap[key].convertToUrl) {\r\n      //   validateUrl(config[key]);\r\n      //  }\r\n      parsedConfig[issuerConfigKeyMap[key].toKey] = config[key];\r\n    }\r\n  });\r\n\r\n  return parsedConfig as unknown as IIssuerConfig;\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\n@injectable()\r\nexport default class IssuerConfigFetcher implements IIssuerConfigFetcher {\r\n  constructor(\r\n    @inject(\"browser:storageUtility\") private storageUtility: IStorageUtility\r\n  ) {}\r\n\r\n  // This method needs no state (so can be static), and can be exposed to allow\r\n  // callers to know where this implementation puts state it needs.\r\n  public static getLocalStorageKey(issuer: string): string {\r\n    return `issuerConfig:${issuer}`;\r\n  }\r\n\r\n  async fetchConfig(issuer: string): Promise<IIssuerConfig> {\r\n    let issuerConfig: IIssuerConfig;\r\n\r\n    const openIdConfigUrl = appendToUrlPathname(\r\n      issuer,\r\n      WELL_KNOWN_OPENID_CONFIG\r\n    );\r\n    const issuerConfigRequestBody = await window.fetch(openIdConfigUrl);\r\n    // Check the validity of the fetched config\r\n    try {\r\n      issuerConfig = processConfig(await issuerConfigRequestBody.json());\r\n    } catch (err) {\r\n      throw new ConfigurationError(\r\n        `[${issuer.toString()}] has an invalid configuration: ${err.message}`\r\n      );\r\n    }\r\n\r\n    // Update store with fetched config\r\n    await this.storageUtility.set(\r\n      IssuerConfigFetcher.getLocalStorageKey(issuer),\r\n      JSON.stringify(issuerConfig)\r\n    );\r\n\r\n    return issuerConfig;\r\n  }\r\n}\r\n"]}},"error":null,"hash":"595c9fd9e31a240bf87ea874492ccfb3","cacheData":{"env":{}}}