{"version":3,"sources":["node_modules/n3/src/IRIs.js","node_modules/queue-microtask/index.js","node_modules/n3/src/N3Lexer.js","node_modules/n3/src/N3Util.js","node_modules/n3/src/N3DataFactory.js","node_modules/n3/src/N3Parser.js","node_modules/n3/src/N3Writer.js","node_modules/n3/src/N3Store.js","node_modules/n3/src/N3StreamParser.js","node_modules/n3/src/N3StreamWriter.js","node_modules/n3/src/index.js"],"names":["RDF","XSD","SWAP","xsd","decimal","boolean","double","integer","string","rdf","type","nil","first","rest","langString","owl","sameAs","r","forSome","forAll","log","implies","namespaces","escapeSequence","escapeReplacements","illegalIriChars","lineModeRegExps","_iri","_unescapedIri","_simpleQuotedString","_langcode","_blank","_newline","_comment","_whitespace","_endOfFile","invalidRegExp","N3Lexer","constructor","options","_simpleApostropheString","_prefix","_prefixed","_variable","_number","_boolean","_keyword","_sparqlKeyword","_shortPredicates","_lineMode","lineMode","_n3Mode","key","RegExp","n3","_comments","comments","_literalClosingPos","_tokenizeToEnd","callback","inputFinished","input","_input","outputComments","whiteSpaceMatch","comment","exec","line","_line","value","prefix","substr","length","test","firstChar","match","matchLength","inconclusive","_previousMarker","_unescape","reportSyntaxError","_parseLiteral","toUpperCase","token","previousToken","self","_syntaxError","item","invalid","replaced","replace","sequence","unicode4","unicode8","escapedChar","String","fromCharCode","Number","parseInt","charCode","opening","openingLength","closingPos","Math","max","indexOf","backslashCount","raw","substring","lines","split","issue","err","Error","context","undefined","tokenize","tokens","error","e","t","push","_pendingBuffer","setEncoding","on","data","Buffer","concat","isNamedNode","term","termType","isBlankNode","isLiteral","isVariable","isDefaultGraph","inDefaultGraph","quad","graph","iri","factory","prefixes","defaultPrefixes","Object","create","processPrefix","N3DataFactory","cache","local","namedNode","DEFAULTGRAPH","_blankNodeCounter","escapedLiteral","quadId","DataFactory","blankNode","variable","literal","defaultGraph","triple","Term","id","equals","other","toJSON","NamedNode","Literal","lastIndexOf","language","atPos","toLowerCase","datatype","datatypeString","dtPos","char","BlankNode","name","Variable","DefaultGraph","termFromId","endPos","components","unescapeQuotes","termToId","escapeQuotes","subject","predicate","object","Quad","_subject","_predicate","_object","_graph","_","quoted","languageOrDataType","isFinite","isInteger","isNaN","blankNodePrefix","N3Parser","_contextStack","_setBase","baseIRI","initDataFactory","format","isTurtle","isTriG","isNTriples","isNQuads","isN3","isLineMode","_supportsNamedGraphs","_readPredicateOrNamedGraph","_readPredicate","_supportsQuads","_supportsRDFStar","_resolveRelativeIRI","_blankNodePrefix","_lexer","lexer","_explicitQuantifiers","explicitQuantifiers","_resetBlankNodePrefix","_base","_basePath","fragmentPos","_baseRoot","_baseScheme","_saveContext","n3Mode","inverse","_inversePredicate","blankPrefix","_prefixes","quantified","_quantified","_restoreContext","pop","_readInTopContext","_error","_callback","_sparqlStyle","_readPrefix","_readBaseIRI","_readSubject","_readNamedGraphLabel","_readEntity","quantifier","_resolveIRI","_namedNode","_blankNode","_readBlankNodeHead","RDF_NIL","_readListItem","_readPunctuation","N3_FORSOME","_quantifier","_readQuantifierList","N3_FORALL","_literalValue","_completeSubjectLiteral","_literal","_getPathReader","ABBREVIATIONS","_readBlankNodeTail","_readObject","_readDataTypeOrLang","_getContextEndReader","_readGraph","_readBlankNodePunctuation","_emit","empty","_readPredicateAfterBlank","list","next","previousList","stack","parent","RDF_FIRST","_readListItemDataTypeOrLang","RDF_REST","_completeObjectLiteral","_completeLiteral","listItem","completed","_readCallback","_readFormulaTail","inversePredicate","_readQuadPunctuation","_readPrefixIRI","prefixNode","_prefixCallback","_readDeclarationPunctuation","_readNamedGraphBlankLabel","entity","QUANTIFIERS_GRAPH","_readQuantifierPunctuation","afterPath","_afterPath","_readPath","_readForwardPath","_readBackwardPath","_readRDFStarTailOrGraph","_readRDFStarTail","_quad","contextStack","message","noop","_removeDotSegments","result","i","pathStart","segmentStart","parse","quadCallback","prefixCallback","quads","every","parser","prototype","escape","escapeAll","escapedCharacters","SerializedTerm","N3Writer","outputStream","_prefixRegex","write","_lists","lists","output","_outputStream","chunk","encoding","done","end","_endStream","_baseIRI","_prefixIRIs","addPrefixes","_writeQuad","_writeQuadLine","_inDefaultGraph","_write","_encodeIriOrBlank","_encodeObject","_encodePredicate","_encodeSubject","_prefixMatch","quadToString","quadsToString","map","join","_encodeQuad","startsWith","characterReplacer","prefixMatch","_encodeLiteral","_blockedWrite","addQuad","addQuads","addPrefix","hasPrefixes","IRIlist","prefixList","prefixIRI","blank","children","child","contents","elements","Array","singleDone","character","charCodeAt","toString","N3Store","_size","_graphs","_id","_ids","_entities","_blankNodeIndex","_factory","size","graphs","subjects","graphKey","subjectKey","predicateKey","keys","_addToIndex","index0","key0","key1","key2","index1","index2","existed","_removeFromIndex","_findInIndex","name0","name1","name2","array","tmp","varCount","entityKeys","value0","entity0","value1","entity1","values","l","parts","_loop","_loopByKey0","_loopByKey1","_loopBy2Keys","_countInIndex","count","_getGraphs","isString","_uniqueEntities","uniqueIds","add","graphItem","predicates","objects","freeze","ids","entities","changed","delete","removeQuad","has","getQuads","import","stream","removeQuads","remove","removeMatches","Readable","objectMode","_read","deleteGraph","content","subjectId","predicateId","objectId","graphId","DatasetCoreAndReadableStream","countQuads","forEach","some","getSubjects","results","forSubjects","s","getPredicates","forPredicates","p","getObjects","forObjects","o","getGraphs","forGraphs","g","createBlankNode","suggestedName","index","extractLists","ignoreErrors","onError","node","tails","toRemove","tailQuad","items","malformed","head","headPos","current","objectQuads","subjectQuads","unshift","Symbol","iterator","n3Store","assign","filtered","_filtered","N3StreamParser","Transform","decodeStrings","_readableState","onData","onEnd","event","emit","uri","_transform","_flush","N3StreamWriter","writableObjectMode","writer","_writer"],"mappings":";ACAA;AACA;AACA;AACA;AACA;ADJA,ACKA,MDLMA,GAAG,GAAI,6CAAb;AAAA,AKCA,AEAA,ACAA,ACAA,AHAA,ALKA,MDLIC,GAAG,GAAI,mCADX;AAAA,AECA,ADMA,MDLIC,IAAI,GAAG,iCAFX;AKEA,AEAA,ACAA,ACAA,AHAA,ALMA,eDJe;AACbC,AEHF,ADOA,EDJEA,GAAG,EAAE;AACHC,AIHJ,ACAA,AEAA,ADAA,INGIA,OAAO,EAAG,GAAEH,GAAI,SADb;AAEHI,IAAAA,OAAO,EAAG,GAAEJ,GAAI,SAFb;AAGHK,AIJJ,AIJA,ACAA,ITQIA,MAAM,EAAI,GAAEL,GAAI,QAHb;AAIHM,AETJ,AMIA,ACAA,ANFA,IHOIA,OAAO,EAAG,GAAEN,GAAI,SAJb;AAKHO,AENJ,AGJA,AGKe,ACAA,ITKXA,EENE,AMCeoe,ACAAW,ITKX,EAAI,GAAEtf,GAAI,EQLL,ACAA,SDA6B4e,ACAAA,yBDA7B,ACAA,CDAuC,ACAA;ATA/C,AEDC1e,AGCR,AGCEmC,ACAAA,EPFMnC,AMENmC,ACAAA,CTFa,CKCXgK,SGCS,ACAA,CDAC/J,ACAAA,KJDK,EGCN,ACAA,CJDS,CAAtB,AGCuB,ACAA,EJCvB;ALKE9B,AIZF,AFIM,AMGF,ACAA,ETKFA,EERca,CFQX,EAAE,GQLG,ACAA,OPHV,EAEA;AFOIZ,AIZJ,ACOe,AGDHoe,ACAAjK,ANPZ,IHaInU,EKLiB6L,AGDTuS,ACAAjK,ETMJ,EAAS,GAAE7U,CKLJ,AIDK,CJCU,CLKP,ASND,GDAG,EAAE,CRKpB,ASLG;ATONW,AITJ,AFEA,AGEE2B,AETF,ACOU,ACAoBkd,ANH9B,AGJA,EDSEld,ELKE3B,CQPA,CJFE,AFEAY,AOAwBie,CTOvB,EAAU,GAAExf,CKLN,CAACuC,CLKS,KAFhB,AELa,CGEP,EHFU,AGEA,CIFyB,EAAE,+CPAlD;AFQI3B,AIVIH,AFGR,AGEI,AELJ,ACGI,ACDM,ANFH,AGAP,EFAQA,EJUJG,CIVE,AKEF,CPCEY,AIHA6H,CGCiB,CAGnB,CTMK,AKLAmD,AGFAuS,ALHO/W,EHUC,GAAEhI,GAAI,CMVL,EHAX,CAAqBiI,AGAPgB,CDKjB,CGFA,CRIG,AEJiB,AMAA0S,CHEC,AFLlB,EDGoB,AGEvB,AFL8B,OKG9B,GAAiC,IAAjC,CAFmB,CAInB,CFL+B9R,YAAd,EAArB;ANWIhJ,AIXSV,AFIX,AGEE,AELW,AJAb,ECDWA,EJWTU,EOViB2W,EPUb,AEPA,CGECzL,AFLA,CHUQ,AGVP,CAAC9D,CDEgB,CFQRjI,AOVJ,CAAc,CFKzB,AFLK,CHUc,EKLL,CFLCiI,GHMZ,AKDH,CAFmB,AFHA,CEOnB,AFPoBC,QAAL,KAAkB,WAAnC;AHWEpH,AIZE,AFIQ,AKFZwB,ACIE,ACDA,ANHH,AGAD,ECAEA,AJEF,EHQIxB,AIZiBQ,EEEf,CJEa,GADQ,AMGjBwS,ACDA2L,GFHG,CPUC,AOVA7L,EPUG,AQND,ACDA,CLLhB,EJYmB5T,AIVnB,AGAa,ACIM,ACDA,EFHEuC,CPUE,CQNAgK,CCDCmT,IFHX,EAAiB,CEGX,GAAe,IAAItL,EDCnB,CAAa7R,OAAb,CAAf,MCD8B,CAAa;ATExC,AEHiB,AGKpBA,AENA,ACIA,ACDEgS,AHJE9T,EAAAA,CNHO,CKUX8B,CCPE,CGIAgS,CPFuB,CMGrByK,ENJmB,CGMhB,AIHA,EAAE,CJGCzc,AGFV,ACDUiG,EDCEyW,ECDH,EAAOpK,CJGC,AGFjB,IHEqB,EAArB,CIHS,EAAiBlR,QAAjB,KAA8B;ATQzC5C,AIXF,AFEE,AKDE,ACIA+S,ACFyC,AHJhC3T,ENYXY,AMZWZ,EFCTkJ,AIKAyK,CRMC,EAAE,AETA,EKDE2D,CCIC,CNLiB,AMKhBhE,ECFuChM,CFF9C,EHDJ,AIKI,CDJa,ACIA,ACF4B,CFFzC,AEEmDe,CFJzB,CAG1B,EECyC;ATSzCxH,AIXJ,AFCa,AGKT,AGDE4G,ACHwDjE,ANDvD,AGHD,INaF3C,AIXAsI,AEFiBhI,EEOfsG,CNJY,CMIV,ACHsDjE,CJIrD8I,AFLOtE,CHUN,AQNA,CNNiB,AMMhB+W,CRMC,IQNF,ACH4D,CJIlE,ACRJ,CDQkB3c,AGDAoB,CFLlB,CGE0EA,ANDnE,CCDc,ADCOsE,GCDJ,CAAxB,ACMyB,AFLlB,CEKmByE,AGDhB,CLJwB,CMCgD,EAApB,CDG/B,EHC3B;ALIG,AIRP,AFDwB,AKCpB,ACII,ACJ+E,ANArF,GHPa,GIOTnD,CFDuB,AOAkB,EFCtCmO,AJAA,CAAC,CDHiB,ACGhBzP,IAAF,CIAL,ACIYiX,GDJGpW,AJAAb,CCAC,CIIZ,EJJe,ADAA,CAACC,CIAC,CAACa,MAAP,AJAA,CIAc,IAAd,AJAkB,CIAjC,CAJ0B,CAK1B,KHDJ,GDAE;AHWA9H,AIVF,AFFmC,AGM/BsB,AEHA,ACGI,ACJFwS,ANAL,AGFD,ENYE9T,AGRF,CHQG,CKNCsB,CLMC,CIVCiH,AKAAuL,AHFAf,CJAkC,EOE/B,EPJkB,AGQhB,AIJArQ,CLAC,ACIAgF,ACNA,GFEG,AIIF,AFNK,IDMd,AIJe,EDIX,EHAegE,AIJA,eJIe,CAAC,IAAD,EAAOpK,OAAO,CAACoG,KCNrD,EDMsC,CAAlC,CAPmB,CASnB,yEDNJ,EAEA;AJSIzH,AEb0C,AMMzB8d,ACJI,AHFzB,INaI9d,EMZA+S,CJD+C,IFaxC,AEfgB,CMQN+K,CROP,ASXgBvX,EHDjB,CNYGvH,CSXS,CDIE,ACJQ,AHDnB,ENYK,CQPSyD,CCJL,ODIJ,MRMhB,6CMZL;ANcIxC,AITJ,AFJE,AGQE,AELA,ACEoC,ACJEwC,AHF1C,INcIxC,EITEsI,AEHFyK,CJDG,COCmCvQ,CFEjCgU,CPUC,AEhBiB,AGWjB/K,ELKI,AOVV,GPUY1M,AOVD,CFKC,AELZ,AEF8C,CLGjC,EJSI,AKLD,CDJA,AKHkCyD,GHAjC,GDOMpB,ACPH,EGAsC,EAApB,GJOR,CAACqK,MAAf,KAA0B,QAA3B,GACFrK,OAAO,CAACqK,MAAR,CAAejI,KAAf,CAAqB,MAArB,EAA6B,CAA7B,EAAgC8F,WAAhC,EADE,GAC8C,EAD7D;ALGC,AINHrB,AFLU,AGQR,AEJA,AEH+D,ANG5D,AGFD,EFGJA,CJZa,IEOE,CIEL,CCEHwO,AJAOxP,CDPW,AGanByE,CDNY,EGAhB,CDHoB,ECGR/D,EFMA,AFNT,CAAmBb,EEMP,CENG,CAACc,AJAhB,EAAyB,IIAhB,CFMYtE,AENE,IFMX,AENH,CFMiBmI,AEN7B,MFMe,CAFf;ALOFxL,AITAsI,AFNoB,AGQlB,AEHA,ACCI,ACPuC,ANM7C,AGHkB,ENalBtI,AITAsI,GJSG,AShB6B,ETgB3B,AEfoB,AOEpBnH,AHAkB,ECGhBqV,AJAA,CDRkB,AGae9K,AFLhC,CCDU,ADCT7E,CGJa,CCIpB,CAAU,AENoB,CDOrB,ACPT,ANMK,CEKuC,AIfzB,CASnB,CFCA,CFK+C,AFLhCA,CKCX,EDDc,CAAlB,AJAmB,CITO,AJSNC,CIAC,CFKiCzD,IAAP,CAAYmI,CFL5C,KEKgC,AFLd,CEGjC,QFHF;AHWEvL,AITFsI,AFP8B,AGQ5B,AGFkBsV,ALArB,AGJ+B,EFK9BtV,ADCF,EHQItI,GEhBiC,CIEC,EFElB,AFPO,AGcnB0L,CLKG,CQVWkS,CRUR,AMfU,GNeR/e,CQVW,GRUN,AKLH,AGLYyD,GHKT,KGLC,IHKQc,IAAT,CAAcmI,MAAd,CAHjB;ALOG,AIPLhD,AFRwC,AGQtC,AEFA,ACAoC,ACDpC,AHFE,EFKJA,KFR6C,CIGnC,CFCQ,AGEXiO,AEDAwH,CPRkB,AGciBrS,GCVpB,KDU4B,AELhD,CEDA,EJMmD,AELlClE,CEDC,CAACN,IFCI,AEDL,CJMwC/D,AELlCsE,CEDC8L,GJM0B,CAAYjI,CEL9C,CAAc,EEDb,EJMiC,AELlC,AEDkBkI,CJGnC,AEFA,CAV0B,CAUY,CEDpB,KAA0B;ATZjC,AIgBbjL,AFTkD,AGQhD,AEDA,ACHI,ACC0C4V,AHF/B,EFMjB5V,IKJgD4V,CPLO,CIGhC,EJNE,AGenBxS,EIPgD,CAACsJ,AHJjC,CFGJ,ACQR,GAAG,GIPmC,CAAe/N,CJO7CrF,GIP8B,EAAqB2R,EJOxD,EIPmC,CJOpB,KAAKrQ,IAAL,CAAUmI,MAAV,CAJ1B;ADEFpE,AFV4D,AGQ1D,AGAG,ACHwE,ANIxE,AGNyB,EFO9BA,GKLE,CLDgB,CFJ+C,CIG7B,CHMtBH,CDZW,AGgBnB6E,GCZgB,MHQjB,CEIW,AFJSjF,GEIN8E,CFJd,EAA0B,OEIF,IAAIC,QAL/B;ADGFlD,AFVA,AGaE,AENA,ACNa,ALQf,AGP2C,EFQ3CA,GITE,ENDG,AMSD,CJCE,ACGA,ACX2C,CCK1CgO,AJEA,CCCCtP,AFdiB,AGiBjB,AFJA,CAACP,IEIIkF,AFJN,IAAUlF,IAAI,CIFnB,AJEoBC,GIFG,CAAvB,CAZ0B,CAc1B,EJAe,GEIT,EFJ2B,CEIC,EAAE2E,OFJtC,CEI8C,IAAII,IAAd,CAA9B,CAAJ,EACE,KAAKG,0BAAL,GAAkC,KAAKC,cAAvC,CAjBiB,CAkBnB;ADZgB,AFHR,AMUN,ACLF,ANKH,AGVuB,CFGxB,AELA,CHcA,CGPA,EEKO/F,ENVU,EOKRgY,CPTkB,AMcrB,EAAQ9W,GCLV,CDKE,ECLYsM,GDKK,CCLD,IAAI;APLJ,AGgBlB,AENA,ACAqBxN,ACLGmY,MDKHnY,ACLGmY,CPLD,CKUnB,CFMCnS,AENA/K,CLdkB,CMcG,CCLI,CAACwS,ELOpBtL,AIFmB,CDA1B,AELoB,CAAWqL,GFKnBlB,ACAmBuL,CCLX,EJWxB,CGN8B,CDA1B,ACAoC,CHMlB,EDF1B,ACE4BtS,CENC,CAAC+G,ECAI,EAAmBtM,CDAlB,CFMC,AENA,CAAD,CAA/B,CCA8B,CHMMwF,AELlCvK,ACDmB,IAAsCiG,EHMnC,CELf,CCDsD,EHMjBuE,AELlC6G,ECDuD,GDCjE,EAAiBA,ACDqDnM,GHMhD,CGN2C,CDC3C,ACDqDe,EHMjByE,CELjC,CCDwC,CAA9C,CHMC,CAAtB,AELE,CFdiB,CAoBnB;AHjB4B,AKY5B1K,ACFqF,ACL1C,AHC/C,ICMIA,CCXA,ACIA,CHCE4R,CJN+B,AMW/B,GNfqB,CKgBhB,GAAG5R,MDNd,CCMqB,IAAI,EAArB,EDNyBwH,mBAA7B,CAAkC;AJNQ,AGkBtC,AELA,ACDE,ACNH,ANOI,AGNL,GGdoD,CAetD,CDIOzF,ENZwC,EGkBtCiJ,AELAwK,AJAOzP,CDjBW,CMgBrB,EAAS8W,GAAT,CDCF,GAAgB7c,CCDG,ELChB,CAAwB0F,CEK3B,EELuB,CFKC2E,AELAjE,AJArB,EAA8B,IEKH,CELd,IFKmB,AELAM,EFKX,IAAiB,WAAWxE,IAAX,CAAgBmI,AELzD,CAlB0B,CAoB1B,IFGyC,CAAzC,CArBmB,CAsBnB;AHnBgD,AMY3B,ALEvB,AGNA,OJRuD,ECchD,CDlBkB,ACkBjB,CKFoBuS,ALEnBlX,IKFc,ALEhB,CKF0B,GLEhBA,IAAI,CKFE,ALEDC,EKFqB5D,MAApB,ALEN,EKFkC8a,GAA5B,ALEY,cAAnC;ACCK,AFfuD,AGoB1D,AEJA,ACJwD,ALG3D,AGNCnV,EHQF,AGREA,GERE,CJcSF,CFfsD,AMN5C,CH0BfmD,AEJA0G,ACDJ,AFNI,EFMD,AFnBoB,CEmBT,AENP,ECOP,EACE,GFGF,EACE,AEJK4C,KFIAhJ,GEJL,CAAcoG,KAAd,UFIA,GAA2BlL,GAAG,IAAI;ADLtCpG,AFfA,AGoBwC,AEHvC,AETD+Y,AHCE,EFMF/Y,AKPA+Y,CFf2B,CA0B3B,GLnBK,COQC,CAACC,CPbkB,CIchB,EFME,ACKoC,CDLnCtR,CKPN,CLOK,AENT,CDWsC,AIZzB,CLOC;AACd,AFhBQ,AGoB4C,AECtD,ACNE,ACNAsR,AHCD,IGDCA,CJWE,EHpBW,EEgBRtR,AIDAqV,CNpBkB,AOcjB,CLON,AKPOzX,EAAP,CLOUoC,AKPA,ELOV,GIDA,CCNA,EDMkB,ACNExB,CDMDoM,GCNK,EDMN,EAAQC,ACNE,QDMV,EAAkBC,IAAlB,KAA2B;AJE9C,AFjBmB,AGqBlB,AGN+CkK,ACNjB,ANQ3B,GCHW,CAKhB,EIJiDA,CNfxB,EGqBlBvR,AFJOlF,CDtBW,COcYgM,CDMkB,CAACK,GCNxB,CAAWpM,CDMY,CAAN,ECNjB,ENQ3B,CAAwBA,CEI3B,GAAwB,AFJrB,EAA8B,KEIFjG,OAAO,CAAC+J,eAAf,KAAmC,QAAnC,GAA8C,EAA9C,GACE/J,OAAO,CAAC+J,eAAR,CAAwB5G,OAAxB,CAAgC,SAAhC,EAA2C,IAA3C,CAD1B;AHrB4B,AGuB5B,AGR8DoP,ACNb,ANSnD,AGbgC,EAQlC,GGJI,CDM8DA,CNf7B,EGuB5BpH,AFLApF,CDvBkB,AMoB2C,KHQlE,GAAc/F,KFLK,CAACiG,CEKC,CAACmF,EFLE,CAAClF,EEKX,GFLK,CEKY,AFLjC,IEKqCpG,gBAAJ,CAAY;AHvBL,AGuBOa,AEDvC,ACPiE,ACLvEoY,ANSH,EAED,EMXIA,CDKA,CHQ6CpY,AED3C8U,CLtByC,GKsBrC,AEZA,CAACpQ,EFYE,AEZT,CJaqD,AIb3C,EJa6CsF,GIbvD,EAAoB,KJauB,CIbjB;ALUnB,AFzBgB,AG4B4C5J,AEAnE,AEb4B,CPfhC,KEyBMe,ACGiEf,EAAE,EAAE2J,CDHhE,AKV0B8H,GLUvB,AKVkB;ALW5B,AFnBJ,AGqB+C,AEC3C,ACRA,ACNyC,AHI9B,KDSoB,AIb/B,CPREtT,AGqBF,ACTiB2S,CDlBE,CA4BnB,AEAI4D,CCRCsH,EJKE,CGGC,EDVG,CCUA,ACRX,AFF0B,CFOdtV,EAAZ,AILc8K,EDQE2C,CLtBC,CMcC,ENdE,CKsBpB,CCRsB,0BNd1B;AEoBG,AFlBH,AKqBI,ACTwBwH,ACLxB3D,ANWG,AGPLhZ,EAAAA,CFDgB,CAUhB,AKbEgZ,EPPE5Z,AMYsBud,EDSpBjH,CJHQ1T,CMXN,CDKuB,ACLtBsD,CFcC,CEdR,AHIS,CGJC,AHIAyM,CHOP,CAAgB3L,CIGN,EJHV,EDlBc,AKqBjB,AEdA,ANWwBC,EIItB,AEfkBrB,CPPA,EIWX,EGJgB,ANWtB,AGPqB/E,ECWfyV,AJJwB,EMXJ,EFe3B,CAJO,ADPA,CCaT,CDbiC;AJVnCrW,AGoBE,AGTiCmT,ACLF,ANYjC,AGPE,EJXFnT,IAAI,AMW+BmT,ENX7B,CGoBClH,AFFAhF,CKPgC,CCLDuW,CPPhB,GOOW,CAAU,CNY5B,CAAC,KMZiB,EAAmB7X,IJclD,CId+B,EJcH,CAAC,CAAC/E,OAAO,CAACsL,mBAAtC;AHnBFjM,AGoBC,AEGCoW,ACb0C,ACLiB,ANY3C,AGNhB,EJXFpW,CGX4B,CAiC5B,AECEoW,CCbA,ACLA,GFkBI,AJNgBtP,CGNf4L,ECYE,CAAP,GLvBW,EAAE,IAFO,AIapB,GAAoB,KAApB,CAFiC,CAIjC;AFMFrK,AFlBApI,AGuBA,AEAE,ACbD,ACLCyZ,ANWc,ECEhBrR,AFlBApI,CMfoD,AL+BrC,CKJf,ACPEyZ,CNW2B3S,GCEvB,CAACuB,CGKC+N,AElBA,CAACrQ,CNWM,CMXb,ANWK,CCED,AKbM,ANW0B,ECExB,AGKA,AJPP,CAAP,EIOiB,ELvBE,COKjB,CPLmB,CKuBC8P,AElBA,CAACpT,EPRD,IK0BpB,AElBoB,EAASoE,GAAT,KAAiB;ALcrC,AFlBF5G,AKuBE,AEnBuC,ANY1C,AGJG,EJZFA,ACkBF,MIKQoW,ADXA7D,GJZG,AOIqCqL,EPJnC,GKuBT,CL3BoB,CK2BNlU,AEnByB,CAAaiL,CHQpC,IAAI,CCWpB,GEnBuC,CAAuBnS,EHQnC+P,IGRY,EAA+B3L,GAA/B,GHQA,CAAC6L,KAApB,KAA8B,UAAlD,EACEhS,OAAO,GAAG8R,YAAV,EAAwBA,YAAY,GAAG,IAAvC;AFMF,AFlBFtS,AOG+E,AHU7EQ,EJbFR,EIaEQ,CGVA,GPHI,EAAE,CIaC,GJlBa,AIkBVA,OAAO,IAAI,EAArB;AFMA,AFlBFP,AGqB4B,AEC1B,ACZFqZ,ACPE,AHUA,EJbFrZ,AMUAqZ,MJQMnR,AIRA,CHWC4D,AECA,ACZAwN,AFGA9G,CJbC,COGC,CPHC,CEkBC,EGIE2D,ACZP,ACPJ,AHUA,CJnBoB,CMgBP,CFGC5V,KCSd,EHJqBwH,AELA,CAAC0K,CCSCwD,EHJvB,CCG0B,CDFxB,AENF,CARiC,CDgBJ,AEC7B,ADPA,ECQE,GHJO,EGIF,GHJOjO,EAAL,CGIIoO,IHJQlO,KAAK,CAACF,AGIzB,EHJA,CAJU,CAKZ,AGG4BkO,QAAQ,GAAGD,MAAM,CAACE,QAAD,CAAN,CAAiBD,QAAtD,EACE,KAAK,MAAMG,YAAX,IAA4B7M,OAAO,GAAG0M,QAAQ,CAACE,UAAD,CAA9C,EACEJ,IAAI,IAAIlP,MAAM,CAACwP,IAAP,CAAY9M,OAAO,CAAC6M,YAAD,CAAnB,EAAmC7T,MAA3C;ALxBRvC,AGqBEqK,AGXAgP,ACPD,ANaI,EDhBLrZ,EGqBEqK,AGXAgP,KLMY1S,CDhBN,AMUA,CAAChB,CNVC,CMUR,CAAU,ENjBU,CCuBjB,CAAkBiB,CEKN,CGXf,EHWkB,AGXC+L,CHWnB,IGXwB,IAAI,ELMzB,EAAmCjM,OAAnC,EAA4C;ACI/C,AFnBFzG,AGqBC,AEGC,ACf8B,ALOhC,AGFE,EJdFA,CGjB4B,CAwC5B,ICTM,CAACmS,EFKE,AGKA,ACf4BE,CJU3B,CAACrK,AFnBA,EAAE,CKwBCuN,ACfkB,CAAW7C,CJUlC,CF3Ba,EKgCb,ADVP,CFKkB,AIVY,CFKX,CCUCoD,GHLG9P,CGKvB,OHLkB,KAAkBgC,KAAK,CAAChC,QAAnC,IACW,KAAK7D,KAAL,KAAkB6F,KAAK,CAAC7F,KAD1C;AAED,AFpBDlC,AGwBA,AEAC,AChBmD,AC7BA,ANqCpD,AGFI,EJdJA,CECgB,AGrBW,CH0C3B,AGIA,CClBE,GLQIyG,EGFE8L,EJdE,EAAE,ECgBE,AGFA,GHEG5L,AGFA,EAAb,IHEmB,CAACC,MAAP,CAAc,IAAd,CAAjB;ADzBsB,AKqCtB,ACnBEuS,AFME,CJxBN,GMkBIA,MAAM,CAAC1T,AFMA+M,EENP,CAAU,KAAV,EAAmB,GFMjB,GEN4B,AFMP;AJb3B,AK2BE,ACpBkC,ALQlC,AGDMJ,MJdFnS,CCeC,CGDCmS,GEPiCQ,ELQ5BzQ,AGDA,CEPuB,AFOtBsQ,KJdK,ACejB,AGDW,EAAQC,CJdC,CCeChM,IDfvB,EAEA,AIYa,EAAkBiM,IAAlB,EAAwB,CHCnC,EACE9L,aAAa,CAAC1E,MAAD,EAASuE,eAAe,CAACvE,MAAD,CAAxB,CAAb,CAJ+C,CAKjD;ACIA6F,ACEAsC,AGhB+C,AFOViI,EFOrCvK,ACEAsC,GGhBE,GJcI,ECEE,ACT6BiI,CFO5B,ACEAhI,KCTkC,EDSnC,EAAU,ACT6BkI,KAAV;AFQnC,AFnBW,AGqBX,AGhBA0G,AFMoDxG,IENpDwG,ENLiBjZ,EGqBb,CAACqK,CGhBC,AFM8CoI,CFQ7C,AIdAlN,ENLI,AMKX,CNLyB,AMKf,AFM8C,EDUxD,EAAc,ACV8CkN,GEN5D,CFMgE,CEN7CxN,CFMiC,IEN5B,IAAI;AJe1BY,AFnBJ5F,AGqBI,AEGJiW,ACpBgC,ALUhC5P,AGJuE,EJVvErG,AKwBAiW,AJVA5P,ICKIT,GDLG,AGLkB,EDYhB6F,AGjB4BoR,CLU3BxW,CDdC,AKwBA,CHLC,AFnBApG,AKwBAiW,CCpBoB,CJelB,ACEV,AGjBsC,GHiBzB,AFPA,CIUN,CHLQtQ,AFnBR,AGqBP,CEGgBuQ,CLxBC,AMIW,ALUXxP,EKV8B3B,CDoBxC,EAAeoR,CHNjB,CIduB,EDoBrB,EAAqBC,IAArB,EAA2B,KJVtC,CANiD,CAQjD;ACIItU,AFnBF,AGqBE,AEGF,ACrB0D,ALa5D,KKbE,CJgBEA,KAAK,ACEA2J,EDFK,KAAK3J,ECEf,GAAiB,EAAjB;ADJK,AFhBP,AGqBC,AEGD,ACrBA,AFMI0Q,KFOJ,ACEA,GCTIA,ECeE6D,CFFD,AGnBE,AFMA,EAAE9D,EENT,CDqBY,CDfC,ECeE0D,EDfE,ICeI,CAACC,IAAD,CAAN,KAAiBD,MAAM,CAACC,IAAD,CAAN,GAAe,EAAhC,CAAf;AHJD,AFnBC,AGsBE,AEEF,ACrBD,ALYD,AGPqB3D,SJRdnT,CKwBCkX,ADhBa/D,CHOZ9L,EDfP,CIQuB,EJRX,AKwBA,EDhBe8L,CCgBZ8D,GDhBgB,CAAC,CHOlC,CISuB,AJTAtU,CISCoU,CDhBS,EAAOhE,CCgBjB,CAAN,AJTjB,EAA+BhM,EGPE,CCgBCkQ,AJTlC,AGPqB,EHOe,IISI,CAACF,IAAD,CAAN,GLxBhC,AKwB+C,CL3B5B,CAG8B,AKwBlC,CAAf,CAHoC,CAIpC;AFFE,AFPF,AGRgD,YDexCzK,WAAW,GAAGvB,OAAO,CAACjG,OAAR,CAAgB,GAAhB,CAApB;AD/BY,AFSd,AGuBE,AEEF,ACxDkD,AL+ClD,AGXuB,EFiB3B,KEjBM,CHWE,CDhBC7E,CGuBCqM,AEEA6K,KJTKpQ,EISE,CJTT,GEOa,AEEDiQ,CLzBhB,CCgBmB,EDhBE,AGuBA,AEED,CFFlB,EACEjM,CECoBmM,EJTxB,EAA6B,EEQlB,AECE,CAAb,EFDcnM,OAAO,CAACnI,MAAR,CAAe,CAAf,EAAkB0J,UHxBhC,CAJmB,AG4BL,CHxBkD,AGwB5D,CAJC,CAKH;AECF,AJTE,AGRA,QCiBE,CAAC6K,EDjBE9D,KCiBP,EACE6D,GDlBA,GCkBM,ADlBY,CCkBXF,GDlBP,CCkBM,CAAN,GAAe,IAAf;AL1BF,AGyBE,AEEF,AJVE,AGRD,KAPD,IJFK9W,EGyBEkM,AEEA,ADjBF,CCiBG+K,AJVA5P,IEQN,CFRW,EEQEwD,AEEf,CJVgB5D,MEQd,AFRoB,CAACC,CDjBvB,GAA2B,ECiBX,CAAc,IAAd,CAAd,kBDjBF,CALmB,CAKoC;AG0BrD,AEEH,ADjBG,GC1CuB,CA6D3B,OFJSiF,ACfA2G,SDeL,GAAmBjI,CCfnB,GAAqB2H,GDeK,CAAC5N,OAAR,CAAgB,ACfnC,GDemB,IAAuB,CAAvB,GAA2BiG,OAA3B,GACAA,OAAO,CAAChH,OAAR,CAAgB,mBAAhB,EAAqC,EAArC,CADnB;AHzBF,AG2BEgH,AFVA9D,AGNA,MDgBA8D,AFVA9D,GDjBGpG,EIWEwS,EDgBE,CFVC,CAAC1Q,CEUCoI,KFVF,AGNR,CHMA,CEUiB,CAAC/H,AChBApC,CHMC4G,IEUT,CAAc,AFVA,CGNC,CJX3B,AIW4B4L,EHME,CDjBC,AIWX,KAAgB5N,SAAhB,GAA4B,IAA5B,GAAmC,CAAC,CJXxD,AIWyD5E,OAAO,CAACwS,GAA/D,EDgBU,CAAV;ADNC,AFpBH,AG2BE,AFVE,AGNH,KAtBgC,CF+BxB3K,AEPT,GJbKtI,EG2BEoM,IDPJ,ADHQhF,GDjBX,EG2BE,AFVc,CDjBC,ACiBAC,EEUIuD,CDPM3C,EDHX,CAAL,CCGR,CAA6B,CCOJ,CAAC,CAAD,AFVAb,CEU1B,IFV+B,CAACC,KAAD,CAAL,GAAeR,OAAO,CAACS,SDjBnD,ACiB2C,CAAkBV,GAAG,GAAGS,KAAxB,CAAhC,CAAP;ACIN,AFpBE,AG2BE,AECJ4P,AJXK,EIWLA,KJbI,EDfGtW,EG2BE0L,KH3BP,EK4Bc,CL5BC,AK4BAqK,GFDb,GAAmB9L,AECP,EAAS+L,IAAT,CFDc,CAAC,AECAC,CFDD,CAA1B,EECY,EAAqBC,IAArB,EAA2B,kWL5BzC;AEqBU,AFpBV,AG2BC,AECD,AJXC,KAND,CCSEzQ,GFpBGxF,ECkBA,GCEK,CDFD,ECEI,ADFF4B,CDlBX,GAAiB,ECkBA,IAAIsE,QAAZ,CAAJ,EAA2B,miCDlBhC;AEqBA,AFpBA,AG2BD,AECC,AJVE,AGPF,GD7C0B,CA+D5B,KH7BOjG,AIWAiJ,CCiBCgN,CHRC,CDFC,IIUI,AJVA3R,CGPZ,CJXA,CK4BeuR,CDjBC,CJXC,ACkBT,CCER,ADFmB,EGPnB,CCiBqB,CAACC,IAAD,CAArB,UJVqCnU,MAAO,EAApC,CAAN,kXDlBF;AEqBD,AFpBC,AG6BF,AEFE,AJTC,SDlBIvC,CK2BwB8W,KL3B7B,CK2BmC,EL3BrB,CK2BwBD,MAAM,CAACF,IAAD,CAA5C,iZL3BA;AACA,AK2BA,ADjBA,QAAI,CJVC9V,AIUC,ECiBCiW,KL3BP,CK2Ba,CAACF,CL3BC,GK2BF,CAAb,ADjBK,CCcoC,ADdnBlU,CCmBtB,GDnBK,CAAsBlC,OAAO,CAACqK,MAA9B,CAAL,EAA4C,sDJV5C;AEegC,AFdhC,ACiBA,AGPE,EFWN,OFrBS/J,ECiBE+F,AGPA3F,MJVP,ECiBe,CDjBC,ACiBAqB,AGPd,GAAiB,GHOJ,CAAf,CGPE,mCJVF;AACA,AG2BF8J,AECE,AJXD,AGPG,EDiBJA,OH3BOtL,AK4BA,EDlBEiJ,GDiBG,CAACrL,AECA0C,EL5BX,AIUE,CCkBF,CFDU,CH3BM,AIUAiG,CDiBCZ,CECCoQ,IFDR,EAAcrN,AECxB,EAA0B,EDlBxB,GDiBQ,EAAuBC,KH3BjC,IG2BU,EAAkCC,MAAlC,EAA0C;AH1BpD,AG2BA,ACjBE,SJVG3I,CG2BCsL,CCjBC4G,KDiBK,GAAG,ACjBb,GAAgB1S,CJVlB,CG2BoBY,EH3BE,GIUG,CAACuJ,CDiB1B,MCjBE,wBJVF;AACA,AK2BA,AJXF,AGNI,SJVG1J,ACgBAgG,EIWE4P,ADjBA1D,MCiBM,CAACwD,IAAD,AJXf,AGNI,CCiBF,EL3BA,AIUqB5P,GJVG,GIUG,CAACC,MAAP,CAAc,IAAd,CAAnB,WJVF;AACA,AG0BA,AFVH,AGNKxG,MAAAA,GJVGP,AG0BAwK,IChBI,CAAC5D,GJVV,GAAgB,EG0BhB,AChBE,CDgBiBnB,GChBG,CDgBtB,CAAwB,GChBG0N,WAAL,CAAiB5S,OAAO,CAACqG,QAAzB,CAApB,GJVF;AEkBG,AFjBH,AG0BE4C,AEAF,ADhBC,KAND,CFaSnB,ACSPmB,GH1BGvJ,AK0BA,EDfA,EFMF,ACSM,EAAEuJ,AEAApI,EL1BX,CK0BA,EL1BgB,EEiBS2G,ACQD,AECN6O,IHTf,CAA2B,CGS9B,EAA0B,GL1B1B;AEkBF,AFjBE,AGyBoBnN,ACdlB,MDckBA,GHzBfvJ,EIWEe,IDcsB,EAAEwI,GHzB/B,AIWE,GJXiB,AIWA,GDaK,CCbtB,KJXF;AEkBU,AFjBV,AGwB0CC,AEC1C,ADdE,MFMAxD,ACOwCwD,GHxBrCvJ,EKyBEqW,ADdApD,CDayC,EDPtC,ACOwC1J,GDPrC,AGQA,CAAC+M,CLzBd,CGuBwB,CCZtB,CJXgB,AKyBL,CAAb,CDdoB,KAAKpD,WJXzB,GIWE;AFOF,AFjBA9S,AGwBEkG,AECH,ADdE,GC1DwB,CL+CzBlG,AK2BF,EFHIkG,KDPK,AFjBA,AGwBA,EAAEA,CHxBClG,IGsBc,EDLxB,CFjBiB,IAAI,EAArB,CArBmB,CAuBnB;AEgBD,ACMiB7B,AEIlB,ADhBC,GFE+B,AExCJ,CF8C5B,AENA,EDUkBA,IAAI,EAAEA,IAFE;AHnBxB,AGsBE4N,AEIJ,ADbA,MDSIA,EHtBE,KAAKrL,AGsBA,EAAEoL,MAAM,CHtBb,EGsBgB,CHtBC,CAAC,CAAC9L,EGsBEgM,KHtBK,CAACrL,QAA/B,EAAyC,CGsBxB,GAA4B,KAHrB;AHlBtB,AGsBAsL,AEIJ,MFJIA,KHtBKrL,MGsBM,CHtBX,CGsBakL,EHtBE,IGsBI,CHtBnB,CADuC,CAEvC,AGqBsB,KAAKI,SAAL,CAAezC,CAAlB,GAAsB,EAJnB;ADDjB,ACML0C,AEIJ,MHVIrK,ACMAqK,KDNK,GAAG,ECME,EAAEL,MAAM,GAAG,KAAKM,WAAR,GAAsB;ADL1C,AFhBE,AGgBsB,AEU1B,ADfmB,KDKjB,CCLE2G,CDGkD,CASpD,GDPO,AFhBA,KEgBKtL,CFhBC5G,CEgBN,CAAQwD,CFhBb,CIWe,GJXG,AIWA,IFKb,AFhBL,CEgBuB,CAAlB,AFhBmB,EEgBE,KAAKoD,EAAL,CAAQM,WAAR,CAAoB,GAApB,CAArB,CAAP;AACD,AFhBK,AK0BN,ADfE,GFJ8B,CAWhC,OEPSjB,CJXC,EAAEjG,GAAG,IAAI1B,EIWE,CAACuI,MAAb,CAAoB,KJXnB,AIWwB8B,KJXK,CIW9B,CAAP,GJX0C3I,GAAL,aAAqBC,MAAtD,EACE,KAAKD,GAAL,IAAYhB,aAAZ;AACH,AKyBL,ADfC,GA7C2B,CA+C5B;AJXG,AGoBD,AEKF,KLhCE,CAQA,EGmBIiM,MAAJ,EAAY;ADJF,AFvBV,AG4BE,AEKJ,MHVI9D,GFdG,KEcK,GAAG;AACb,AFdE,AGmBA,ACVJgL,EAAAA,MAAM,CAAC/U,EDUE+N,EHnBApL,EISH,EAASQ,GJTX,GAAepB,EISb,EAAmB,CDUrB,EHnBsB,CAACe,AGmBE,EHnBV,GGmBf,CAFU,CHjBoB,AGoB9B,KHpBA;AEeF,AFdC,AGoBC,ACXF,OJ5CmB,CAoCnB,CIQKqR,CFKC3K,EAAE,GAAG,KAAKA,EAAhB,AELA,CAAmBuK,KAAnB,CAAyB/T,MAAzB,EAAiC,MAAjC,EAAyCmD,QAAzC;AFMA,AGQFqV,ADbC,ECaDA,CD/D4B,CAoD5B,IFGMxO,KAAK,CGQC,CAACgO,CHRCxO,EAAE,CAACM,EGQL,EAASmO,IAAT,EAAeC,CHRb,CAAe,EGQjB,CHRE,CGQmBC,GHRG,CAAlC,AGQU,CHXG,CAIb,AGOqCM,KAA3B,EAAkCC,KAAlC,EAAyCC,KAAzC,EAAgD1Q,KAAhD,EAAuD9E,QAAvD,EAAiEyV,KAAjE,EAAwE;AFFhF,AEGF,QAAIC,GFHG5K,AEGP,EAASmK,MAAT,CFHE,CAAe5M,AEGA6M,CFHf,GAAoB,EEGtB,CADkF,CAElF,CFJ2B9M,MAAL,GAAe,GAAE,KAAKA,MAAL,CAAY/B,EAAZ,CAAezF,MAAf,CAAsB,CAAtB,CAAyB,GAA1C,GAA+C,GAAnE,CALU,CAMV;ADLF,AFfA,SAAKhB,EEeEiH,KAAK,EFfZ,CEeeR,EAAE,AFfA,CEeCxF,AFfA,CAACjC,KEeZ,EFfmB,CAACiB,CEeCwG,EAAE,CAACQ,IFf/B,CEeoC,AFpDjB,CAsCnB,CEc8B,CAAF,KAAgB,GAArC,GAA2CR,EAAE,CAACzF,MAAH,CAAUiG,KAAV,EAAiBC,WAAjB,EAA3C,GAA4E,EAAnF;AACD,ACKG,AEGF,ADbF2K,EAAAA,CFbgC,CAoBhC,MGMQkE,CFHC3K,CCVC,CAACnD,KCaK,EDbN,CCaS,CFHf,AEGgBiN,ADbAhN,GDUG3C,CEGJ,GAAQ,CAAC4P,CFHC,ACVnB,CDUoB3P,CCVC2C,CCaZ,GAAgB,CFHZ,AEGaiN,CFHC,ACV3B,EAA6BlQ,CCarC,EFHwCkG,ECVhC,EAAoCmG,IAApC,EAA0C,CDU7B,CAAnB;AHnBF,AGoBC,AEED,ADZA,QAAI,CJVCrR,CKuBD8V,UAAU,GAAGD,ILvBjB,GAA0B,CAA1B,AKuByB,GAAG,CAAX,GAAexQ,MAAM,CAACwP,IAAP,CAAY,KAAKV,IAAjB,CAAf,GAAwC,KAAKC,SAD9D,CAHkF,CAMlF;ALxBD,AGoBA,ACVG,GJnDuB,AGvBC,CHkE5B,AGoBA;ADNY,AFZZ,AGmBA,AEEE,ADdE,MFKAnN,EGSE+N,EDdE,CAAChQ,CCcP,EHTU,AGSA,CAAC4Q,CDdC,CFKC,AELApP,CCcC,GAAGuO,EDdV,CAAa,GCcT,EAAcA,ADdAzM,MCcM,ADdxB,CAAL,ECcgC,ADdA,ECcxB,EAA4B0M,IAA5B,IAAoCY,GAAG,CAACZ,IAAD,CAAvC;AHRV,AELI,WFKG,IAAIrO,SAAJ,CAAc,KAAKO,cAAnB,CAAP;AACD,AGQC,ADbI,GFlB0B,CAyBhC,KGMO,IDbI4K,ECaEiE,IDbP,CAAY,CCahB,ADbiB,ICaIhB,CDbC5M,KCatB,EAA6B,CDbZ,KAAkB,IAAlB,GAAyB,EAAzB,GAA+B,KAAK0J,eAAL,GAAuB,KAAvB,GAA+B,OAA/D,KACCjM,YAAY,CAACY,MAAb,CAAoBxB,KAApB,IAA6B,EAA7B,GAAmC,GAAE,KAAK+M,iBAAL,CAAuB/M,KAAvB,CAA8B,MADpE,CAAZ;AJRN/E,AGmBAkL,AEGI,AGnGN,ER6EElL,AGmBAkL,UEGU6K,ILtBI,CAAC9V,AGmBA,EEGE,CFHC,EEGE4V,GLtBN,EAAW3V,KKsBK,CAAC4V,MAAD,CLtBhB,AKsBV,ELtBoC;AACtC,AGmBA,ACVI,UDUEtS,GCVG6E,IDUI,ECVT,CDUY,ECVEtD,GDUG+D,ECVjB,WDUY,CAAmBqC,GAAnB,EAAhB;ADJgB,AFdhB,AGkBA,AEIE,ADbE,AIvFR,MN4FMlE,EFdE9G,EGkBsCwK,AEIpCuK,GLtBG,AISAhN,GJTG,AGkBoC,AEIpC,GFJuC,AEIpC4M,CHRC,CFdC1U,AISb,EFKe,CCIqCX,ACTpC,CCaC,CAACqW,CLtBtB,CISI,GDSJ,CEIqB,CAAnB,EAA6B;AHP/B,AFdA,AKsBI,ADbD,OARC,CASF,EJVIzV,cAAc,GAAG,KAAKR,SAA5B;AEeA,ACGA,AEKI,AGrGR,SLgGSqI,CDHC5B,EAAE,AGQA0O,GHRG,CGQP,CFLJ,CEKc,CAACW,CHRCrP,ACGE9C,EDHlB,AGQkB,GAAG0R,EFLI,CAACpN,GEKX,EAAcoN,EFL7B,IEKmC,GAAG,EAAxB,EAA4BF,IAA5B,IAAoCW,GAAG,CAACX,IAAD,CAAvC;AHRd,AFdA,AGkBA,SAAK7M,CDJejB,CFdb,IEckB,AFdzB,EAAa,CEceZ,CCI5B,CDJ8B,CAACM,CCIbpD,OAAO,CAACuE,EDJE,CAAe,GAAf,GCI5B,CDJkD,CAAlD;AACA,AFdE,AGkBF,AEII,ADbF,AIxFN,SLiGSK,CDJCjB,AELAW,GCaG,CHRC,ECIV,CDJaZ,AELA,CAACX,CDSI/C,AEIHwS,GHRG,EELZ,CFKe1P,AGQjB,ADbiB,CDSI,CDJF,ACIG0B,CDJFlH,CGQCoU,CDbChN,GDS1B,CDJa,CGQT,EHR6B5B,AGQA,CDb3B,CFK6B,AELjC,CFKkCY,CELC,IFKF,CAAtB,GAAgC,EAA7C,CAHmB,CAInB;AFdE,AGkBF,AEIM,ADbF,SDSCmB,CHlBC/H,KGkBN,CEIY2V,EFJMzS,KEIC,ELtBjB,AGkBuB,CAACuB,AEIJ8Q,CLtBCtV,IGkBvB,CALgB,CAMhB,CHnBE,EKsB8B,CAACyV,MAAD,CAA1B;AHPN,AELI,AIzFR,WN8FW7O,CELCY,GFKG,KAAK,CELC,CAACxB,CFKX,GAAeD,EAAE,AELhB,CFKiBzF,AELA,KAAKsH,CFKR,CAAUjB,KAAK,GAAG,AELhC,CFKc,AELlB,CFKG,CEJD,EFKC,GELI2K,MAAL,CAAa,KAAI,KAAKE,aAAL,CAAmB/J,MAAnB,CAA2B,EAA5C,EAA+CoJ,IAA/C,EADF,CAEA;AFKIjK,AFhBN,AGmBF,AEIM,ADdF,IFOIA,IAAI,ACGRwD,KDHa,AFhBRrK,AIaH,CDMN,AEIU6U,EHPF,ACGI,ECNDtD,CFGYpV,CGOP,EHPU,CAACK,AGORoY,CDVb,CAAa,GJbK,CEgBhB,AGOiB,CAACc,CLvBC,CEgBSjZ,GAAG,AEFrB,CFEsBK,AFhBRkB,AKuBP,CAAnB,EAA6B,CDTZ0T,IJdI,CAAcxR,CEczC,GFd2B,CAAmBL,KAAnB,CAAzB,AIcgB,CAAsB,CJdc,IIcTgI,UAAL,GAAkBJ,SAAxC,CAAmD,IACnD,KAAKgK,aAAL,CAAmB/J,MAAnB,CAA2B,EAFvC,EAE0CoJ,IAF1C;AFIP,AFhBK,AGmBF,AEIM,ADRL,AI/FP,GN8DkC,CAoChC,GEZI,CAUA,GDGKvG,iBAAL,GAAyBrH,OAAO,CAACoH,OAAjC;AHlBE,AGmBF,AEIM,ADlBN,WDcKG,ACFH,CJjBI1K,IIiBCwR,ECMKqE,EFJZ,CAAe5N,CAAf,ACFE,CAAa,CCMG,CFJC9E,CHnBC,AIiBH,CCMIyR,ADNH,IJjBO1U,AKuBA,CFJC,ACFH2H,CDEI4C,CEIEmK,ILvBG,AKuBC,EDNf,CJjBiB,CKuBEE,EFJrC,CCFoC,CJjBI5W,EKuBX,CDNX,ECM4B,CAAC0W,ADNJ,EJjBR,AIiBjB,CJjB+BzU,CKuBH,CAAjB,ADNmB,EJjBb,CAAmBF,AKuBC,EAA9B,ADNR,GCM4C8E,CDL/C,KCKqD,ADLhD6M,CCKiD2C,GLvBC,CAAC,AKuBT,CLvBQ,AKuBIO,CLvBtC,CAAf,CAAlB,EACElV,CKsByD,CAAvD,CAF2B,ADHnB,CCMR,ADN4B,IJjBtB,CAAC,AIiB0BiI,IJjB3B,EAAO,EIiBe,GAAgBJ,OAApC,CAA6C,IAC7C,KAAKkK,gBAAL,CAAsB,KAAK7J,UAAL,GAAkBJ,SAAxC,CAAmD,IACnD,KAAKgK,aAAL,CAAmB/J,MAAnB,CAA2B,EAHvC,EAG0CoJ,IAH1C;AJhBmB3Q,AGmBrB,ACCD,AIrGL,KJ2EI,CA2BA,IJrBuBA,CGmBhBwK,ECEArH,CJrBoB,EAAE,EIqB7B,EAAc,CJrBoBlD,CGmBhC,GAAmB8C,CHnBA,MGmBO,CAACwH,UAA3B;ADFJzE,AFjB2CvJ,AGoBxC,AEIO,ADHQoU,EFJlB7K,IEIkB6K,EFJZ,CAAC5K,CFjBoCxJ,AIqBrB,IFJhB,AFjByC,AIqBrBoU,EFJZ,AFjBmC,CKwBlC,CDHe,CAACxN,ECGZuS,CAAC,EDHU,CJrBP,AKwBA,ADHL,CCGR,EAAgBA,CAAC,GAAGD,MAAM,CAACpV,MAA3B,EAAmCqV,CAAC,EAApC,EAAwC;AHNhD,AFlB0DxV,AGqB3D,AEIW,ADJ4B,GDpGZ,CAsG5B,MHvB4DA,KAAK,EAAEJ,GKyBjD6V,ILzBwD,CAAC,AKyBpD,CLzBmD,CAAnD,CKyBG;AHNxB,AFnB6ExV,AKyBnDkH,ADH3B,GAlF2B,CAoF5B,MJxB+ElH,MAAM,AKyBzDkH,ELzB2D,KKyBpD,EAAE,IAAX;AHLxB,AFpBqB,AKyBoBC,AGxG7C,QNmGQvB,CFpBU,CAAR,CAHgD,CAIlD,CEmBK,GGKgCuB,SHLpBpB,AGK6B,EAAE,IAA5B,CHLxB,EACE,OAAO,KAAKL,EAAL,KAAYE,KAAK,CAACF,EAAzB,CAJU,CAKZ;ACEF8E,AEC4DpD,EFD5DoD,cEC4DpD,GFD3C,CAACvG,EECgD,EAAE,CFDnD,EAAQ;ADDvB,AFrBItB,AGuBJ,AEAwB,ADA1BwR,EAAAA,MJvBMxR,GEqBG,CAAC,ACEAsB,CDFC+E,AFrBA,EKuBC,CLvBErG,AIuBA,CDAC,ACAA2H,CFFN,ACEO9K,GHvBG,CEqBC,AFrBA6D,AGuBlB,CDFmB,CAAC2F,AEER,EAAUuB,EJvBV,CEqBa,AFrBAzH,CEqBC0G,KEEd,EAAqBgB,CFF1B,IACW,CECN,CJvB4B,CAAC,AIuBAjD,CJvBD,CEsBjBP,AFtBE,CAAmB1D,EIuBhC,EAAoCsQ,EJvBpC,CEsBM,CFtBkCjR,AIuBxC,EAA0C,EFDlBqG,CFtBqB,CAAC1F,GEsBjB,CAAC0D,EFtB9B,CAAR,KEqBG,IAEW,KAAK7D,KAAL,KAAkB6F,KAAK,CAAC7F,KAFnC,IAGW,KAAKkG,QAAL,KAAkBL,KAAK,CAACK,QAHnC,IAIW,KAAKG,QAAL,CAAcrG,KAAd,KAAwB6F,KAAK,CAACQ,QAAN,CAAerG,KAJzD;AAKD,AFzBK,AGuBJ,AEAUyV,ADAV,aJvBS1V,CKuBC0V,ILvBN,CKuBW,CAACb,KAAD,CAAL,GAAe,+BAAWQ,OAAX,EAAoB,KAAK1B,QAAzB,CAAf;ALtBP,AGuBH,AEAU+B,ADAV,OJjCa,CAWX,GGsBG,ACAE,GCAGA,EFAV,ACAYlE,GCAG,CAACsD,KAAD,CAAL,EDAV,CCAyB,+BAAWS,OAAX,EAAoB,KAAK5B,QAAzB,CAAf;AHGZ5N,ACFI,AEAQ2P,EHEZ3P,MAAM,GAAG,CCFD,EEAI2P,GFAC/N,EEAI,CAACoN,GFAV,EEAS,CAAL,EFAY,CEAG,GFAvB,EACE,OAAO,KAAKpK,MAAL,CAAY,OEDawK,SFCzB,CEDmC,CFCLpU,AEDMyU,KFCpC,CAAP,AEDiD,CAACC,CAAD,CAAP,CAArB,EAAkC,KAAK9B,QAAvC,CAAf;AHGV,ACDE,ACFF,SAAKxC,EFGE,ICDE,ACFT,CAAY,IDEE9G,CCFGoH,QDER,CAAe7J,CAAtB,ECFU,CAAkBR,OAAlB,EAA2BC,SAA3B,EAAsCC,MAAtC,EAA8CjD,KAA9C,CAAZ,EAAkEqM,IAAlE;AFIE5M,AF1BA,AGyBA,AEFQ,ADAX,GAzF2B,CA2F5B,EFCIA,IF1BI,CAAClE,GE0BG,CCDD,CDCG,ICDEgL,AEFExG,CHGCN,GGHG,ELvBd,CKuBiB,EHEhB,ACAE,CAAe,CHzBGlE,CKuBC+T,EFEnB,EAAqB,IAArB,AEFc,CAAcvP,CFED,GEFb,CLvBmB,AKwB9BsR,CFC6BrL,EHzBI,EKwB5B,CAACjD,ELxBgCtJ,EGyBzC,CAAP,EEFqB,EACI4X,ILxBkB,CAAiB5V,AKwB9B,CAACuH,GLxBY,CAAsB5H,KAAtB,AKuBtB,CLvBjB,CAAJ,AKwB0CiW,ELvBxCjW,GKuB6C,CAAC6H,CLvBzC,GAAG7H,EKsBW,EACmC,CLvBzC,CAACU,MAAN,CAAaP,eAAe,CAAC,CAAD,CAAf,CAAmBQ,GKuByBiE,GLvBzD,EAAwC5E,AKuBM,EAAkB,GLvBnB,CAACW,CKuBuBuT,KLvBrE,CAAR,CAbS,CAeX,AKqBwD,CADnC,CAAb;AHIR1T,ACDF,MDCEA,KAAK,EAAK,KAAKA,KAFV;AAGLkG,AFxBA,AKqBQ,MHGRA,IFxBI,IEwBI,CFxBCpI,CEwBC,EGHEiX,GHGG7O,EGHP,ELrBJ,AKsBM6O,CLtBU3U,GEqBf,CFrBD,AKsBW,CLtBUZ,AKsBT4D,IAAN,CLtBN,AKsBiBe,CLtBrB,EAAiC,CKsBvB,EADF,KAEK,IAAI7E,QAAQ,CAAC6E,IAAD,CAAZ,EACH,OAAO,IAAP;AHCVkC,AFxBE,AGsBJ,AEES,ADHXmL,EAAAA,IFGInL,KCFG,GDEK,AEHA,CAACc,CFGC,GCFZ,GCDU,EAAUC,SAAV,EAAqBC,MAArB,EAA6BjD,KAA7B,EAAoC;AFGhCP,AFvBV,AGsBF,AEEK,ADHP,QFEcA,GEFL,CJrBDtE,CGsBDqL,CCDI,EFEW,EAAE,CEFR0G,MJrBZ,AGsBF,EHtBqB,CGsBD,CDCV,GCDV,CCDS,CAAoBnK,OAApB,CAA6B,IAChC,KAAKgK,iBAAL,CAAuB/J,SAAvB,CAAkC,IAClC,KAAKgK,aAAL,CAAmB/J,MAAnB,CACC,GAAEjD,KAAK,IAAIA,KAAK,CAACpE,KAAf,GAAwB,IAAG,KAAKmR,iBAAL,CAAuB/M,KAAvB,CAA8B,MAAzD,GAAiE,MAAO,EAHnF;AFEqCpE,AFtB/B,AKwBD,ADAN,GAjG2B,CAmG5B,IFJuCA,KAAK,EAAE,KAAKsG;AAArC,AFrBN,AGqBN,AEGG,WFHE,GHrBK5G,MGqBV,QHrBwB,KAAKE,OAAO,GAAG,KAAKhC,QAAL,CAAciC,IAAd,CAAmBL,KAAnB,CAAf,CAAlB,EACEF,QAAQ,CAAC,IAAD,EAAO;AEgBhB,AFhBkBQ,AGqBvB,AEGD,KHRD,OFhByBA,GGqBhB,CHrBoB,EAAE,EGqBjB+K,GHrBsB9K,KAAb,GGqBrB;ADCH,AFtB4C1D,AGsB3C,ACGFoV,EAAAA,UJzB6CpV,GIyBhC,CJzBoC,AIyBnCkT,EJzBqC,GIyBtC,EAAQ,IJzBI;AAAqCvP,AKyB5D,ADCA,WCDO+U,ADCAxF,CJ1BqDvP,IKyB5D,ADCY,CJ1BqD,AI0BpD0R,EJ1BsD9R,CI0B5D,CAAUuD,CAAC,IJ1BwD,AI0BpD,CJ1BqD,CAAD,CAAnD;AEnCO,AFmCiDlD,AGuB/E,AEGD,ADCG,EFFN,CGzH6B,CA4H3B,OFLO,CHvB0EA,CI2BtE,IDJT,CHvBqF,AI2BvEuR,EJ3ByE,UI2B9E,CAAkBrO,CAAC,CAACgE,OAApB,EAA6BhE,CAAC,CAACiE,SAA/B,EAA0CjE,CAAC,CAACkE,MAA5C,EAAoDlE,CAAC,CAACiB,KAAtD,CAAP;AJ3BqB,AGwBrB,ACID,KAFM,EAEJuN,IJ5Ba,AI0BT,CJ1BC,AI4BA,CDJD/G,CCEA,CAAP,UDFE,GAAoB,IAApB;AHvBItL,AI4BP,GAxG2B,CA0G5B,MJ9BQA,QAAQ,CAACE,KAAK,GAAG,IAAT,EAAe;AAAEM,AGwB/B,AEIF4V,EAAAA,KAAK,CAACvB,GFJC,CHxB0BrU,EK4B5B,EL5BgC,AK4BvBR,EL5ByB,AGwBrC,KHxB0CS,CK4BvC,EAAmB,EL5BO;AAAoB1D,AGyB/C,AEIF,SAAK,GL7B4CA,GGyBxC,AEIE+X,CL7B0C,EAAE,CK6BvD,CFJctJ,GHzBe,AK6BVqJ,MAAnB,EACE7U,CFLA,OEKQ,CAAC8U,IAAD,CAAR;AHLC,AFzB2DpU,AG0B9D,AEKD,ADADsR,EAAAA,CChI2B,CAkI3B,EHRW7K,MFzBqDzG,GEyB3D,CEMS,CJ/BuD,AI+BtDiO,EJ/BwD,EAAxC,EI+BjB,CFNevI,CEMN,GFNlB,CAA6B;AAClCzH,AF1B2EgC,AIgCzE,EFNFhC,SEMSgQ,CJhCkEhO,CE0BhE,CAACyG,GEMG,CFNJ,AF1BsE,AIgCjE7C,EFNE,AF1BiE,MIgC1E,KAAoB,MAApB,GACL,KAAK+N,WAAL,CAAiB3D,MAAjB,CADK,GACsB,KAAKkD,iBAAL,CAAuBlD,MAAvB,CAD7B;AFLA,AF3B6B,AG2B7B,ACOD,GA9G2B,CAgH5B,MFTS,CF3BO,AG2BT,CH3BC,EG2BN,CDAWvH,IAAK,EAAhB;AACD,AF3BM,AG2BH,AEMJiP,EAAAA,CHTkC,CAKlC,QCFQ,CEMG,CAACxB,GFNCrL,GEMF,EAASsL,IAAT,EAAe9U,QAAf,CFNP,CEMgC,CFND;AAC7B,AEMJ,QAAIiV,MAAJ,CFNS7M,CEMG2M,IAAZ,CFNI,GAAc,EAAd;AH3BA,AG4BA,ACONlD,EAAAA,aJnCa,AG4BF5J,ICOM,CJnCC9H,AImCAwO,GDPZ,GH5BO,AG4BS,ACOL,EAAS,CJnCCzO,CG4BrB,IH5BA;AE6BM,AF5BP,AG4BC,AEKJ,ADEA,MFPEqE,CFrDW,CA2BX,AK+BE0Q,MHLM,AGKA,GHLG,ACAF,AEKEJ,KFLGpJ,CEKG,CAACqJ,IAAD,CAAnB,EAA2B,GFLvB;ADCJ,ACAG,AEKD,ADEF,QAAInG,GFPG,AGKAoG,GDEG,CCFR,ADESxQ,ICFI0Q,GHLf,CEOI,ECFF,EACEjV,CDCoB,OCDZ,CAAC+U,GDCb,CCDY,CAAR,ADCiC;AFNtC,AGME,ADCC,GFf8B,CAUlC;AF7BI,AG2BF,AEOD,ADCG,GC1IuB,CA2I3B,MDDQ,CDRD,CH3BGvU,GImCGqQ,CJnCC,EG2BZ,CH3Be,EImCT,GJnCcpQ,CImCEkO,IJnCpB,EImC0B,CAACjO,KAAP,IAAgB,KAAKmQ,MAAzC,EACElC,MAAM,GAAG,KAAKrB,IAAL,CAAU,KAAKuD,MAAL,CAAYlC,MAAM,CAACjO,KAAnB,CAAV,CAAT;AJpCF,AG4BA,ACSA,YJrCyBK,AG4BrB,CCSG,IDTEyI,IH5ByB,AIqCnBmF,GJrCsBzO,GIqC9B,EJrCmC,CAAC,AIqCnByO,CJrCkB,CAA1C,IIqC8B,CDT9B,ACS+BtI,EDR7B,ACQK,GAA8B,IDR5B,CCQgCsI,IDR3BjD,ECQiC,CAAChL,KAAM,EAAtD,UDRE;ADCG,AF7BL,AG6BF,ACQC,MFRCA,IF7BI3D,CE6BC,GAAG,AF7BA,GAAG,EAAX;AE8BF,AF9BE,AKoCJuZ,EAAAA,QLpCmB5V,CE8BV,EGME,CAACmU,CLpCY,CE8BVxO,EAAL,AF9BkB,CE8BVzF,CF9Bb,AKoCO,EAASmU,GHNX,CAAe,AGMb,CHNF,CAAP,AGMwB/U,QAAf,EAAyB;AHLnC,AF/BG,AG8BF,AEOA,ADCA,QCDI8U,ADCA/P,EJtCyBpE,CIsCtB,CCDP,EAAUsU,ADCAtG,EJtCyB,GAAG,CKqCtC,ADCgB,CJtCd,AIsCejO,KAAjB,CARwB,CASxB;AJvCE,AG+BA,UH9BIM,KAAK,AG8BF,GH9BK,EG8BAyK,EH/BZ,UG+BO,CAAkBjK,KAAlB,CAAP;ADb8B,AFlB9B,AGEF,AEoCA,ADEA,QAAI,CCFCsT,CLrCe7T,GKqCpB,ADESqQ,ICFIuD,ILrCkB,AIuC3B,ECFJ,CLrCkC,CADhC,AKsCmB,ADEA9P,GAAG,CAACwN,UAAJ,CAAe,KAAKjB,QAApB,CAArB,EACEvM,GAAG,GAAGA,GAAG,CAACnE,MAAJ,CAAW,KAAK0Q,QAAL,CAAczQ,MAAzB,CAAN,CAXsB,CAYxB;AJ1CE,AGiCH,AEMGoU,GF7IwB,CAyI5B,EEIIA,ILtCmC/T,EKsC7B,GAAG2T,MAAM,CLtCgC,AKsC/BC,GLtCkC,CKsCnC,CAAf,GLvCA;AKwCA,ADGF,QAAIzE,ECHE4E,IDGI,CAACnU,CCHC,CAACiU,EDGT,CAAYhQ,CCHJ,CAAV,CDGE,CCFA/E,ADEJ,EACE+E,GAAG,GCHO,ADGJA,CCHK+P,EDGF,CAAC/S,CCHA,CAAR,KDGI,CAAYuO,SAAZ,EAAuBkC,iBAAvB,CAAN,CAdsB,CAexB;AJ3CE,AKwCD,cLxCSzR,SAAR;AEgCC,AF/BD,AGiCJ4K,AEOC,ADGC,EDVFA,CE5I2B,CAqJ3B,EHXWtE,IEYHoL,GJ3CC,AGiCE,CDFN,ACEOjR,EHjCR,GGiCO,EAAQoK,ACUA,EFZSxF,CEYN,GFZjB,CAA4B,CEYNuK,EDVhB,EAAoB,QCUT,CAAkBpQ,IAAlB,CAAuBwE,GAAvB,CAApB;AFXFpG,AF/BM,AGiCJ,EDFFA,MCEM+B,KDFK,ACET,CDFU0G,IAAD,EAAO;AAChB,AF/BI,AI0CJ,UFXO,CEWA,CAACqL,EFXErL,AF/BFlH,IE+BO,CF/BF,CE+Bb,AF/BcW,GI0CP,GJ1CC,AI0Ce,GJ1CA,CAAnB,AI0CsBkE,EJzCpB,CIyCwB,GAAvB,EJ1CH,CAEA,AIyCI,CAAC0N,WAAW,CAAC,CAAD,CAAZ,GAAkB1N,GAAlB,GAAwB,KAAKwM,WAAL,CAAiBkB,WAAW,CAAC,CAAD,CAA5B,IAAmCA,WAAW,CAAC,CAAD,CAD9E;AFVD,AFhCK,AGiCJ,AEQF8D,ADGC,ECHDA,CHZiC,AErHL,CF0H5B,AEYA,QDbU/U,EEQE,CLtCD,AKsCEqT,EFRE,CAAC9X,CH9BDmD,EKsCH,CFRV,CEQmB4U,CLtCD,CAAC,CAAD,CAAL,AKsCH,EAAeC,GLtCC,CKsChB,ELtCD,AKsCsB/U,ELtCA,MKsCrB,EAA+B;ALrCnC,AG8BN,AEQA,QAAIiV,MAAJ,EAAYC,GLtCD/T,GKsCX,EAAoB6T,IAApB,MLtCM,GAAuB,IAAvB,CADyB,CAEzB;AG8BN,WAAK,KAAL;ADAU,AF7BJ9U,AG8BN,AEOA,ADIFwS,EAAAA,IFZInO,EGQE,CAAC0Q,EFPA,GDDK,AF7BJ/U,CKqCK,CDIC,CFZC,AEYA+F,CCJC4O,CLrCH,CG8BX,EH9Bc3U,EKqCM,ADIR,CCJS4U,CDIC,CJzCH,CAAClU,CKqCA,CAAhB,ILrCU,CAAa,CAAb,AKqCkBsU,CLrC1B,KKqCgC,GAAGD,MAAM,CAACF,IAAD,CAA3C,CAAJ,EAAwD;AHPxD,ACCE,AEOA,ADIF,WFZO,AGQAC,GFPCjQ,CEON,EFPS,EEOImQ,CFPD,CDDd,ICCmBrJ,AEOjB,EACE7L,QAAQ,CFRE,AEQDgV,CFRkBxT,GEQnB,CAAR,CFRgC,CAACd,KAAvB,CAAZ;ADAH,AF9BO,AKuCL,ADGD,GFpB+B,CAUjC,IEUMA,KAAK,GAAGuF,EJ1CF/F,KAAK,AI0CI,CJ1CH,AI0CIQ,CJ1CL,CAAL,GI0CV,EJ1CuB,GAAjB,EAAsB;AACpBQ,AG8BN,AESH,ADGC,GC/JyB,CA8J3B,IDCMmP,IDZEtL,ECYI,CDZD,ACYEjE,CJ1CHI,GI0CJ,CDZU,ACYER,IDZd,CCYE,CDXA,ACWJ,EJ1CoB,AI2ClBA,GJ3CqB,EG+BZ,ACYJ,EJ3CC,CI2CEA,EDZM0K,GCYD,CAACrJ,EDZL,CAAY,ICYb,CAAcuO,QDZb,CCYD,CDZ4B9O,CCYHgR,IDZxB,CAAP,YCYM,CAAR,CAJoB,CAMtB;AJ5CQ,AG+BN9R,AEUJ,QFVIA,KAAK,GAAG,KAAKoL,UAAL,CAAgB/G,GAAhB,CAAR;ADAK,AF9BA,AG+BL,AEUJ,ADGE,MFdErE,EEcEuF,GFdG,GAAG,CEcC,CAACW,QAAZ,EACE,OAAQ,IAAGlG,KAAM,KAAIuF,OAAO,CAACW,QAAS,EAAtC,CARoB,CAUtB;AFhBA,AF9BK,AG+BL,WDDO,EFtCE,CASL,EE6BQP,EAAL,CAAQzF,MAAR,CAAe,CAAf,CAAP;AACD,AFvCU,AIuDT,QAAI,KAAKtB,IJ7CA,KI6CT,EAAoB;AJ5Cd,AG6BN,AESFkX,ADOI,ECPJA,SFTO,IESM,CAAC3B,CFTZ,GH7BU,EKsCC,EAASC,CLtCLtV,GKsCJ,EAAeuV,ELtCpB,EAAkB,AKsCb,EAAqBC,IAArB,EAA2B;AHvBP,AFdvB/T,AG6BR,AESA,ADOE,EFfN,MGQQwV,EDOExQ,CDhBD,EESI,GAAG,CAAZ,ADOa,CJ7CLhF,AI6CM8F,GDhBd,KCgBM,CAAiBrG,EJ7CJ,GAAG,AI6ChB,CJ7CE,II6CyBlE,GAAG,CAACK,MAAnC,EACE,OAAQ,IAAG6D,KAAM,GAAjB;AJ7CI3D,AG6BN,AEQF,ADSC,KAJD,GCLe2Y,GAAf,ADUK,GDlBG/U,IH7BA5D,EG6BM,EH7BF,CG6BK,EH7BF,GAAP,AG6Bc+N,SAAL,CAAetJ,KAAK,CAACb,MAArB,CAAf;AH5BK,AG6BL,AEOF,ADWE,QCXkBsU,IFPdtU,EEON,IFPY,KAAK6C,SAAf,EACE,OAAO,KAAK4H,MAAL,CAAa,qBAAoB5J,KAAK,CAACb,MAAO,IAA9C,EAAmDa,KAAnD,CAAP;AACFd,AEKF,ADYE,QDjBAA,AEK0BwU,KFLrB,CEKP,ADYUjP,CCb4B,CFJ5B,AEOV,KFPe6F,ACiBE,CAAC/E,QAAR,CDjBA,ACiBiBrG,CDjBDC,ICiBxB,EDjB8B,GAAGa,KAAK,CAACd,KAA/B,CAAR;AH9BI,AG+BJ,ACiBA,aAAKlE,GAAG,CAACK,MAAT;AFpBC,AF3BE,AG+BL,AEMA,ADWI,MFrBKyK,EGULwN,IAAJ,EAAU,CAACY,EDWC,CFrBT,AGUW,GAAGb,ADWFnU,KAAM,CFrBS0F,AGUnB,EAAcyO,ADWrB,EFrBD,CAAgC,GGUJ,GAAG,EAAxB,EAA4BC,IAA5B,IAAoCY,GAAG,CAACZ,IAAD,CAAvC;AHTZnW,AF3BM,EE2BNA,WAAW,GAAG;AACZ,ACGA,AEMA,ADWE,SCXG,CHTC,CCGD,CDHL,CEoBOnC,ECXIqZ,CDWD,CAACnZ,CDjBX,GEMA,GDWE,CCXmBmY,MAArB,EAA6B;AHR7B,AF5BE,AG+BAnU,AEMA,ADWE,QDjBFA,EEMIuU,CHTCvP,EF5BA,AG+BA,CCiBChF,EJhDN,AG+BQ,AEME,GAAGmU,ADWF,EDjBE9I,EDHI,CEoBD,CCXG,CAAC8J,CHTC,GEoBf,CFpBR,ACGU,CAAgB,AEML,CAAnB,CDW0BnV,CCXG,EFNAoK,ECiBE,KAAK,EDjBZ,CAAetJ,ICiBrC,CDjB0C,CAACb,ACkBzC,MDlBoB,CCkBbD,GDlB4Cc,ECkBnD,GDlBwD,CAACd,KAArD,CAAR;ADFH,AF5BK,AG+BF,AEME,ADYA,GFzB+B,CAMrC;AF7BM,AG+BJ,AEMI,YAAIqU,ELrCA/T,EKqCJ,EAAU,CLrCD,AKqCE0U,GLrCC,AKqCE,GAAGT,ELrCAhX,IKqCN,EAAcgX,MAAM,CLrCnB,CAAmB1U,CKqCG,EAAxB,CLrCE,CAAwBL,AKqCE6U,IAA5B,CLrCE,CAAZ,EACEhY,AKoC4C2Y,GAAG,CLpC3C,AKoC4CX,GLpCzC,CKoCwC,CAAvC,GLpCR,EAAcrU,KAAK,GAAGM,KAAK,CAAC,CAAD,CAA3B,CADF,CAEA;AAFA,AIiDF,aAAKxE,EJ9CE,CI8CC,CAACI,EJ9CEoE,KAAK,AI8ChB,GJ9CmB,KAAKhD,IAAL,CAAUuC,IAAV,CAAeL,KAAf,CAAZ,EAAmC;AE2BlC,AF1BJQ,AG4BN,AEMI,ADYA,MFpBF6D,KCEG,EEMI,CHRC,AF1BJ7D,AI8CE,EDlBR,CDFa,EF1BF,AKkCIqV,GLlCD,GKkCV,ELlCe3U,AI8CEN,ECZImU,EDYjB,CAAkBvU,GCZtB,CLlCU,CAAeM,AKkCI,ADYzB,CAAJ,EACE,EJ/C4B,CAAC,CAAD,CAApB,CAAR,CI+CON,KAAP;AFpBN,AF1BM,AG4BJA,AEMI,ADaF,QDnBFA,GDFK,ECEA,CEMGwU,EFNA,EH5BAxU,EKkCM,CFND1B,EH5BA,AKkCIiW,EHRnB,GF1BoB,CKkCK,CFNf,AEMgBc,CFNDvU,CH5Bf,IAAkB1D,AG4BE,AEML,CFNM4C,AEMzB,EAA6B,GFNV,CAAYE,MAAZ,CAAmB,CH5BD,AG4BlB,CH5BmBE,AG4BlC,CAAR,GH5B0B,CAAqBJ,KAArB,CAAtB,EACE,OAAOW,iBAAiB,CAAC,IAAD,CAAxB;AE0BT,AFzBOtE,AG2BJ,AEMM,GHjB2B,CAWrC,UF3BQA,IAAI,GAAG,KAAP;AACD,AG2BL,AEMQ,ADYN,aJlDO,AIkDFP,CJ5CH,EKgCQwY,ADYF,CAACvY,GCZH,EAAWuY,EDYjB,ECZqB,IAAIE,MAAT,IAAoBuB,KAAK,EAAzB,CAAV,CACA;ALvCC,AKsCD,ADaJ,cAAI,GJ5CC,AKiCIA,ILjCAvW,CKiCK,ILjCA,AKiCIiF,CLjCHtE,KKiCS,ADWFC,CJ5Cb,AKiCgB6T,GLjCD,AI4CpB,CJ5CK,AKiCS,ADWSjU,CCXGwU,GLjCDhV,CI4CzB,CAAJ,CCXkB,CDYhB,CJ7CgC,AKiCIW,CLjCH,CAAD,CAAL,GKiCpB,ADYAH,EJ7CiC,GAArC,AI6CH,EJ5CA3D,IAAI,GAAG,IAAP,EAAakE,WAAW,GAAG,CAA3B,CADG,CAEL;AEuBNqF,AFzBW,AG0BT,AEQO,ADYH,EFrBNA,MAAM,CAACC,KAAD,EAAQ,GFtBH,IAAI,KAAK/G,OAAL,IAAgBU,KAAK,CAACW,MAAN,GAAe,CAA/B,IAAoCX,KAAK,CAAC,CAAD,CAAL,KAAa,GAArD,EACHnD,IAAI,GAAG,SAAP,EAAkBkE,WAAW,GAAG,CAAhC,EAAmCP,KAAK,GAAG,GAA3C;AEsBN,AFrBI,AGsBF,AEQG,eFRI,KAAK0K,MAAL,CAAa,2BAA0B5J,KAAK,CAACzE,IAAK,EAAlD,EAAqDyE,KAArD,CAAP;ADAF,AC3BA,AEoCG,ADWD,KDjD2B,CA+B7B,OCkBOhF,GAAG,CAACG,MAAT;AFnBF,AFrBE,AK8BD,ADWG,aJzCG,CIyCC,EJzCN,uCIyC+CmE,IAAzC,CAA8CJ,KAA9C,CAAJ,EACE,OAAOA,KAAP;AFpBN,AFrBI,AI0CA,WFrBI,GFrBAR,KAAK,CEqBIqG,AFrBH1F,KEqBP,CFrBC,GEqBoB,AFrBL,CEqBM,AFrBrB,CEqBsB0F,GFrBFrG,EEqBA,GFrBK,CEqBO,AFrBN,CAAD,CAAL,GEqBiBqE,EFrBJ,GAArC,EACExH,CEoBkC,GFpB9B,EEoBgDwJ,CFpB7C,IEoBkD,AFpBzD,CEoB0DhC,CFpB7CtD,OEoBnB,IFpB8B,GAAG,CAA3B;AEqBP,AFpBK,AGoBJ,AEQA,ADNE,QDFE,CAAC2K,EEQE6K,KAAP,GFRI,IAAe,KAAKjX,OAApB,IAAgCkB,KAAK,CAAC2F,EAAN,IAAY,KAAK2E,WAArD,EACEtK,KAAK,GAAG,KAAKsK,WAAL,CAAiBtK,KAAK,CAAC2F,EAAvB,CAAR;AACF,AEOD,ADaE,GClMwB,CAuL3B,CD3BwB,CAwCtB,KDtBO3F,KAAP;ADnBmC,AFDjC,AGqBH,AESD,EHTF,CC7K8B,CA+K5B,SHvBS,GAAL;AACE;AACA,AIyCJ,WAAQ,IAAGA,KAAM,MAAK,KAAKmR,iBAAL,CAAuB5L,OAAO,CAACc,QAA/B,CAAyC,EAA/D;AJxCI,AGqBN0E,AEOAiL,ADaC,EDpBDjL,AEOAiL,CDpK4B,CAmL5B,QCfU,CAAC5R,CFPC,CAACtD,GEOH,EFPE,AEOM,EFPE;ADFtBkE,AFlBQ,AGqBJ,AEOA,QAAI,CFPCwC,AEOAyO,GHVG,EFlBA,CEkBG,AFlBF3V,EK4BI,CAAC8D,CHVCwC,ACGf,CHrBc,EGqBI,CHrBD,AK4BJ,CAAb,EFPA,AEQE,EL7BoBlJ,GEkBX,EAAf,AGWa,CL7BQ,CEqBrB,AFrBiCmC,GK6BfwT,CL7BG,CAAiB7T,KAAjB,AK6Bf,CL7BM,KACAD,aAAa,KAAKe,KAAK,GAAG,KAAK5C,MAAL,CAAYmC,IAAZ,CAAkB,GAAEL,KAAM,GAA1B,CAAb,CADjB,EAEEnD,IAAI,GAAG,OAAP,EAAgB4D,MAAM,GAAG,GAAzB,EAA8BD,KAAK,GAAGM,KAAK,CAAC,CAAD,CAA3C;AACF,AK2BJ,UAAMsT,MAAM,GAAG,EAAf;AHRG,ACAH,AESAA,ADYFvC,EAAAA,ECZEuC,KHTY/M,CGSN,CAACzC,CFTCtD,IESF,CFTO,AESb,CFTczE,ACqBA,CFrBX,AEqBY+K,CFrBQzB,AGSP,EHTb,ACAH,EDA2BrB,CGSN+O,GDYP,EAAY,CFrBvB,CGSa,CHToB,AGSPjP,KAAb,CAAhB;AHRFE,AFlBI,AGkBF,AESA,ADYA,EFrBFA,OAAO,ECAA,AESEsP,ADYAxM,CFrBC9C,CFlBD,CGkBP,EHlBE,CK2BF,EHTe,CEqBC,CAACtE,EFrBEoF,GEqBZ,KAAoBhJ,GFrB7B,AEqBgC,CFtBM,AEsBLC,CFnBjC,GEmBS,GAA+B,GAA/B,GAAqC,KAAK8U,iBAAL,CAAuB/J,SAAvB,CAA5C;AJtCI,AGkBF,AESH,ADYA,GC3M0B,ADqBC,CC4K5B,ADYA;AFrBA,AFnBM,AGkBF,AEWJ,MHVI,CAACzB,EAAL,EACE,ECFOoE,CHlBCzJ,IEoBDgE,CFpBM,GAAG,GEoBF,ACFZ,CDEakB,ACFK,CHlBChI,MGkBnB,EAA2B,GDEtB,EAAP,ACFkCkK,CDHE,CAOtC,IFtBkB,AGkBd,CHlBuC7H,CGmBrB,GHnBJ,CAA8BL,CGmBrB+H,IHnBT,CAAZ,EACEvH,CGkBc,GAAgB,CHlBzB,GAAGM,CGkB2B+K,IHlBtB,CAAC,CAAD,CAAb,CADF,CAEA,CGiBgC,EADlC,EACqD,IADrD,EAC2D,IAD3D;AHlBE,eAGK;AEoBX,AFnBQ,AGgBJ,ACqBJ+F,EAAAA,QFlBQzL,EAAE,CAAC,CAAD,CAAV,AFnBS,AGgBE,ACqBE,CAAC0B,IDrBEiE,ECqBH,EAAS,cDrBlB;ADIJ,AFpBWtL,AK0BXkW,ADYE,ECZFA,OHNK,GAAL,AEkBU7O,IJtCCrH,CK0BI,CAACV,ADYA,CAACuE,EJtCR,KK0BM,CDYb,CCZwB;AHLxB,AFrBgBtD,AGiBhB,AEUA,ADYA,UCZM4V,CFVD,ACsBA,EFlBE7R,CCJP,EHjBgB/D,CIuChB,ECZe,CHND,CAAC+E,CGMGb,MAAM,CHNjB,AGMkBC,CHNDiB,EAAE,CAACzF,EGMT,CAAc,GHNR,CAAU,AGMhB,CHNM,AGMxB,CHNO,CAAP;AFrBO,AGkBL,AEUF,ADYE,WCZKyF,EAAE,EDYA,ECZI,CL5BmB,EIwClBiM,GJxCuBhR,QIwC5B,CAAiByG,IJxCM,CAAmB7H,CIwC1C,CAAP,GJxC8B,CAA1B;AEsBR,AFrBQ,AGkBJ,AEUA,SHPC,CGOG,EHPR,AGOUmG,CFVDoE,CEUG,IL5BA/J,AK4BImW,KL5BC,EGkBb,CAAkB,CEUd,CL5Bc,AK4BlB,EAAwB,EL5BpB,AGkBJ,EHjBM,AGiBoB,KAAKzO,EHjBlB/G,IGiBb,EAAuC,KAAK4K,MHjBd,CAAC,AGiB/B,EAAqD,EHjBvB,CAAxB,CGiBN,EAA2D,IAA3D;ADIF,AFpBK,AK2BD4K,ADWJ,QCXIA,GDWC,EFlBE7R,IGOM,CAACqB,EHPA,AGOD,ADWb,CFlBeN,AGOX,GAAgB,IAAhB,EHPG,CAAkBM,EAAE,CAACzF,MAAH,CAAU,CAAV,CAAlB,CAAP;ACHE,AEWEZ,ADWF,QCXEA,KFXGiI,ECsBE,CCXG,CAAC,GDWCyK,CDtBZ,GAAgB,IAAhB,MCsBO,CAAoB3K,MAApB,CAAP,MCXsB,KAAKmM,SAAL,CAAe7N,EAAf,CAAX,EAA+B,KAAK+N,QAApC,CAAD,CAAR;AHPN,AFpBM,AGiBF,AEWC,SHRA,GAAL,EFpBUpT,CGiBC,IHjBI,CGiBCkL,IHjBI,IAAV,IAAkBjL,CGiBxB,UHjBmC,KAAK,CAAtC,EAAyC;AEqB7C,AFpBMlE,AK4BL,ADUD,KCfA,OLvBMA,IAAI,GAAG,SAAP;AEqBN,AFpBM,AGgBN,AEYD,ADUG,GCrNuB,CA6M3B,MHVMiI,CCJC,GAAL,CCsBS,EFlBE,AFpBAlF,GIsCG+R,EFlBE/L,WAAhB,EACE,AFrBI,EIsCG,CJtCuB,AIsCAiC,CJtC1B,GEqBG,EEiBA,CAAP,CFjBWrB,OAAJ,CAAYL,EAAZ,CAAP,CAHJ,CAIE;AFrBK,AGgBH,AEeJ,ADAE;AFTA,ACLE,AEeJ,ADOC,GAlM2B,CAoM5B,MFnBMA,EAAE,ACLA,CDKCA,ACLA,EDKE,CAACxF,ECLErB,IDKL,GAAY,ACLjB,CDKI,CAAF,ACJA,KDIsB,ECJf,CDIX,EACE,ECLc4L,KDKPpG,CCLE,CAAY,KDKP,CAACiB,OAAR,CAAgBI,EAAE,CAACzF,CCLjB,EAAgCY,GDKlB,CAAU,CAAV,ACLd,CAAP,CDKkC6E,EAAE,CAACxF,MAAH,GAAY,CAAzB,CAAhB,CAAP,CANJ,CAOE;AFvBI,AKgCN;AHRE,ACNE,YDMI2G,CCNCiD,KDMK,GAAGpE,EAAE,CAACM,CCNhB,CAAkB,SDML,ACNb,CDM4B,CCNC,EDMhB,EAAoBN,CCNC+B,CDMC,CAACvH,ICNpC,EDMiC,ACLf,GDK2B,CAAhC,CAAf,ACLyBuH,MAAL,GAAc,KAAK2D,UAAL,EADhC,EACmD,IADnD,EACyD,IADzD;ADOF,AFvBE,AIuCJuG,EAAAA,WFhBStN,AFvBA,AIuCE,CAAC,EJvCR,IEuBY,CAACiB,OAAR,CAAgBI,EAAE,CAACzF,MAAH,CAAU,CAAV,EAAa4G,MAAM,GAAG,CAAtB,CAAhB,EACCnB,EAAE,CAACmB,MAAM,GAAG,CAAV,CAAF,KAAmB,GAAnB,GAAyBnB,EAAE,CAACzF,MAAH,CAAU4G,MAAM,GAAG,CAAnB,CAAzB,GACyBxC,OAAO,CAACS,SAAR,CAAkBY,EAAE,CAACzF,MAAH,CAAU4G,MAAM,GAAG,CAAnB,CAAlB,CAF1B,CAAP;AFtBI,AGiBF,AEaJsP,ADQcjP,ECRdiP,EDQcjP,CCRX,CAAChD,IAAD,CDQS,CCRF,EL9BA,CAAC,AGiBA,KHjBKvF,AGiBAmM,SHjBV,EAAqB,CGiBvB;ADQJ,AFxBQ,AK8BN,ADOqB3D,IAAAA,KFblB,AGME8K,GHNP,CEaY,GCPV,CAAa/N,IAAb;AHLA,AFxBM,AGgBN,AEcA,ADMgCkD,IAAAA,MAAtB,CDpBL,AEcE,CHNDN,ECRN,CEcA,CL9BUzG,KAAK,CEwBC,EFxBE,CEwBC6E,IFxBIhH,EEwBE,CAAC0B,IAAP,CAAY8F,EAAZ,CAAnB,YFxBkB,CAA6B9F,IAA7B,CAAkCL,KAAlC,CAAZ,EACEQ,KAAK,GAAGM,KAAK,CAAC,CAAD,CAAb,CADF,CAEA;AEuBN,AFzBM,AGiBH,AEcJ,ADKyC8D,GC1Nf,CAuN3B,ADG0CA,SFXjCE,IFtBI,GEsBG,CAACH,IAAR,CACL0C,UAAU,CAACG,cAAc,CAACD,UAAU,CAAC,CAAD,CAAX,CAAf,EAAgCzC,OAAhC,CADL,EAELuC,UAAU,CAACG,cAAc,CAACD,UAAU,CAAC,CAAD,CAAX,CAAf,EAAgCzC,OAAhC,CAFL,EAGLuC,UAAU,CAACG,cAAc,CAACD,UAAU,CAAC,CAAD,CAAX,CAAf,EAAgCzC,OAAhC,CAHL,EAILyC,UAAU,CAAC,CAAD,CAAV,IAAiBF,UAAU,CAACG,cAAc,CAACD,UAAU,CAAC,CAAD,CAAX,CAAf,EAAgCzC,OAAhC,CAJtB,CAAP;AFrBQ,AGcN,AEgBJ,ADEY,GAAD,EAAwC,UDlBxC,EHdA,GGcKmH,gBAAL,CAAsB3K,KAAtB,CAAP;ADaJ,AF3Bad,AIiCX,WAAQ,KACN,EJlCSA,GIkCJsR,EJlCE,YIkCP,CAAoBnK,OAApB,CAA6B,IAC7B,KAAKkK,gBAAL,CAAsBjK,SAAtB,CAAiC,IACjC,KAAKgK,aAAL,CAAmB/J,MAAnB,CAA2B,GAC3B,4BAAejD,KAAf,IAAwB,EAAxB,GAA8B,IAAG,KAAK+M,iBAAL,CAAuB/M,KAAvB,CAA8B,EAAE,IAJnE;AFLA,AF5BkB7D,AGelB,ACuBD,GA3M2B,CA6M5B,ODzBO,EDaE+D,KF5BW/D,EE4BJ,CAACwE,ACbf,SDaO,CAAkBY,EAAlB,CAAP;AA1BF,AFFW,AGgBP,AEeJuM,EAAAA,OAAO,CAAC/K,EFfA,CAAC,IEeF,CFfOrI,CEeGsI,CL/BmB,KAAKxG,AGgBrC,EACE,CEcC,EAAqByG,IFdf,EEcN,EL/B6B,AK+BAjD,CL/BmB5E,AGiBrCkL,IEcX,CL/B6B,CAA1B,AGiBG,AEc8B,CFdlB,uBAAZ,EAAqC5J,KAArC,CAAP;ADaP,AF7BW,AGiBN,AEcF,EHAJ,WCdWyG,OHjBKvH,CGiBV,GAAgB,CHjBD,GGiBf,EHjBoB,IAAd,EACE,OAAOW,iBAAiB,CAAC,IAAD,CAAxB;AACH,AGgBL,AEcF,ADQFsR,EAAAA,MCRM,CAAC7K,IFdEI,ECsBI,GCRX,ADQc,ECPZpD,GFfA,EEeK,CFfa,EEeV+C,GFfeuE,IEeR,CAACtH,KFfhB,AEeA,EAAuBiD,MAAM,GAAGF,OAAO,CAACE,MAAxC,EACED,SAAS,GAAGD,OAAO,CAACC,SADtB,EACiCD,OAAO,GAAGA,OAAO,CAACA,OADnD,CAHuC,CAMzC;AFjBE,ACsBF,UAAM,GDtBCwE,CCsBG/I,KAAJ,CAAU,IDtBd,GAAmB,KAAKyI,UAAxB,4BCsBI,CAAN;AFTG,AF7BG,AGiBJ,AEiBFlE,ADKD,GAhN2B,CC2M1BA,ADOF,KFZcF,EGKL,GAAG,CFjBD,CHjBC3G,CE6BP,CAAkBsD,ECZPgI,CHjBC,CE6BZ,EAAwB,EF7BP,IAAV,IAAkBrL,KGiB1B,IEiBiB4G,ELlCoB,KAAK,AKkClC,CLlCJ,AKkCN,ELlC+C;AE8BjD,AF7BU9K,AKkCR+K,IAAAA,EHLE,OAAOxD,AGKA,CLlCDvH,EKkCI,CHLV,CF7BU,GAAG,CE6BG,QAApB,AF7BU,EE8BR,OAAOuH,IAAP,EGIqBwD,SAAT,CAAZ;AHHF,AF9BU,AGgBR,AEkBAC,IAAAA,EHJEzD,IAAI,AGIA,CFlBD,EEkBI,MLlCIxE,CGgBb,EDckBsG,IAAhB,IAAwB9B,IAAI,CAACC,EF9BvB,GAA0B,CAA1B,CKkCUwD,CHJQ,KAAkB,AGInC,CAAT,KHJF,EACE,OAAOzD,IAAI,CAAC+B,EAAZ;AACF,AF/BS,AGgBL,AEkBFvB,ADKF8N,EAAAA,ECLE9N,EHHE,CAACR,EGGE,ADKA,CAACuD,CFRR,CCfQ,AEkBE,CHFR,AChBO,ICuBF,CDvBOrI,CCuBGsI,CFPRpC,KChBL,EACE,CCsBC,EAAqBqC,EFPP,CAAC1B,CCfT,CDeX,CAN2B,AEatB,CFLP,CEKoCvB,CDtBlBsG,EEiBCtG,EDKZ,EDtBM,ACsB8BqM,CDtBlB,AEiBf,CAAR,CAVyC,CAYzC,ADGK,EAA0C,iBDtBpC,EAAoC3P,KAApC,CAAP;AHhBC,AGiBH,ACsBF,aDtBOyG,QAAL,GAAgB,IAAhB;ADiBJ,AChBI,AEkBF,ADIA,QCJI8O,ADIAhP,EFNEzD,GChBC4D,CDgBG,AEMA,CFNC3D,EGEE,EDIEf,CCJC,GHFlB,AChBI,EEkBmBuQ,CFlBD,ECsBpB,EACE,CDvBuBxH,CEkBT,CAAazH,EDKtB2M,GCLS,CAAhB,CFlBE,AEKuC,CAczC,IDIE,CAAgB5J,OAAO,CAACA,OAAxB,EAAiCA,OAAO,CAACC,SAAzC,EAAoDD,OAAO,CAACE,MAA5D,EAAoEF,OAAO,CAAC/C,KAA5E,EAAmFgD,SAAnF,EADF,CAEA;AFPF,AFlCM,AGkBF,ACqBF,SFLG,AEQE,IDxBEuE,ACwBE,OFRX,AEQkBvH,IDxBd,CCwBO,EDxBY,GCwBK,EDxBA9F,QCwBrB,CDxBH,CCyBA,KAAKyS,UAAL,CAAgB5J,OAAhB,EAAyBC,SAAzB,EAAoCC,MAApC,EAA4CrC,YAA5C,EAA0DZ,KAA1D,EADG,CAEL;AFVmB,ACfjB,AEkBF,ADKK,QCLD,CAACiS,EDSH,EFZwBzS,ECfjB,CC2BFmN,CFZuB,CAAC/Q,AGG/B,EFlBc4L,AEkBE,GHHG,GEYjB,CAAgBzE,OAAhB,EAAyBC,GD3BzB,MC2BA,EAAoCC,MAApC,EAA4CjD,KAAK,IAAIY,YAArD,EAAmEyL,IAAnE;AJ5CA,AKoCA4F,ADSH,GA7N2B,CA+N5B,ECXIA,OLpCK,EKoCI,CLpCT,EKoCY,KAAKhD,OAAL,CAAajP,KAAb,IAAsB;AHHtC,AFhCM,AGiBJ,AEkBsCyP,QAAAA,CHHnC,ECfE,KEkByC,EAAE,EHHlD,ACfE,AEkBoC;AHHjB,AF/Bf,AGiBF,AEiBkDyC,QAAAA,IFjB9C,CDcqB,ACdpB,CHjBC,IE+BuB1S,ACdnB9E,AEiBkD,CLlCjDA,CKkCmD,EHH7B,AGGC,CHHAkB,ECdlC,CHjBM,CGkBJ,CDasC,EAAvB,CF/BMM,GGkBd,EHlBmB,GAAG,AGkBjBoK,KHlBsBpM,CGkB3B,CAAY,OHlBU,CAAeuB,IAAf,CAAoBL,KAApB,CAAzB,CAAJ,AGkBO,EHjBLnD,AGiBuCyE,IHjBnC,CGiBC,CAAP,CHjBS,KAAP,EAAcd,KAAK,GAAGM,KAAK,CAAC,CAAD,CAA3B;AACF,AKgCgEiW,ADYtEpE,EAAAA,MCZsEoE,EDY9D,CAAChH,ICZoE,CDYrE,CCZuE,CDY/D;AFdhB,ACZI,AEckC,ADapC,OCbE,CADc,CHDb,AGGD,ADYG,GD3BCzO,CC2BGmO,CAAC,GD3BC,AC2BE,CD3BDhP,AC2BZ,CFfF,CEekBgP,CAAC,GD3BX,AC2BcM,CD3BDpP,IC2BM,CAACA,CD3BpB,KAAwB,AC2B9B,CD3BE,CC2BgC8O,CD3BD,AC2BE,EAAnC,EACE,KAAKiD,OAAL,CAAa3C,KAAK,CAACN,CAAD,CAAlB;AFhBiB,AF5BjB,AGiBE,AEeF,ADaH,GAnO2B,CAqO5B,SFnB6B,AF5BpB,EGiBEnD,CHjBP,CE4B4BlI,IAAI,CAAC5D,KAAM,CCXrC,CDWe,ECXMc,KAAK,CAACd,KAA3B;AHhBA,AGiBA,iBAAO,KAAK+L,uBAAZ;ADWN,AF3BM,AGiBD,AEcDtH,MAAAA,GHJC,ACbD,GEiBM,CAAC+R,CL/BD,CGmBJ,IHnBS/V,AK+BX,CFZO8G,AEYO8O,GHJlB,KCRM,CEYF,EFZkB,GHnBZ,EGmBiBrK,GHnBQ,KGmBb,CAAclL,GHnB1B,EGmB+B,CAACd,EHnBOM,GGmB3B,EHnBgC,AGmBL,GHnBQ,EGmBH8K,GHnBQ3N,OGmBb,CAAgBqD,CHnBR,CAAejB,GGmBF,CHnBb,AGmBcI,CHnBMT,KAApB,AGmBR,CHnBvC,AGmBY,CHnBhB,AGmBA,EHlBEnD,IAAI,GAAG,UAAP,EAAmB2D,KAAK,GAAGM,KAAK,CAAC,CAAD,CAAhC,CADF,CAEA;AEyBe,AF3Bf,AKgCH,ADcH8R,EAAAA,GClC2C,CAsBzC,KDYO,CAACnS,CFnBkB,EAAP,AFxBV,GI2CF,CJ3CMK,CI2CG+D,GAAT,CJ3CW,CI2CGoM,EJ3CA,EI2Cd,EAAoB,CJ3CDhS,QAAL,CAAcoB,IAAd,CAAmBL,KAAnB,CAAZ,EACHnD,IAAI,GAAGiE,KAAK,CAAC,CAAD,CAAZ;AACF,AGgBF,AEcF,ADYA,UAAMiE,QAAQ,GAAG,EAAjB;AFnBF,AGQE,ADYAA,IAAAA,KFpBG,GEoBK,CAACtE,KFpBX,CEoBU,CAAR,GAAmBoE,GAAnB;AFpBmB,AFrBjB,AGeF,AC2BA,SAAKyM,ED3BA,EDMsB,AFrBpB,EGeP,CHfE,CEqB4BlN,GEqB9B,CFrBkC,AEqBjBW,CFrBkBvE,KAAM,EEqBzC,EFpBA4D,AEoB2B6M,IFpBvB,AEoBJ,CFpBKvK,QAAL,GAAiB,IAAGtC,IAAI,CAACsC,QAAS,EAAlC,GACGtC,IAAI,CAACyC,QAAL,IAAiBzC,IAAI,CAACyC,QAAL,CAAcrG,KAAd,KAAwBlE,GAAG,CAACK,MAA7C,GAAuD,KAAIyH,IAAI,CAACyC,QAAL,CAAcrG,KAAM,EAA/E,GAAmF,EAAI,EAFvE;AFpBf,AGeF,AC2BH,GA1O2B,CA4O5B,QD7BQ,CAAC,KAAKkJ,gBAAV,EACE,OAAO,KAAKwB,MAAL,CAAY,wBAAZ,EAAsC5J,KAAtC,CAAP;ADON,AFtBM,AK4BJ,SHNG,CGMG2V,GAAG,CL5BDjX,CEsBV,CGMc,GL5BC,CAACW,CK4BGoT,IAAjB,CL5BQ,KAAiB,CAAjB,GAAqBhU,aAArB,GAAsCC,KAAK,CAAC,CAAD,CAAL,GAAW,GAAX,IAAkBA,KAAK,CAAC,CAAD,CAAL,GAAW,GAAvE,EAA6E;AEuBjF,AFtBMnD,AGeJ,AEaF,UAAMqa,EL5BAra,CGeC0N,GHfG,EK4BI,CL5BD,EK4BI,CL5BX,GGeJ,CAAkB,AEaEyJ,IFbpB,EAAwB,GEa1B,EFb+B9L,MAA7B,EAAqC,IAArC,EAA2C,IAA3C,EAAiD,IAAjD;ADQF,AFtBMnH,AK4BN4G,ADcF2J,EAAAA,ECdE3J,OAAO,CL5BD5G,CI0CG,CCdGkW,ADcFlS,GCdK,CAAC4C,IDcP,CJ1CQ,CI0CGsJ,CCdL,CL5BK,AK4BR,CL5BN,CI0CG,EAAiB,CCdKgG,GAAG,CAACC,QAAQ,CAAC,EAAE,KAAKpD,GAAR,CAAR,GAAuBnM,OAAxB,CAAH,GAAwC,KAAKmM,GAAhE,CAAZ;AHLA,AFtBM,AGcJ,AEcFlM,ADcA,ICdAA,SHNQ,ACRDM,AEcE,GAAG+O,EHLRvP,CCTF,AEca,CAACE,EFdA,IAAd,GEca,CHLC,AGKJ,CHLKH,IGKcwP,GAAG,CHLT,AGKUC,CHLT9S,IAAI,CAACuD,EGKY,CAAC,EAAE,EHLrB,CAAT,CACb,CGIgDmM,GHH/CpM,AGGuC,CAAR,GAAuBE,QHH1C,CAACH,AGGiB,CAAH,GAAwC,IHH9C,CAACrD,AGGkD0P,GAAhE,CHHkB,AGG9B,CHH+BlM,SAAN,CAAT,CACb,IACCF,YAAY,CAACD,QAAQ,CAACrD,IAAI,CAACyD,MAAN,CAAT,CACb,GACE,4BAAezD,IAAI,CAACQ,KAApB,CAAD,GAA+B,EAA/B,GAAqC,IAAG6C,QAAQ,CAACrD,IAAI,CAACQ,KAAN,CAAa,EAC9D,IARH;AFrBK,AGcH,AEcFiD,ADcA,ICdAA,IDcI,CAAC,CCdC,GAAMoP,CDcF5F,CD5BD,CEcM,CAACxJ,GFdF0D,GEcC,CAAH,CDcZ,EACE,ECf6B0L,GFd7B,AEcgC,CAACC,CDe1BjG,IAAI,GCf8B,CAAC,ADe3BA,ECf6B,EDezB,EAAnB,CCfiD6C,ADYzB,CAK1B,ECjB2C,CAAR,GAAuBjM,MAAxB,CAAH,GAAwC,KAAKiM,GAAhE,CAAZ;AHEF;AAAS,AF7BH,AGcJ,AEeA,ADgBA,QAAIjB,EChBEsE,EHAO,IAAI/T,CGAJ,EDgBE,CChBC,CHAH,CAAW,AEgBN,GChBGsR,EDgBrB,SChBgB,CAAiBmC,SHAczS,AGAL,CAACiQ,GHAQ,CAAChQ,IGApC,EAAuCsD,EHAM,EAAhD,CAAN,EGAS,EAAkDC,SAAlD,EAA6DC,MAA7D,CAAhB;AHpBF,ACMI;ADgBL,AF7BK,AGcA,AEcF,ADgBA,EFZJ,OGJS6M,ADgBA,GD9BC,CHdC,AGcA,AC8BEjU,GJ5CP,EGcUsH,CC8BZ,CChBA,CAAiB8O,EDgBE9R,GD9BZ,GAAgB,CEcG,CAAC+R,ADgB3B,EAA6B,CD9BDrL,OEc5B,EAAuC7D,EFdhB,CAAiBtG,KAAjB,CAAjB,AEcN,EAAkDuG,IFdEvE,EEcpD,EAA6DqE,KFd3D,EACE,AEaJ,OFhBA,CAIE;AHfA,AI4CA,UAAI9C,GJ5CC,AI4CE,GJ5CP,AI4CUE,QAAQ,CAACtE,MAAD,CAAlB;AJ3CA,AGeA,AEYF,ADiBE,SCjBGiU,CDiBC,ED7BA,CHfC,GAAL,CGeSpV,AC6BEuF,GCjBb,ADiBM,CCjBWgS,GFZf,CC6BmB,CD5BjB,IEWsB,CAACE,EFXhB,AC4BT,EACElS,GD7BY4H,AEWhB,ADkBO,EClBgC5E,CDkB7BhD,GAAG,CAACrE,CClBd,EAAkDmH,EDkB9C,ED7BO,CAAoB,EEW/B,EAA6DC,CFXzB2B,QEWpC,EAjCyC,CAmCzC,eFbW,CAAP;ADeD,AF9BD,AG5CF,ACyFEsJ,KD3FgB,CD4ET/K,ACZT,AC2BE+K,IFfC,GF9BI,GAAL,CI6CW,EFfS3M,CEeN,GFfb,CAAwB,AEezB,CAJ2B,CAK3B;AFfJzH,AF9BI,AGkBF,EDYFA,WAAW,AF9BF,CE8BGkJ,EF9BR,KE8BO,EAAUC,SAAV,EAAqBC,MAArB,EAA6BjD,KAA7B,EAAoC;AAC7C,AF9BE,AK2BF,ADkBE,SClBGgP,CHGC,AEeA,EFfN,CF9BO,CK2BP,CDkBW7L,CJ7CT,CK2BW,IAAb,EDkBM,KAAkB,IAAtB,EAA4B;AFd9B,AF9BE,AK2BF,ADkBI,SFfCA,EGHEoP,EL3BA,AI6CEzF,GJ7CP,CE8BF,CGHA,CDkBI,CFfc/J,AEeF,KAAK8J,EFfrB,aEegB,GAAuB,KAAvB,GAA+B,OAA3C;AFdJ,AF9BE,AGgBF,AEWD,GA/P0B,CAiQ3B,KHCOzJ,ECdE,EHhBA,GAAL,AGgBUuB,GDcZ,GAAkB3B,SAAlB,WCdA;ADeA,AF9BE,AGgBH,AC4BK,GD/QsB,CAqP5B,KDYOK,IF9BE,AI4CEF,GFdT,AF9BE,GE8BgBF,EEcd,GAAgB,CFdpB,GEcI,EAAsB,KAAKK,MAAL,GAAc,EAApC;AFbJ,AF9BE,AI4CC,OAT0B,CAU3B,CFfGA,IF9BE,EE8BP,CF9BE,EE8BgBtD,KAAK,IAAIY,YAA3B;AACD,AF9BG,AK2BJmN,EAAAA,CHJ6B,CAS7B,MGLQ,CAAC5C,EL3BA,GAAL,AK2BI,EAAQ;AL1BZ,AGgBJvG,AEWE,EFXFA,OEWO,IL3BE,AK2BEiG,CAAC,EL3BR,AGgBU,CAACnO,AEWA,CAAb,EAAgBmO,CAAC,CFXL,EAAQ,AEWAM,KAAK,CAACpP,MAA1B,EAAkC8O,CAAC,EAAnC,EACE,KAAKiD,OAAL,CAAa3C,KAAK,CAACN,CAAD,CAAlB;AL3BE,AGgBJ,AEYD,ADeG,GCpRuB,CAuQ3B,MFdQ5S,CC2BCwU,GD3BG,GAAG/P,KAAK,AC2BhB,CD3BiBzE,AC2BAgI,GAAjB,CD3BF,GC2B2BpE,MAAM,IAAI,GAAnC;AFZQ,AF9BN,AK8BN,MHAI4D,QAAQ,GAAG;AACb,AF9BI,AGeJ,AC2BE,WFZK,AEYAqN,CD3BC7U,IAAR,CDeA,AEYE,CAAa,WAAU4D,MAAO,KAAIoE,GAAI,MAAtC;AFXH,AF9BK,AGeJ,AC2BC,KApByB,CAqB1B,KD5BK,GHfG/D,KAAK,CGeb,EHfgB,KAAK/B,OAAL,CAAasB,IAAb,CAAkBL,KAAlB,KACRD,aAAa,KAAKe,KAAK,GAAG,KAAK/B,OAAL,CAAasB,IAAb,CAAmB,GAAEL,KAAM,GAA3B,CAAb,CADjB,EAC+D;AAC7DnD,AGcJ,AEaJua,EAAAA,MAAM,CAACzS,GL3BC9H,CGcC6N,AEaH,EAAO,CL3BD,GAAG,SAAP,EAAkBlK,AGctB,GAAyB,EHdE,EGc3B,CHd8BM,KAAK,CAAC,CAAD,CAA/B;AE8BG,AF7BHL,AK2BN,MHEEkH,GGFG0P,GL3BC5W,CE6BG,GAAG,EF7BA,CK2BZ,CAAgBkE,CL3BA,GK2BhB,IL3BuB7D,KAAK,CAAC,CAAD,CAAZ,KAAoB,QAApB,GAA+BxE,GAAG,CAACG,MAAnC,GACC,OAAOqE,KAAK,CAAC,CAAD,CAAZ,KAAoB,QAApB,GAA+BxE,GAAG,CAACC,OAAnC,GAA6CD,GAAG,CAACI,OAD5D;AE8BN,AF5BK,AGYL,AEcA,ADaA,QAAImW,GFXG,AChBF,AEcE,IAAP,CHEY9K,GEWZ,EAAiB,GFXjB,CChBA;ADiBD,AChBG,AEcH,ADaG,GCzRuB,CA8Q3B,MDWQ+K,GD3BC9K,IC2BM,GAAG,EAAd,CD3BA,GAAkB,KAAK0E,aAAL,CAAmBpL,KAAK,CAACd,KAAzB,CAAlB;AHZE,AGaF,AEgBJ,ADUI,UAAkBuS,UAAU,GAAG,EAA/B;AFTS,MAATnL,SAAS,GAAG;AACd,AF7BE,AGYF,AC0BE,WFTK,ACjBF,AC0BE,EJtCA,CGYP,EDiBYI,AF7BV,CIsCWgL,SFTb,AESE,IAAwB,KAAK3B,WAA7B,EAA0C;AFR7C,AF7BG,AGYF,AEeFiG,ADWMxE,ECXNwE,GAAG,CAAC3S,EDWEmO,ECXH,CFfI,CEeG,CL3BD,CGYP,CC0BW,CJtCT,GIsCaA,OAAO,GAAI,IAAGE,SAAU,EAAjB,GAAqBA,SAAvC;AJrCF,AGYF,AEeA,ADWID,QAAAA,ECXEhD,CFfD,EHZE,CGYP,CEeW,CL3BT,EK2BY,ADWA,IAAI,CCXCwH,ADWAxE,QCXL,CAAcpO,CDWC,GCXG,ADWA,CCXCgD,EDWJ,GAAS,ECXxB,ADWI,ECXwBhD,EDWE,ECXE,CAACiD,EDWEyJ,OCXnC,EAA4C1M,EDWd,CAAiBqO,CCXC,CAACnL,MAAjD,CDW8B,CCX2BlD,ADWnE,ICXuE,CAACC,KAA9D,CAAd;AHGQ,AF7BN,AGYA,AEeF,ADWG,MFTDiD,KGFKkI,CHEC,CF7BD,EE6BI,CF7BT,AK2BU,CAACpP,MAAN,KAAiB,CAAxB;AHGA,AF7BE,AGYA,AEeH,GAnR0B,CAqR3B,OHAS,CCjBD,CHZC,GE6BKsH,AF7BV,CGYSD,MDiBX,ICjBM,KAAoB,IAAxB,EACE,OAAO,KAAKkD,MAAL,CAAa,cAAarO,IAAK,EAA/B,EAAkCyE,KAAlC,CAAP;ADiBL,AF7BG,AGaA,ACwBAwR,MAAAA,OJrCK,AGaA/K,ACwBE,GJrCP,AIqCU+K,KDxBV,ECwBiB,CDxBD,ACwBEjR,IDxBlB,GCwBU,CAAgB,yBAAhB,EAA2C,MAA3C,CAAV;AJpCE,AGaF,ACwBA,WAAK4O,IDxBE5T,IAAI,ICwBX,CDxBgB,ECwBI,CDxBb,GAAe,ACwBE2C,KDxBGmN,CCwBP,CAAY,OAAMoG,SDxBhB,CAAwBzR,ACwBG,KDxB3B,CAAf,GAAgD,ECwBxB,GDxB6B2K,ACyB5B,KAAI6G,OAAQ,IDzBW,CAAsBxR,KAAtB,CAAvD,mBCwBoB,CAApB;AFPK,AF7BH,AK2BNkW,ADWG,ECXHA,GDpB4B,CFsBxB5S,AEUF,ECZI,CAAC6S,EHEE,GAAG,AF7BF3W,CK2BJ,EAAS,EL3BA,GAAG,KAAK5B,cAAL,CAAoBmB,IAApB,CAAyBL,KAAzB,CAAZ,EACEnD,IAAI,GAAGiE,KAAK,CAAC,CAAD,CAAL,CAASO,WAAT,EAAP,CADF,KAGEL,YAAY,GAAG,IAAf;AE2BN,AF1BI,AGSJ,AEeAyW,IAAAA,MAAM,CHEC,ACjBF,AEeE1T,EAAP,CFfA,AEeU,EHEEmE,IGFZ,EHEA,AGFkBvD,IAAI,IAAI;AHG3B,ACjBG,AEc0B,GHzBD,CA8B7B,OGLmC+N,OAAL,CAAa/N,IAAb;ALtB1B,AGSA,AEa+C,ADYjD,KCZA,IDYK+M,IJlCE,EGSE,ACyBT,CJlCE,AIkCUmB,IDzBE7K,OCyBS,GDzBd,ACyBiB,IAAH,CDzBM,ECyBI,EDzBxB,ACyBT,EAAqCiJ,CDzBD,GCyBpC,EDzByCzH,cAAhC,GACA,KAAK0B,MAAL,CAAY,8BAAZ,EAA4C5J,KAA5C,CADP;AHRA,AKsBF,ADYD,GA/Q2B,CAiR5B,OCdSmW,ELtBA,GAAL,CKsBF;AHKFnR,AF1BM,AGSJ,AEaD,EHIDA,CG7R2B,CA2R3B,IHEM,GAAG,ACjBF,OAAL;ADkBA,AF1BI,AGSF,WDiBK,CCjBD,CAAC,CHTCxF,IGSIxB,CHTC,GAAG,GGSd,EHTmBN,AGUjB,OAAO,CHVK,CAAcqB,GGUd6K,CHVA,CAAmBlL,IGUxB,CHVK,AGUO,CHVnB,EACEnD,IAAI,GAAG,SAAP,EAAkB2D,KAAK,GAAGM,KAAK,CAAC,CAAD,AGS1B,CHTL,CGSuDQ,CHTnBb,IGS/B,CAAP,CHT4C,GAAGnE,GAAG,CAACE,OAAjD,CADF,KAGEwE,YAAY,GAAG,IAAf;AEwBJqD,AFvBE,AI+BN4O,EAAAA,IFRI5O,CEQC,CAACuD,MFRM,EAAG,CEQV,EAAYC,EFRGxD,IEQf,EAAoB,EFThB;AAELsD,ACjBF,AEaF0P,ADYE,ECZFA,IHII1P,EEQEuL,ICZI,CHIC,AGJAvL,EHII,CEQD,GAAGC,CFRGG,AGJV,EAAUH,MHIL,AEQb,CFR2BtB,EGJnB,EAAqBuB,EHIhB,EAFN,EGFC,EAA6BjD,KAA7B,EAAoC;AHK1CgD,AFvBA,AGMA,AEaF,ADWA,MFPEA,EEOwBuL,IDxBpB,CHNC,AGMA,ACwBP,EFPW,CFvBT,CEuBW,CCjBDnL,IDiBMA,MCjBX,GAAkB,CDiBZ,CAAgB1B,GCjBCmF,GDiBjB,EAHN,MCdkB,CAAiBnK,KAAjB,CAAnB,MAAgDgC,SAApD,EACE;ADiBFuE,AFvBE,AGjBJ,AEoCA,ADUA,KDhDoB,CD0ClBA,ACfF,EEWI,ADU6BlH,CCV5BiH,GHIG,EAAK,AEMb,CADuB,CAEvB,ECXA,CHIkBK,CGHhBrD,KAAK,CHGM,CAAa0B,CGHhBqB,KHGG,EAJN,AGCU,CAAC/C,KAAhB,EAAuBiD,MAAM,GAAGF,OAAO,CAACE,MAAxC,EACED,SAAS,GAAGD,OAAO,CAACC,SADtB,EACiCD,OAAO,GAAGA,OAAO,CAACA,OADnD,CAH0C,CAM5C;AHCE/C,AFvBE,MEuBFA,KAAK,EAAM,CFvBL9D,IEuBUoH,CFvBL,GAAG,EEuBH,CAAY5B,EFvBJnH,IEuBR,YFvBG,CAAsBkB,IAAtB,CAA2BL,KAA3B,CAAZ,EACEnD,IAAI,GAAG,cAAP,EAAuB2D,KAAK,GAAG,GAA/B,CADF,KAGEQ,YAAY,GAAG,IAAf;AEeC,AFdH,AKmBJ2G,ADOA,ICPAA,CHLA,GEYIC,GCPG,GAAG,GDOG,KAAKtE,SAAlB,EACE4P,QAAQ,ECRSvL,CDQN,EAAX,CADF,CAEA,ECTU,CAAV;AHED,ACjBC,AEgBAC,ADMA,GF5C2B,CAyC7B,AGHEA,KDSK,EDzBE,EEgBE,ADSAA,GDzBGgF,AEgBA,MDSM,CAACvI,IDzBnB,ICyBK,EACH6O,QAAQ,GAAG,CCVQtL,ADUP,SCVF,CAAZ;ALlBE,AGGH,AEgBCC,ADSgBD,GD5SU,CAqR5B,AEcEC,IDSgBD,ECTV,GLnBC,AKmBE,GLnBP,CI4BuB,EAAEA,SAAb,cCTIC,MAAT,CAAT;ALlBI,AKmBJjD,ADQsCiD,ICRtCjD,IDQsCiD,CCRjC,GAAG,EDQoC,EAAEA,yBCR7BjD,KAAT,CAAR,CAV4C,CAY5C;AHAFwB,AFpBM,AKqBJ,ADKc,EFNhBA,KEMe,CFNT,AEMF,CFNGC,AEKA,CAEL,IFPI,AFpBI,EEoBI,GFpBC/G,OAAL,IAAgBU,KAAK,CAACW,MAAN,GAAe,CAAnC,EAAsC;AEqB1C,AFpBM9D,AGGR+P,ACqBO,EDrBPA,SDiBS,AEOF,CFPG,AFpBF/P,CEoBGwJ,ACjBA,CAAC/E,CCwBD,CJ3BC,CI2BC,CFPJ,CFpBM,AGGJ,EAAQ,CDiBC,KAAKyG,EEOAH,IJ3BjB,EEoBY,CAAcxB,EEOvB,CAAJ,EACH8M,CFRgB,CAAqB7M,KAAK,CAACsB,AEQnC,GAAG,CAACC,GFRI,CAAX,IACW,CEOL,CAAX,GFPqBI,UAAL,CAAgB5B,MAAhB,CAAuBC,KAAK,CAACuB,SAA7B,CADX,IAEW,KAAKK,OAAL,CAAa7B,MAAb,CAAoBC,KAAK,CAACwB,MAA1B,CAFX,IAGW,KAAKK,MAAL,CAAY9B,MAAZ,CAAmBC,KAAK,CAACzB,KAAzB,CAHlB;AAID,AFvBO,AGGN,AEiBA,UAAMqS,EFjBE3V,CEiBC,GLpBCtB,AKoBE,CFjBC,CAACnD,GHHC,AKoBEkX,CLpBD,AGGhB,CHHe,CAAL,CKoBV,ILpBuB,GAAjB,EACEhT,WAAW,GAAG,CAAd,EAAiBP,KAAK,GAAG,GAAzB,CADF,KAGEO,WAAW,GAAG,CAAd,EAAiBP,KAAK,GAAG,GAAzB;AACH,AGAL,AEgBA,ADSA,UCTuB4T,CFhBlB,CCyBGzT,ICTqB,EDSf,CCTkB,CFhBhC,CCyBiBuS,GCToBW,KDSZ,CAAClT,CCT1B,KDSA;AFrD2B,AC6BzB,AEgBF,ADSA,QCTIkW,SAAJ,EAAexC,QAAf,EAAyByC,UAAzB;ALhBI,AGCF,AEgBF,ADSA,QCTI,EAAEnP,CDSD,CDzBCrG,ACyBN,KDzBW,AEgBE,CFhBDb,EEgBOwW,GAAG,CFhBhB,AEgBiBtP,CFhBJhH,MAAb,AEgBgB,CAAlB,IFhB0B,CAA5B,AEgBkC,EFhBH,AEgBKiH,SAAS,GAAGqP,GAAG,CAACrP,SAAD,CAAjB,CAAhC,IACA,EAAEC,MAAM,GAAOoP,GAAG,CAACpP,MAAD,CAAlB,CADA,IACgC,EAAEgP,SAAS,GAAGzC,MAAM,CAACxP,KAAD,CAApB,CADhC,IAEA,EAAEyP,QAAQ,GAAKwC,SAAS,CAACxC,QAAV,CAAmB1M,OAAnB,CAAf,CAFA,IAGA,EAAEmP,UAAU,GAAGzC,QAAQ,CAACzM,SAAD,CAAvB,CAHA,IAIA,EAAEC,MAAM,IAAIiP,UAAZ,CAJJ,EAKE,OAAO,KAAP,CArB0C,CAuB5C;AFtBI,ACyBF,eDzBOxK,ACyBA,IAAIgE,SDzBT,GAAqBhP,ECyBhB,CAAmB,EDzBE,CAACd,CCyBtB,CAAP,GDzBE;AHAF,AGCE,AEsBJ,ADGA,SCHK0U,ILvBE,GAAL,CGCS,KAAKrI,GEsBhB,CAAsBgK,SAAS,CAACxC,KFtB5B,GEsBJ,EAA4C1M,OAA5C,EAAuDC,SAAvD,EAAkEC,MAAlE;AHHJ,AFnBQ,AGCD,SAHD,CAIA,IHFM,CAAC,KAAKvI,OAAV,EACE;AEmBH,ACtBD,AEyBF,ADGA,SFNYoI,AGGPwN,EDGA,CAAL,CDtBI,KAAKjN,GDgBN,CAAsB9B,EAAtB,CChBC,AEmBJ,CHH6B,AGGP0Q,EFnBH,KAAKrK,EEmBO,CAACsK,KFnBb,CAAcxV,IEmBjC,CFnBsC,CAACd,AEmBKoH,KFnBzB,EAA2B,EEmB9C,EAAuDC,CFnBJ+D,KEmBnD,EAAkEjE,GFnBpB,CAAgBrG,GEmB9D,EFnBmE,CAACb,MAAtB,CAA3B,CAAf;ADiBN,AFnBI,AIyBA0S,QAAAA,CFNGhN,EAAE,CAACtE,CFnBD,AIyBA,GJzBL,AIyBQqR,GFNL,CAAWxN,IEME,CAAC,CAAD,CAAhB,OFNG,EAA2B,CAACyC,CAAD,EAAIC,MAAJ,KAAgB,IAAGA,MAAM,CAACvG,OAAP,CAAe,IAAf,EAAqB,IAArB,CAA2B,EAAzE,CAAP;AACD,AFnBK,AGEA,AEmBF,ADIE,EFJN,OGASqT,GDIC,CJzBC,CIyBC/B,EJzBN,GIyBW,CAACtL,KCJd,CAAsBgP,ADId,SCJuB,CAACE,EDIAzG,KCJhC,EAA4CzI,MAA5C,CDIM,CCJiDF,ADIrD,EACE,KCLJ,EAAkEC,ADKvD,IAAI0I,KCLf,SDKW,CAAoB,KAAI,KAAKuB,gBAAL,CAAsBsB,KAAK,CAACvL,SAA5B,CAAuC,IAC5C,KAAKgK,aAAL,CAAmBuB,KAAK,CAACtL,MAAzB,CAAiC,IADpD,CAAP;AJzBF,AI2BF,aJ3BO,GAAL;AACA,AGCF,AEmBA,QAAI,GFnBC,EHDE,AKoBE+L,CFnBT,EHDE,EKoBE,KAAe,IAAnB,EAAyB,KAAKA,KAAL,GA3BmB,CA6B5C;AHFG,AFnBD,AGCA,ACyBF,SFPYpM,IFnBL,GAAL,OEmBC,CAAwBrB,EAAxB,EAA4B;AACjC,AFnBI,AGCA,AEoBF,ADKE,SFPGA,AGEAwB,EHFE,CAAC9F,AEOFuR,CJ1BC,AGCA7I,GHDL,AKqBF,GHFK,CAAW7E,AGEAmR,ADKF,GAAG,EDzBf,CAAkB,ACyBlB,CADF,CAEE,CCNuB,CAACxC,GFpBxB,CDkBG,CClBwB,CDkBG,CAAClM,CAAD,AGEhC,EHFoCC,AClBFF,AEoBE,MHFJ,AClB9B,CEoByC,CFpBD,GDkBM,AGEZ,EFpBWH,EDkBIK,MAAM,AClBvD,CDkBwDvG,CClBD,KAAKmG,CDkBX,CAAe,KAAf,EAAsB,CClBvE,EDkBiD,ACjB/B,CDiB0D,EAAzE,CAAP,CCjB2BD,QAAL,GAAgB,KAAK8D,UAAL,EADlC;ADmBL,AFnBK,EEqBN,WFrBW,GAAL;AACA,AGCA,AEmBF,ADME,WCNKuI,ELpBA,AI0BA,EDzBE,CHDP,CKoBW,ADMF3E,CCNG7K,ADMF,EDzBEkH,CCyBC,CAAb,CCNW,CAAb,ADMkB2D,CAAC,GAAG9O,MAApB,EAA4B8O,CAAC,CDzB7B,CCyBA,EA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IjH,GEkBC,CAACqH,AC1BX,GAAc,IAAd,CD0BI,CAAgB9H,EFlBhB,GEkBA,CAAJ,CFlB6B,CEmB3BqG,GFnBF,EAAmC,GEmBzB,GAAGzE,MAAM,CAACmG,SAAP,CAAiB/H,KAAjB,IAA0BlE,GAAG,CAACI,OAA9B,GAAwCJ,GAAG,CAACG,MAAvD,CADF,KAEK;AACHoK,AFpBA,AGRF,UD4BEA,KC5BK,CHQGhK,EEoBA,EFpBR,AGRU0O,CD4BCjP,GAAG,CAACG,MAAf,CC5BF;AD6BE,AFpBA,AKaJgb,IAAAA,MAAM,CAACM,GHOC,CAAC3V,AFpBA,CKaT,GAAe,EHOA,CAACoG,GFpBZ,AKaiB,EHOZ,CAAahI,KAAb,CAAL,EACEA,KAAK,GAAGA,KAAK,GAAG,CAAR,GAAY,KAAZ,GAAoB,MAA5B;AACH,AFtBkB3D,AGRrB,AEsBE,ADUJqU,EAAAA,GAAG,CAACD,IAAD,CCVM,CLdcpU,AIwBb,IJxBiB,CKcZ8H,ELde,EKc1B,ILdmB,AKcA,KAAK4S,QAAL,CAAc5P,OAAd,EAAuBC,SAAvB,EAAkCC,MAAlC,EAA0CjD,KAA1C,CAAnB,EACE6S,MAAM,CAAC7T,IAAP,CAAYe,IAAZ;AHQH,AFvBsC,AGPrC,ACgCF;AFDD,AC9BG,AEsBA8S,ADUF,GFvBwC,CAuB1C,EGVIA,EDUE,IDhCE,AEsBE,CFtBD,AEsBE7T,ADUAmE,ICVP,CFtBUE,AEsBE,GDUV,CCVF,GFtBK,CCgCe,EDhCA,ECgCtB,EAA4B,CDhCDwD,WAAL,CAAiBnK,KAAjB,CAAhB,MAA6CgC,SAAjD,EACE,OAHJ,CAIE;AHKE,AKgBH,ADUC,KCdF,MDcOoO,IJ1BE,EI0BP,CAAY,EJ1BV,GI0BeD,eAAL,GAAuB,KAAvB,GAA+B,OAA3C;AJ1BmB5U,AGJnB,YHImBA,AGJf,IHImB,CGJdyC,EHIiB,KGJ1B,EACE,EHGiB,KGHV,KAAKmN,cAAL,CAAoB,KAAKK,oBAAL,EAApB,CAAP;AD6BN,AF1ByC,AG3CvC,AE6DA,ADSE,SFDIjG,EGRC,ADSAkB,KCTK4P,CHQE,EECZ,GFDiB,AGRZ,ADSW,CCTCF,CHQb,EECJ,EFDuB5Q,CGRlB,CAAP,MHQiC,KAAKvK,GAAG,CAACK,MAArC,GACL,IAAI6J,OAAJ,CAAa,IAAGhG,KAAM,GAAtB,CADK,GAEL,IAAIgG,OAAJ,CAAa,IAAGhG,KAAM,MAAKqG,QAAS,EAApC,CAFF;AAGD,AGVE,ADSE,EFGL,CGnW6B,CAyV3B,CDEU,CAMR;AJ5BI,AGFJ,WAAO,KAAKiG,oBAAL,EAAP;AHEqBjQ,AGDtB,GAlU2B,CAoU5B,QHDuBA,IAAI,GAAG,EAAP;AE+BzB,AFlCQ,AKwBNmb,ADQE,ECRFA,OHUOlS,AEFA4L,ICRI,CAAC9M,CDQV,EFEJ,CAAkBsC,AEFA,CCRL,EAAQ,CHUrB,CEFuBuL,CFEC,YEFpB,CAPQ,CASR;AFCF,AF9BK,AKoBH,OLhRa,CA8PX,CE4BG,EGVE,EHUEtL,GGVGyQ,KHUP,CAAa1Q,IAAb,CAAP,EGVS,CAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqCtC,KAArC,CAAP;AHWH,AC/BC2E,AEqBC,ADSC,EFGJ,ACjCEA,CEvU2B,CA8V3B,IDOMgK,UAAU,GAAGtC,IAAI,GD9BG,CAAC3P,CC8BC,CAACmC,GD9BH,EAAQ,AC8BN,EAAQ+L,MAAR,KAAmB;AD7B7C,AEuBF,ADMiD+D,MAAAA,KD7BxCjS,KAAK,AC6B6C,CD7B5CzE,EC6B+C,ED7BrD,EC6BwC,EAAmBoU,CD7B5C,GAAf,AC6B+D,CAACxN,ED7B3C,GC6B0C,ED7BrCsJ,AC6B6CyC,MAAR,CAAvB,GD7BnB,CAAgBlO,KAAhB,CAArB,GAA8C,KAAKkI,cAAL,CAAoBlI,KAApB,CAArD;AHEE,AGDH,AC4ByF,GDnW9D,CAyU5B,CC0BuB,CAArB,IJ3BM,CAACzE,IAAL,EAAW;AE+BjB,AF9BQ,SE8BCmJ,YAAT,GAAwB;AACtB,AF9BM,AKoBNuR,ADME,ECNFA,MDMM,CFIC/R,CGVC,CAACmC,EDMEwJ,KCNH,EAAUvJ,CHUlB,EEJE,EAAqB,ICNf,EAAqBC,MAArB,EAA6BjD,KAA7B,EAAoC;AHW7C,AF9BO,AGDNmI,AEqBE,ADME,EFMN,ACjCEA,QC2BQ,ED3BE,CAACzL,KAAD,EAAQ;AHEZ,AGDJ,AEqBAqG,ADKQ,ICLRA,IFrBIrG,GEqBG,CLpBCvB,CGDC,CAAClD,AEqBA8K,CDKK,GD1BX,EC0BgBmJ,CCLH,EFrBE,EHCE,AKoBA,CFrBrB,EACE,CHAwB,CAAC,GIyBZ,CAAmBI,CDzBzB,ECyBM,CAAuBqC,EDzBxBrI,EHAyBtK,IAAZ,AGAlB,CHAmCZ,AGAtB,CCyBP,CAAP,GJzBmB,CAAD,CKoBI2H,GLpBwB,IKoBjC,CAArB,GLpB8D/G,IAAR,CAAaZ,GGApBsB,EHAO,CAAlD,EACE,AGD8C,CAACzE,IAAK,EHC7CsE,AGDJ,EAAoDG,KAApD,CAAP,CAFc,CAGhB,OHA8B,CAAC,IAAD,CAAxB,CADF,KAGE,OAAO,KAAKrB,MAAL,GAAcD,KAArB;AACH,AKiBH4H,ADIoD,ICJpDA,GLxRa,AI4RX,CJnBA,AIoBA,KCLO,EDKAnE,CCLGmE,IDKV,EAAc,GCLK,IAAI,6BAASA,SAAT,CAAzB;AHWJ,AC9BI,AEoBAC,ADIkB,ICJlBA,KHUKlD,AC9BAuD,CEoBC,GHUV,AGVaL,CHUCF,CC9BV,GAAc,CEoBC,EHUnB,EAAuBC,AC9BAG,AEoBA,QFpBnB,CD8BJ,CC9BiC,CD8BCF,IC9BIE,ED8BtC,EAA0CnD,IC9BT,CD8BjC,EAAiD,AC9BA,GEoBjBiD,CFpB5B,KEoBmB,CAAnB;AHWF,AC9BE,AEoBAjD,ADG8C,ICH9CA,KHUK,AGVA,EFpBE,CEoBCA,CHUCkD,GC9BGyD,CD8BP,AGVQ,CHUC5D,GGVG,IHUZ,EAAkBC,CC9BvB,QD8BK,EAA6BC,MAA7B,EAAqCjD,IGVhBA,CHUrB,CAAP,GGVmB,CAAjB;AHWH,AF3BK,AGHH,ACuBE,GDvWyB,CAkV5B,QHCUtD,KAAK,GAAG;AAAEhB,AKkBlB,QLlBkBA,EKkBZyP,ELlBgB,EAAEzP,CKkBb,GLlBK,AKkBF,EAAd;ALlB8BzD,AKkB9B,ADGA0W,IAAAA,IJrB8B1W,EKkBZuX,ELlBgB,EAAEvX,AIqB1B,ECHc,ELlBR,AIqBF0W,CCHa,KAAKiD,IDGR,EAAxB,ICH2B,CAAgB5R,KAAhB,CAA3B;ALlB0CpE,AGA5CsL,AEkBE,ADID,EDtBDA,MHA4CtL,EKkBSyW,GLlBJ,AKkBO,ELlBLzW,CKkBQ,ILlBzC,AGAA,CAACc,AEkB6CyS,IAA9D,CFlBgB,EAAQ;AHAgCtT,AGCxD,QHDwDA,AGCpDa,KAAK,CHDqD,AGCpDzE,EHDsD4D,EGC5D,KAAe,GAAnB,EAAwB;AHDR,AGEd,AEiBF,ADnV0B,EAyV9B,KJzBM,CKmBEwX,GFjBGlQ,IEiBP,EAAamQ,EFjBX,GAAgB,IAAhB,AEiBF,EAAwBC,WAAxB,EAAqCC,QAArC,CAR0C,CAU1C;ALpBEtY,AGEA,MHFAA,OGEO,CHFC,CAAC,GGEG6M,CHFJ,EAAOrL,KAAP,CAAR,SGEO,CAAwBA,KAAxB,CAAP;AHDA,AGED,AEkBD,KFrBA,GEqBImV,GLpBGlV,AGGF,KEiBO,CAACoG,OLpBX,AKoBU,CAAR,ELpBmBrG,EKoBI,EAAE4W,CLpB3B,QKoBoC,GAAKjB,GAAG,CAACtP,OAAD,CAAnB,CAAvB,IACA8O,QAAQ,CAAC7O,SAAD,CAAR,IAAuB,EAAEuQ,WAAW,GAAGlB,GAAG,CAACrP,SAAD,CAAnB,CADvB,IAEA6O,QAAQ,CAAC5O,MAAD,CAAR,IAAuB,EAAEuQ,QAAQ,GAAMnB,GAAG,CAACpP,MAAD,CAAnB,CAF3B,EAGE,OAAOkI,KAAP;ALtBA,AGGA,WHHK9O,AGGA+G,UAAL,GAAkB,EHHlB,EGGA,CHHuBnL,IAAvB,CA7QW,CA8QX;AGGA,AEoBF,SAAK,IFpBI,EEoBEwb,GFpBG7O,IEoBd,IAAsB4K,MFpBb,AEoBT,CFpB6B9S,CEoBC,IFpBrB,CAAP;AHFAtB,AGGD,AEoBC,ADFN,MJrBMA,GIqBGsS,EJrBE,GAAGtS,KAAK,CAACU,MAAN,AIqBd,CJrB2BK,AIqBAyS,SAA3B,EJrBsC,AIqBA,IJrBI1S,KAAK,CAAC,CAAD,CAAL,CAASH,MAArC,EAA6CX,KAAK,CAACW,MAAnD,CAAR;AACD,AGGF,AEoBG,ADFJ,GD9W4B,CA8V5B,CHzRwC,CAsRtC,IKqBMsX,OAAO,GAAG7D,MAAM,CAACiE,OAAD,CAApB,EAA+B;AAC7B,ADFN,MAAI7I,MAAM,GAAGa,iBAAiB,CAACmD,SAAD,CAA9B;ACGM,YAAI0E,SAAJ,EAAe;ALtBnB,AGGFvL,AEoBQ,ADHR,EDjBAA,ICiBI6C,MAAM,CJpBCrO,CKuBCiX,GDHG9U,GDjBG,CAAChC,CEoBX,EACE,EFrBQ,ACiBlB,EDjB0B,ACiBA,EJpBxB,CAA2BE,IAA3B,EAAiC;AAAE1B,AGInC,AEqBQ,ADJR,MJrBmCA,EGI/BwB,KAAK,CHJkC,AGIjCzE,CHJkC2E,EKyB/B2T,CFrBT,CHJ4C,CAAC1T,GGI9B,GAAnB,EACE,CEoBM,CAAkBwW,ELzBkB,CAAkB,EGKrD,EEoBwB,CAAClB,ELzBmC1W,AGKvD2M,IHLgD,CAAYhN,AKyBlE,EAAmCoY,GLzBmB,EAAmB,CAAnB,CAAlB,CAAD,AKyBnC,CLzB2B,CKyBkBF,QFpB5C,CAA+B5W,AEoBhC,EAAwD6W,GFpBvD,CAAP,CAFsB,CAIxB,KEkBQ,EACkB,QADlB,EAC4B,SAD5B,EACuC,WADvC,EACoDE,OADpD,EAC6D,IAD7D,EACmEtI,KADnE,EAFF,KAKE;AL5BgF,AK6BhF,ADPR,QAAIyD,SCOS2B,ADPA,CAACxU,MAAV,KCOI,ADPiB,CCOCsX,ADP1B,EAA4B,KCOK,CAAC5D,QAA1B,EAAoC6D,SAApC,EAA+CC,WAA/C,EAA4D,IAA5D,EACkB,SADlB,EAC6B,WAD7B,EAC0C,QAD1C,EACoDE,OADpD,EAC6D,IAD7D,EACmEtI,KADnE;AL5BT,AGOC,AEuBK,ADRHP,GJ5VuB,CAwU3B,EIoBIA,EDfE,CEcA,GDCI,CDfCzH,EEwBA,ADTEyL,ICSE2E,EFxBT,GCegB,CAAC1E,CDfC,IAAtB,AEwBS,EFvBP,AEwBI,GDVK,CAAqB,CDdzBxG,ACcI,EAAwByG,GDdjC,CAAW,ICcF,CDdO3L,ACc0B,EAAjC,CAAT,KDdA,EAA0B,KAAKC,UAA/B,EAA2C,KAAKC,OAAhD,EAAyD,KAAKC,MAA9D,EANsB,CAQxB;AEuBM,ADVJsH,MAAAA,MAAM,GCUG2F,ADVA,UAAUzU,ECUf,CAAkBuX,GDVb,CAAiB,CAAjB,ECUoB,ADVA,CCUCnB,GDVGtH,MAAM,CCUnC,ADVoC7O,ECUEwX,IDVjC,IAAyC3I,GCU9C,EAAmD4I,CDVvD,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,EF7BA,KAAK6B,AE6BN,EAAU5B,SAAV,EAAqBC,CF7BpB,CAAoBvG,IE6BrB,CF7BC,CAAP,AE6BmCsD,KAA7B,EAAoC;AFpC5C,AEqCA;ALnCFxD,AGOC,AE6BCuG,ELpCFvG,CGvX4B,CAgY5B,AE2BEuG,OAAO,GAAGA,CLpCC,CAAC3H,KAAD,AKoCM,ELpCE,EKoCE,6BAAS2H,OAAT,CAArB;ALnCA,AKoCAC,IAAAA,SAAS,GAAGA,SAAS,IAAI,6BAASA,SAAT,CAAzB;ALnCA,AKoCAC,IAAAA,ILpCI7H,EKoCE,GLpCG,AKoCA6H,CLpCClH,KKoCK,CLpCX,GKoCe,CLpCC,CAApB,EAAuB,yBKoCKkH,MAAT,CAAnB;ALnCE,AGOJmE,AE6BEpH,EF7BFoH,EE6BEpH,KAAK,GAAGA,GF7BG,CAACtD,CE6BC,IF7BF,AE6BM,EF7BE,2BE6BOsD,KAAT,CAAjB;ALnCE,AGOF,QAAIlD,IHPIa,AGOA,GAAG,IHPI,AGOf,GHPkBvC,KAAK,CAACc,KAAN,CAAY,mBAAZ,EAAiC,CAAjC,CAAhB;AACA,AGMF,AE8BA,QF9BsC,EE8BhCsT,ELpCE5R,IKoCI,GAAG,KAAKgU,CLpCC,GAAGjU,MKoCT,CLpCgB,AKoCAqC,CLpCCjE,IKoCjB,CAAf,CLpCE,CAHqB,CAKrB;AGKEyM,AE6BJ,IF7BIA,IAAI,EE6B+B6J,CF7B5B,EE6B+B,EF9B1C,CE8B6C,KAAKlD,IAAlD;ALjCE,AGGF,QACsC,EHJhCtR,UAAU,GAAGC,IAAI,CAACC,GAAL,CAAS,KAAK/C,kBAAd,EAAkC4C,aAAlC,CAAjB;AGKE6K,AE6BJ,IF7BIA,IAAI,AE6BJkJ,GF7BO,EE6BF,GF7BOvK,AE6BJ,CAAZ,YF/BA,CADmB,CAGmB;AHJpC,AKiCF,QAAeiM,KLjCN,CAACxV,CKiCV,SLjCoB,GAAGzC,KAAK,CAAC4C,OAAN,CAAcL,OAAd,EAAuBE,UAAvB,CAAd,IAAoD,CAA3D,EAA8D;AAC5D,AGIJ,AE4BA,QAAwByV,EF5BlB5K,OE4BN,KF5BkB,GAAG,KAAKvF,QAA1B;AHHI,AGGJ,AE4BA,QAAmCoQ,EF5BG,EHH9BtV,OK+BR,OL/BsB,GAAG,CAArB;AGIA0K,AE2BJ,IF3BIA,IE2B4C6K,CF3BvC,GAAG,IE2BZ,CF3BiBzP,AEmB2B,CAU5C,YF9BA;AHFI,AGEJ,UACsC,KHH3B3I,KAAK,CAACyC,UAAU,GAAGI,cAAb,GAA8B,CAA/B,CAAL,KAA2C,IAAlD,EACEA,cAAc,GAJ4C,CAM5D;AACA,AGAA2K,AE6BJ,IF7BIA,IE6BAiJ,EF7BM,GAAGlJ,GE6BD,CAAC5F,CF7BK,CAAC4F,KAAK,AE6BZ,CF7Ba5M,AE6BrB,IAAuB,EF7BR,AE6BUuX,GF7BK,CAAhB,CAFlB,CAJmB,CAMmB,EE6BA,GAAKjB,GAAG,CAACtP,OAAD,CAAnB,CAAvB,IACA8O,QAAQ,CAAC7O,SAAD,CAAR,IAAuB,EAAEuQ,WAAW,GAAGlB,GAAG,CAACrP,SAAD,CAAnB,CADvB,IAEA6O,QAAQ,CAAC5O,MAAD,CAAR,IAAuB,EAAEuQ,QAAQ,GAAMnB,GAAG,CAACpP,MAAD,CAAnB,CAF3B,EAGE,OAAO,CAAP;;AF9BF,AEgCA,SAAK,GFhCGvG,GEgCG+W,EFhCE,CAACxb,IAAd,AEgCA,IAAsBuX,MAAtB,EAA8B;ALjC1B,AGEJ,AEgCE,WFhCG,CHFGvR,EGER,YHFsB,GAAG,CAAjB,KAAuB,CAA3B,EAA8B;AAC5B,AGEJ,AEgCA,UAAIoV,OAAO,GAAG7D,MAAM,CAACiE,OAAD,CAApB,EAA+B;ALjC3B,AGEJ,AEgCE,aFhCG9N,GHFKzH,GAAG,GAAG9C,GGEhB,CAAkB,CHFG,CAAC+C,KGEtB,EAA2B,EHFX,CAAgBP,EGEA0F,MAAhC,EACkBkF,GHHF,CGGM,CHHyB3K,EGGtB,KAAKoJ,GHHd,CAAZ,MGGqB,EADzB,EAC4C,KAAK4B,SADjD,EAEkB,KAAK1F,QAAL,GAAgBrG,IAAI,GAAG,KAAKmK,UAAL,EAFzC;AHDI,AKkCF,YAAIlE,ILlCI3E,GKkCR,ELlCa,AKkCA,GLlCGF,GAAG,CAACG,KAAJ,CAAU,YAAV,EAAwBtC,MAAxB,GAAiC,CAA/C;AACA,AGGJ0M,AE+BI,QF/BJA,IAAI,EE+BIxF,CF/BD,CHHG9G,IGGE+K,AE+BR,EACE,KLnCe,GAAGrJ,QGGxB,EHHkC,GAAGD,aAAjC,CAJ4B,CAK5B;AGGJ,AEgCM+T,YAAAA,KAAK,IAAI,KAAKD,aAAL,CAAmB2B,OAAO,CAAClB,OAA3B,EAAoCqB,QAApC,EAA8CF,SAA9C,EAAyDC,WAAzD,CAAT,CAFF,KAIE;ALpCF,AKqCE5B,YAAAA,ELrCE/T,GKqCG,IAAI,KAAK8T,CLrCC,KAAK,CAAlB,IAAuBtT,EKqChB,CAAmBiV,ELrCE,KAAK,AKqCA,CLrCjC,AKqCkC5D,ILpClC7R,IKoCO,EAAqC0V,OLpC/B,EKoCN,EAAgDC,CLpCrC,CAAlB,IAAuB,KAAK/Y,AKoCrB,EAA6DgZ,OLrCxE,CKqCW,CLnCT,AKmCA;ALlCF,AGAN,AEmCK,SAPD,EF5BC,GAAL,CHAW7X,AKoCF,IAAIqH,CLpCP,IAAc5E,IKoCX,CLpCH,CKoCkB;ALnClB,AGAJ,AEoCI,iBLpCO;AAAExC,AGCb,AEoCI+V,UAAAA,ELrCS/V,CGCR+J,EEoCI,ELrCS,EAAE,AKqCP,KLrCYrJ,AKqCPoV,CFpClB,CAAkB,MAAlB,CHDoB,CAAexT,AGCT,GHDN,AKqCP,CLrCF,AKqCqBmV,CFpCD/P,MAA/B,AEoCuC,CAAC4O,CFnCtB1J,IAAI,GAAG,EEmCZ,EAAuC+K,CFnCtBtM,UAAL,AEmCZ,EFpCb,AEoCiEuM,EFnCrB,KAAK3K,CEmCpC,EAA8DyK,MFpC3E,EAC4D,CEmC/C,CAAT,GFnC6DnM,OADjE;AHDyChL,AKsCtC,SAHI,GLnCkCA,GKuClC;ALvCI,AGGX,AEqCI,WLxCA,EGGCgH,QAAL,GAAgB,IAAhB;AHFG,AGGH,AEqCIwO,UAAAA,KAAK,IAAI,KAAKD,aAAL,CAAmB2B,OAAO,CAAClB,OAA3B,EAAoCqB,QAApC,EAA8CF,SAA9C,EAAyDC,WAAzD,CAAT;AACD;ALxCD1V,AGGJ,AEsCG,QLzCCA,GGGC,GAAL,IHHc;AACX,AGGD,AEsCD;AFrCC,aAAKsI,eAAL,GAFF,CAGE;AHJA,AGKA,AEoCF,WLzCOnL,AKyCA2W,KAAP,aLzCE,GAA0BvW,KAAK,CAACW,MAAN,GAAe6B,aAAf,GAA+B,CAAzD;AACD,AKyCF,GAlc0B,CAoc3B;AACA;AL3CE,AGIE,WHJK,CGID+K,KAAK,CAAC5M,MAAN,KAAiB,CAAjB,IAAsB4M,KAAK,CAACA,KAAK,CAAC5M,MAAN,GAAe,CAAhB,CAAL,CAAwB9D,IAAxB,KAAiC,MAA3D,EACE,KAAKoQ,KAAL,CAAW,KAAKlF,QAAhB,EAA0B,KAAKC,UAA/B,EAA2C,KAAKC,OAAhD,EAAyD,KAAKC,MAA9D,EANJ,CAOE;AHNO1H,MAAAA,KAAK,EAAE,EAAT;AAAaO,AGOlB,AEqCJyX,EAAAA,IL5CsBzX,GK4Cf,CAACjB,EFrCA,KHPyB,AGOpBkI,CEqCN,CL5C4B,CK4CjBL,OFrCV,AEqCD,EAAoBC,GFrCC,IAAxB,EAA8B,AEqC3B,EAA+BC,MAA/B,EAAuCjD,KAAvC,EAA8C;AL5C5C,AGQH,AEqCJ,KL7CA,IK6CK6T,IAAL,CAAU9T,IAAI,IAAI;AL5CnB,AGQK0I,AEqCFvN,GL/auB,CAoY3B,EK2CIA,IFrCEuN,IAAI,AEqCE,CAAC1I,EFrCA,EEqCD,CAAR,EFrCc6E,cAAZ,CAF4B,CAG5B;AEqCF,aAAO,KAAP;AFpCE,AEqCH,KAHD,EAGG7B,OFrCK,AEkCR,EAGYC,GFrCCG,MEkCb,EFlCQ,AEqCeF,KFrCG,CEkC1B,EAG+BjD,EFrCAmH,GEkC/B,IFlCI,EACE,OAAOsB,IAAP;AHRR5L,AGSK,AEoCJ,EL7CDA,CK9Z2B,CA6c3B,KF5CI,CAOA,IHVQ,CAACyB,KAAD,EAAQ;AAClB,AGEE,AE6CJ,SL/COjD,IGUE,EHVP,GAAc,IAAd;AACA,AGUIoN,AEqCN,UL/CQlK,EGUFkK,CHVK,GAAG,AGUJ,GAAG,CHVKjK,IGUA0J,CHVJ,CAAW,eAAc5J,GGU1B,EHVgC,AGUvC,CADG,CAEH,WHXmD,KAAK3C,KAAM,GAAtD,CAAZ;AACA4C,IAAAA,GAAG,CAACE,OAAJ,GAAc;AACZ/B,AGUE,MHVFA,KAAK,EAAEgC,GGUD,KAAK2E,CHXC,MGWN,KAAiB,KAAK8D,OAA1B,EACE,OAAOsB,IAAP;AHVJ/M,AGWC,AEkCL0P,EAAAA,IL7CI1P,CK6CC,CAACR,EL7CE,CGVN,CHUQ,AGYN,IEiCC,CL7CUS,CK6CCoH,IL/CA,GK+CX,EAAoBC,SAApB,EAA+BC,MAA/B,EAAuCjD,KAAvC,EAA8C;AL5C/CrD,AK6CF,ML7CEA,EK6CEkX,IAAI,GAAG,IL7CI,CK6Cf,CL7CiB,KAAKlX;AAHR,AKiDd,KLjDA,KKiDMyO,KAAK,GAAG,CAAC,KAAKyI,IAAL,CAAU9T,IAAI,IAAI;AL5CjC,AGUEyI,AEmCAqL,MAAAA,EFnCArL,EEmCI,CL7CCjK,CGUD,CEmCG,CL7CT,CGUS,EEmCP,GFnCY4I,OAAZ;AHTH,AGUG,AEmCA,GL3buB,CAgZ3B,SK2CW,CAACjM,QAAQ,CAAC6E,IAAD,CAAhB;ALzCJ,AK0CG,KAHc,EAGZgD,OAHY,EAGHC,SAHG,EAGQC,MAHR,EAGgBjD,KAHhB,CAAf;ALtCF,AGME,AEoCA,WFpCK,AEoCE6T,IAAI,IAAIzI,CFpCf,IEoCA;AFnCE,AEoCH,GAvd0B,CAyd3B;AFrCI,AEsCJ,YFtCQ1O,KAAK,CAACb,MAAN,CAAaE,MAAb,KAAwB,CAA5B,EAA+B;AHPnC4C,AGQM,AEsCN,EL9CAA,QAAQ,CAACvD,IGQEsM,CHRH,EAAQxM,QAAR,EAAkB,AGQpB,GAAqBwB,KAAK,CAACd,KAA3B;AHPJ,AGQI6M,SHRC9M,CGQD8M,IHRJ,AGQQ,GHRK,AGQF,CHRX,CADwB,CAGxB,EGMgBK,2BAAZ;AACD,SAHD,CAIA;AHPF,AGGE,AEwCJ+K,EAAAA,IAAI,CAAC3Y,CL3CC,KGQG,EHRIE,AK2CT,EAAW2H,GL3CT,IK2CF,CL3CmB,CK2CCC,OL3CtB,EAA+B,AK2C7B,EAA+BC,MAA/B,EAAuCjD,KAAvC,EAA8C;AL1C9C,AGQElD,AEmCJ,WL3COzB,CGQHyB,IAAI,CHRN,EGQS,CHRK1B,IGQAwM,CHRd,CAD6B,CAE7B,KGOS,CAAclL,KAAK,CAACd,KAApB,EAA2B,KAAKoL,UAAL,CAAgBtK,KAAK,CAACb,MAAtB,CAA3B,CAAP;AACA4M,AEmCJ1F,IAAAA,OAAO,CFnCH0F,EEmCM1F,EFnCF,GAAG,EEmCM,GFnCDmF,CEmCK,mBFnCV,EAAP,QEmC0BnF,OAAT,CAArB;AL1CE,AGQC,AEmCH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","file":"src.b20bf42d.js","sourceRoot":"..","sourcesContent":["const RDF  = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',\r\n    XSD  = 'http://www.w3.org/2001/XMLSchema#',\r\n    SWAP = 'http://www.w3.org/2000/10/swap/';\r\n\r\nexport default {\r\n  xsd: {\r\n    decimal: `${XSD}decimal`,\r\n    boolean: `${XSD}boolean`,\r\n    double:  `${XSD}double`,\r\n    integer: `${XSD}integer`,\r\n    string:  `${XSD}string`,\r\n  },\r\n  rdf: {\r\n    type:       `${RDF}type`,\r\n    nil:        `${RDF}nil`,\r\n    first:      `${RDF}first`,\r\n    rest:       `${RDF}rest`,\r\n    langString: `${RDF}langString`,\r\n  },\r\n  owl: {\r\n    sameAs: 'http://www.w3.org/2002/07/owl#sameAs',\r\n  },\r\n  r: {\r\n    forSome: `${SWAP}reify#forSome`,\r\n    forAll:  `${SWAP}reify#forAll`,\r\n  },\r\n  log: {\r\n    implies: `${SWAP}log#implies`,\r\n  },\r\n};\r\n","/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\r\nlet promise\r\n\r\nmodule.exports = typeof queueMicrotask === 'function'\r\n  ? queueMicrotask.bind(typeof window !== 'undefined' ? window : global)\r\n  // reuse resolved promise, and allocate it lazily\r\n  : cb => (promise || (promise = Promise.resolve()))\r\n    .then(cb)\r\n    .catch(err => setTimeout(() => { throw err }, 0))\r\n","// **N3Lexer** tokenizes N3 documents.\r\nimport namespaces from './IRIs';\r\nimport queueMicrotask from 'queue-microtask';\r\n\r\nconst { xsd } = namespaces;\r\n\r\n// Regular expression and replacement string to escape N3 strings\r\nconst escapeSequence = /\\\\u([a-fA-F0-9]{4})|\\\\U([a-fA-F0-9]{8})|\\\\([^])/g;\r\nconst escapeReplacements = {\r\n  '\\\\': '\\\\', \"'\": \"'\", '\"': '\"',\r\n  'n': '\\n', 'r': '\\r', 't': '\\t', 'f': '\\f', 'b': '\\b',\r\n  '_': '_', '~': '~', '.': '.', '-': '-', '!': '!', '$': '$', '&': '&',\r\n  '(': '(', ')': ')', '*': '*', '+': '+', ',': ',', ';': ';', '=': '=',\r\n  '/': '/', '?': '?', '#': '#', '@': '@', '%': '%',\r\n};\r\nconst illegalIriChars = /[\\x00-\\x20<>\\\\\"\\{\\}\\|\\^\\`]/;\r\n\r\nconst lineModeRegExps = {\r\n  _iri: true,\r\n  _unescapedIri: true,\r\n  _simpleQuotedString: true,\r\n  _langcode: true,\r\n  _blank: true,\r\n  _newline: true,\r\n  _comment: true,\r\n  _whitespace: true,\r\n  _endOfFile: true,\r\n};\r\nconst invalidRegExp = /$0^/;\r\n\r\n// ## Constructor\r\nexport default class N3Lexer {\r\n  constructor(options) {\r\n    // ## Regular expressions\r\n    // It's slightly faster to have these as properties than as in-scope variables\r\n    this._iri = /^<((?:[^ <>{}\\\\]|\\\\[uU])+)>[ \\t]*/; // IRI with escape sequences; needs sanity check after unescaping\r\n    this._unescapedIri = /^<([^\\x00-\\x20<>\\\\\"\\{\\}\\|\\^\\`]*)>[ \\t]*/; // IRI without escape sequences; no unescaping\r\n    this._simpleQuotedString = /^\"([^\"\\\\\\r\\n]*)\"(?=[^\"])/; // string without escape sequences\r\n    this._simpleApostropheString = /^'([^'\\\\\\r\\n]*)'(?=[^'])/;\r\n    this._langcode = /^@([a-z]+(?:-[a-z0-9]+)*)(?=[^a-z0-9\\-])/i;\r\n    this._prefix = /^((?:[A-Za-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)?:(?=[#\\s<])/;\r\n    this._prefixed = /^((?:[A-Za-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)?:((?:(?:[0-:A-Z_a-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~])(?:(?:[\\.\\-0-:A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~])*(?:[\\-0-:A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~]))?)?)(?:[ \\t]+|(?=\\.?[,;!\\^\\s#()\\[\\]\\{\\}\"'<>]))/;\r\n    this._variable = /^\\?(?:(?:[A-Z_a-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:[\\-0-:A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)(?=[.,;!\\^\\s#()\\[\\]\\{\\}\"'<>])/;\r\n    this._blank = /^_:((?:[0-9A-Z_a-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)(?:[ \\t]+|(?=\\.?[,;:\\s#()\\[\\]\\{\\}\"'<>]))/;\r\n    this._number = /^[\\-+]?(?:(\\d+\\.\\d*|\\.?\\d+)[eE][\\-+]?|\\d*(\\.)?)\\d+(?=\\.?[,;:\\s#()\\[\\]\\{\\}\"'<>])/;\r\n    this._boolean = /^(?:true|false)(?=[.,;\\s#()\\[\\]\\{\\}\"'<>])/;\r\n    this._keyword = /^@[a-z]+(?=[\\s#<:])/i;\r\n    this._sparqlKeyword = /^(?:PREFIX|BASE|GRAPH)(?=[\\s#<])/i;\r\n    this._shortPredicates = /^a(?=[\\s#()\\[\\]\\{\\}\"'<>])/;\r\n    this._newline = /^[ \\t]*(?:#[^\\n\\r]*)?(?:\\r\\n|\\n|\\r)[ \\t]*/;\r\n    this._comment = /#([^\\n\\r]*)/;\r\n    this._whitespace = /^[ \\t]+/;\r\n    this._endOfFile = /^(?:#[^\\n\\r]*)?$/;\r\n    options = options || {};\r\n\r\n    // In line mode (N-Triples or N-Quads), only simple features may be parsed\r\n    if (this._lineMode = !!options.lineMode) {\r\n      this._n3Mode = false;\r\n      // Don't tokenize special literals\r\n      for (const key in this) {\r\n        if (!(key in lineModeRegExps) && this[key] instanceof RegExp)\r\n          this[key] = invalidRegExp;\r\n      }\r\n    }\r\n    // When not in line mode, enable N3 functionality by default\r\n    else {\r\n      this._n3Mode = options.n3 !== false;\r\n    }\r\n    // Don't output comment tokens by default\r\n    this._comments = !!options.comments;\r\n    // Cache the last tested closing position of long literals\r\n    this._literalClosingPos = 0;\r\n  }\r\n\r\n  // ## Private methods\r\n\r\n  // ### `_tokenizeToEnd` tokenizes as for as possible, emitting tokens through the callback\r\n  _tokenizeToEnd(callback, inputFinished) {\r\n    // Continue parsing as far as possible; the loop will return eventually\r\n    let input = this._input;\r\n    const outputComments = this._comments;\r\n    while (true) {\r\n      // Count and skip whitespace lines\r\n      let whiteSpaceMatch, comment;\r\n      while (whiteSpaceMatch = this._newline.exec(input)) {\r\n        // Try to find a comment\r\n        if (outputComments && (comment = this._comment.exec(whiteSpaceMatch[0])))\r\n          callback(null, { line: this._line, type: 'comment', value: comment[1], prefix: '' });\r\n        // Advance the input\r\n        input = input.substr(whiteSpaceMatch[0].length, input.length);\r\n        this._line++;\r\n      }\r\n      // Skip whitespace on current line\r\n      if (!whiteSpaceMatch && (whiteSpaceMatch = this._whitespace.exec(input)))\r\n        input = input.substr(whiteSpaceMatch[0].length, input.length);\r\n\r\n      // Stop for now if we're at the end\r\n      if (this._endOfFile.test(input)) {\r\n        // If the input is finished, emit EOF\r\n        if (inputFinished) {\r\n          // Try to find a final comment\r\n          if (outputComments && (comment = this._comment.exec(input)))\r\n            callback(null, { line: this._line, type: 'comment', value: comment[1], prefix: '' });\r\n          callback(input = null, { line: this._line, type: 'eof', value: '', prefix: '' });\r\n        }\r\n        return this._input = input;\r\n      }\r\n\r\n      // Look for specific token types based on the first character\r\n      const line = this._line, firstChar = input[0];\r\n      let type = '', value = '', prefix = '',\r\n          match = null, matchLength = 0, inconclusive = false;\r\n      switch (firstChar) {\r\n      case '^':\r\n        // We need at least 3 tokens lookahead to distinguish ^^<IRI> and ^^pre:fixed\r\n        if (input.length < 3)\r\n          break;\r\n        // Try to match a type\r\n        else if (input[1] === '^') {\r\n          this._previousMarker = '^^';\r\n          // Move to type IRI or prefixed name\r\n          input = input.substr(2);\r\n          if (input[0] !== '<') {\r\n            inconclusive = true;\r\n            break;\r\n          }\r\n        }\r\n        // If no type, it must be a path expression\r\n        else {\r\n          if (this._n3Mode) {\r\n            matchLength = 1;\r\n            type = '^';\r\n          }\r\n          break;\r\n        }\r\n        // Fall through in case the type is an IRI\r\n      case '<':\r\n        // Try to find a full IRI without escape sequences\r\n        if (match = this._unescapedIri.exec(input))\r\n          type = 'IRI', value = match[1];\r\n        // Try to find a full IRI with escape sequences\r\n        else if (match = this._iri.exec(input)) {\r\n          value = this._unescape(match[1]);\r\n          if (value === null || illegalIriChars.test(value))\r\n            return reportSyntaxError(this);\r\n          type = 'IRI';\r\n        }\r\n        // Try to find a nested triple\r\n        else if (input.length > 1 && input[1] === '<')\r\n          type = '<<', matchLength = 2;\r\n        // Try to find a backwards implication arrow\r\n        else if (this._n3Mode && input.length > 1 && input[1] === '=')\r\n          type = 'inverse', matchLength = 2, value = '>';\r\n        break;\r\n\r\n      case '>':\r\n        if (input.length > 1 && input[1] === '>')\r\n          type = '>>', matchLength = 2;\r\n        break;\r\n\r\n      case '_':\r\n        // Try to find a blank node. Since it can contain (but not end with) a dot,\r\n        // we always need a non-dot character before deciding it is a blank node.\r\n        // Therefore, try inserting a space if we're at the end of the input.\r\n        if ((match = this._blank.exec(input)) ||\r\n            inputFinished && (match = this._blank.exec(`${input} `)))\r\n          type = 'blank', prefix = '_', value = match[1];\r\n        break;\r\n\r\n      case '\"':\r\n        // Try to find a literal without escape sequences\r\n        if (match = this._simpleQuotedString.exec(input))\r\n          value = match[1];\r\n        // Try to find a literal wrapped in three pairs of quotes\r\n        else {\r\n          ({ value, matchLength } = this._parseLiteral(input));\r\n          if (value === null)\r\n            return reportSyntaxError(this);\r\n        }\r\n        if (match !== null || matchLength !== 0) {\r\n          type = 'literal';\r\n          this._literalClosingPos = 0;\r\n        }\r\n        break;\r\n\r\n      case \"'\":\r\n        if (!this._lineMode) {\r\n          // Try to find a literal without escape sequences\r\n          if (match = this._simpleApostropheString.exec(input))\r\n            value = match[1];\r\n          // Try to find a literal wrapped in three pairs of quotes\r\n          else {\r\n            ({ value, matchLength } = this._parseLiteral(input));\r\n            if (value === null)\r\n              return reportSyntaxError(this);\r\n          }\r\n          if (match !== null || matchLength !== 0) {\r\n            type = 'literal';\r\n            this._literalClosingPos = 0;\r\n          }\r\n        }\r\n        break;\r\n\r\n      case '?':\r\n        // Try to find a variable\r\n        if (this._n3Mode && (match = this._variable.exec(input)))\r\n          type = 'var', value = match[0];\r\n        break;\r\n\r\n      case '@':\r\n        // Try to find a language code\r\n        if (this._previousMarker === 'literal' && (match = this._langcode.exec(input)))\r\n          type = 'langcode', value = match[1];\r\n        // Try to find a keyword\r\n        else if (match = this._keyword.exec(input))\r\n          type = match[0];\r\n        break;\r\n\r\n      case '.':\r\n        // Try to find a dot as punctuation\r\n        if (input.length === 1 ? inputFinished : (input[1] < '0' || input[1] > '9')) {\r\n          type = '.';\r\n          matchLength = 1;\r\n          break;\r\n        }\r\n        // Fall through to numerical case (could be a decimal dot)\r\n\r\n      case '0':\r\n      case '1':\r\n      case '2':\r\n      case '3':\r\n      case '4':\r\n      case '5':\r\n      case '6':\r\n      case '7':\r\n      case '8':\r\n      case '9':\r\n      case '+':\r\n      case '-':\r\n        // Try to find a number. Since it can contain (but not end with) a dot,\r\n        // we always need a non-dot character before deciding it is a number.\r\n        // Therefore, try inserting a space if we're at the end of the input.\r\n        if (match = this._number.exec(input) ||\r\n            inputFinished && (match = this._number.exec(`${input} `))) {\r\n          type = 'literal', value = match[0];\r\n          prefix = (typeof match[1] === 'string' ? xsd.double :\r\n                    (typeof match[2] === 'string' ? xsd.decimal : xsd.integer));\r\n        }\r\n        break;\r\n\r\n      case 'B':\r\n      case 'b':\r\n      case 'p':\r\n      case 'P':\r\n      case 'G':\r\n      case 'g':\r\n        // Try to find a SPARQL-style keyword\r\n        if (match = this._sparqlKeyword.exec(input))\r\n          type = match[0].toUpperCase();\r\n        else\r\n          inconclusive = true;\r\n        break;\r\n\r\n      case 'f':\r\n      case 't':\r\n        // Try to match a boolean\r\n        if (match = this._boolean.exec(input))\r\n          type = 'literal', value = match[0], prefix = xsd.boolean;\r\n        else\r\n          inconclusive = true;\r\n        break;\r\n\r\n      case 'a':\r\n        // Try to find an abbreviated predicate\r\n        if (match = this._shortPredicates.exec(input))\r\n          type = 'abbreviation', value = 'a';\r\n        else\r\n          inconclusive = true;\r\n        break;\r\n\r\n      case '=':\r\n        // Try to find an implication arrow or equals sign\r\n        if (this._n3Mode && input.length > 1) {\r\n          type = 'abbreviation';\r\n          if (input[1] !== '>')\r\n            matchLength = 1, value = '=';\r\n          else\r\n            matchLength = 2, value = '>';\r\n        }\r\n        break;\r\n\r\n      case '!':\r\n        if (!this._n3Mode)\r\n          break;\r\n      case ',':\r\n      case ';':\r\n      case '[':\r\n      case ']':\r\n      case '(':\r\n      case ')':\r\n      case '{':\r\n      case '}':\r\n        if (!this._lineMode) {\r\n          matchLength = 1;\r\n          type = firstChar;\r\n        }\r\n        break;\r\n\r\n      default:\r\n        inconclusive = true;\r\n      }\r\n\r\n      // Some first characters do not allow an immediate decision, so inspect more\r\n      if (inconclusive) {\r\n        // Try to find a prefix\r\n        if ((this._previousMarker === '@prefix' || this._previousMarker === 'PREFIX') &&\r\n            (match = this._prefix.exec(input)))\r\n          type = 'prefix', value = match[1] || '';\r\n        // Try to find a prefixed name. Since it can contain (but not end with) a dot,\r\n        // we always need a non-dot character before deciding it is a prefixed name.\r\n        // Therefore, try inserting a space if we're at the end of the input.\r\n        else if ((match = this._prefixed.exec(input)) ||\r\n                 inputFinished && (match = this._prefixed.exec(`${input} `)))\r\n          type = 'prefixed', prefix = match[1] || '', value = this._unescape(match[2]);\r\n      }\r\n\r\n      // A type token is special: it can only be emitted after an IRI or prefixed name is read\r\n      if (this._previousMarker === '^^') {\r\n        switch (type) {\r\n        case 'prefixed': type = 'type';    break;\r\n        case 'IRI':      type = 'typeIRI'; break;\r\n        default:         type = '';\r\n        }\r\n      }\r\n\r\n      // What if nothing of the above was found?\r\n      if (!type) {\r\n        // We could be in streaming mode, and then we just wait for more input to arrive.\r\n        // Otherwise, a syntax error has occurred in the input.\r\n        // One exception: error on an unaccounted linebreak (= not inside a triple-quoted literal).\r\n        if (inputFinished || (!/^'''|^\"\"\"/.test(input) && /\\n|\\r/.test(input)))\r\n          return reportSyntaxError(this);\r\n        else\r\n          return this._input = input;\r\n      }\r\n\r\n      // Emit the parsed token\r\n      const token = { line: line, type: type, value: value, prefix: prefix };\r\n      callback(null, token);\r\n      this.previousToken = token;\r\n      this._previousMarker = type;\r\n      // Advance to next part to tokenize\r\n      input = input.substr(matchLength || match[0].length, input.length);\r\n    }\r\n\r\n    // Signals the syntax error through the callback\r\n    function reportSyntaxError(self) { callback(self._syntaxError(/^\\S*/.exec(input)[0])); }\r\n  }\r\n\r\n  // ### `_unescape` replaces N3 escape codes by their corresponding characters\r\n  _unescape(item) {\r\n    let invalid = false;\r\n    const replaced = item.replace(escapeSequence, (sequence, unicode4, unicode8, escapedChar) => {\r\n      // 4-digit unicode character\r\n      if (typeof unicode4 === 'string')\r\n        return String.fromCharCode(Number.parseInt(unicode4, 16));\r\n      // 8-digit unicode character\r\n      if (typeof unicode8 === 'string') {\r\n        let charCode = Number.parseInt(unicode8, 16);\r\n        return charCode <= 0xFFFF ? String.fromCharCode(Number.parseInt(unicode8, 16)) :\r\n          String.fromCharCode(0xD800 + ((charCode -= 0x10000) >> 10), 0xDC00 + (charCode & 0x3FF));\r\n      }\r\n      // fixed escape sequence\r\n      if (escapedChar in escapeReplacements)\r\n        return escapeReplacements[escapedChar];\r\n      // invalid escape sequence\r\n      invalid = true;\r\n      return '';\r\n    });\r\n    return invalid ? null : replaced;\r\n  }\r\n\r\n  // ### `_parseLiteral` parses a literal into an unescaped value\r\n  _parseLiteral(input) {\r\n    // Ensure we have enough lookahead to identify triple-quoted strings\r\n    if (input.length >= 3) {\r\n      // Identify the opening quote(s)\r\n      const opening = input.match(/^(?:\"\"\"|\"|'''|'|)/)[0];\r\n      const openingLength = opening.length;\r\n\r\n      // Find the next candidate closing quotes\r\n      let closingPos = Math.max(this._literalClosingPos, openingLength);\r\n      while ((closingPos = input.indexOf(opening, closingPos)) > 0) {\r\n        // Count backslashes right before the closing quotes\r\n        let backslashCount = 0;\r\n        while (input[closingPos - backslashCount - 1] === '\\\\')\r\n          backslashCount++;\r\n\r\n        // An even number of backslashes (in particular 0)\r\n        // means these are actual, non-escaped closing quotes\r\n        if (backslashCount % 2 === 0) {\r\n          // Extract and unescape the value\r\n          const raw = input.substring(openingLength, closingPos);\r\n          const lines = raw.split(/\\r\\n|\\r|\\n/).length - 1;\r\n          const matchLength = closingPos + openingLength;\r\n          // Only triple-quoted strings can be multi-line\r\n          if (openingLength === 1 && lines !== 0 ||\r\n              openingLength === 3 && this._lineMode)\r\n            break;\r\n          this._line += lines;\r\n          return { value: this._unescape(raw), matchLength };\r\n        }\r\n        closingPos++;\r\n      }\r\n      this._literalClosingPos = input.length - openingLength + 1;\r\n    }\r\n    return { value: '', matchLength: 0 };\r\n  }\r\n\r\n  // ### `_syntaxError` creates a syntax error for the given issue\r\n  _syntaxError(issue) {\r\n    this._input = null;\r\n    const err = new Error(`Unexpected \"${issue}\" on line ${this._line}.`);\r\n    err.context = {\r\n      token: undefined,\r\n      line: this._line,\r\n      previousToken: this.previousToken,\r\n    };\r\n    return err;\r\n  }\r\n\r\n  // ## Public methods\r\n\r\n  // ### `tokenize` starts the transformation of an N3 document into an array of tokens.\r\n  // The input can be a string or a stream.\r\n  tokenize(input, callback) {\r\n    this._line = 1;\r\n\r\n    // If the input is a string, continuously emit tokens through the callback until the end\r\n    if (typeof input === 'string') {\r\n      this._input = input;\r\n      // If a callback was passed, asynchronously call it\r\n      if (typeof callback === 'function')\r\n        queueMicrotask(() => this._tokenizeToEnd(callback, true));\r\n      // If no callback was passed, tokenize synchronously and return\r\n      else {\r\n        const tokens = [];\r\n        let error;\r\n        this._tokenizeToEnd((e, t) => e ? (error = e) : tokens.push(t), true);\r\n        if (error) throw error;\r\n        return tokens;\r\n      }\r\n    }\r\n    // Otherwise, the input must be a stream\r\n    else {\r\n      this._input = '';\r\n      this._pendingBuffer = null;\r\n      if (typeof input.setEncoding === 'function')\r\n        input.setEncoding('utf8');\r\n      // Adds the data chunk to the buffer and parses as far as possible\r\n      input.on('data', data => {\r\n        if (this._input !== null && data.length !== 0) {\r\n          // Prepend any previous pending writes\r\n          if (this._pendingBuffer) {\r\n            data = Buffer.concat([this._pendingBuffer, data]);\r\n            this._pendingBuffer = null;\r\n          }\r\n          // Hold if the buffer ends in an incomplete unicode sequence\r\n          if (data[data.length - 1] & 0x80) {\r\n            this._pendingBuffer = data;\r\n          }\r\n          // Otherwise, tokenize as far as possible\r\n          else {\r\n            this._input += data;\r\n            this._tokenizeToEnd(callback, false);\r\n          }\r\n        }\r\n      });\r\n      // Parses until the end\r\n      input.on('end', () => {\r\n        if (this._input !== null)\r\n          this._tokenizeToEnd(callback, true);\r\n      });\r\n      input.on('error', callback);\r\n    }\r\n  }\r\n}\r\n","// **N3Util** provides N3 utility functions.\r\n\r\nimport N3DataFactory from './N3DataFactory';\r\n\r\n// Tests whether the given term represents an IRI\r\nexport function isNamedNode(term) {\r\n  return !!term && term.termType === 'NamedNode';\r\n}\r\n\r\n// Tests whether the given term represents a blank node\r\nexport function isBlankNode(term) {\r\n  return !!term && term.termType === 'BlankNode';\r\n}\r\n\r\n// Tests whether the given term represents a literal\r\nexport function isLiteral(term) {\r\n  return !!term && term.termType === 'Literal';\r\n}\r\n\r\n// Tests whether the given term represents a variable\r\nexport function isVariable(term) {\r\n  return !!term && term.termType === 'Variable';\r\n}\r\n\r\n// Tests whether the given term represents the default graph\r\nexport function isDefaultGraph(term) {\r\n  return !!term && term.termType === 'DefaultGraph';\r\n}\r\n\r\n// Tests whether the given quad is in the default graph\r\nexport function inDefaultGraph(quad) {\r\n  return isDefaultGraph(quad.graph);\r\n}\r\n\r\n// Creates a function that prepends the given IRI to a local name\r\nexport function prefix(iri, factory) {\r\n  return prefixes({ '': iri }, factory)('');\r\n}\r\n\r\n// Creates a function that allows registering and expanding prefixes\r\nexport function prefixes(defaultPrefixes, factory) {\r\n  // Add all of the default prefixes\r\n  const prefixes = Object.create(null);\r\n  for (const prefix in defaultPrefixes)\r\n    processPrefix(prefix, defaultPrefixes[prefix]);\r\n  // Set the default factory if none was specified\r\n  factory = factory || N3DataFactory;\r\n\r\n  // Registers a new prefix (if an IRI was specified)\r\n  // or retrieves a function that expands an existing prefix (if no IRI was specified)\r\n  function processPrefix(prefix, iri) {\r\n    // Create a new prefix if an IRI is specified or the prefix doesn't exist\r\n    if (typeof iri === 'string') {\r\n      // Create a function that expands the prefix\r\n      const cache = Object.create(null);\r\n      prefixes[prefix] = local => {\r\n        return cache[local] || (cache[local] = factory.namedNode(iri + local));\r\n      };\r\n    }\r\n    else if (!(prefix in prefixes)) {\r\n      throw new Error(`Unknown prefix: ${prefix}`);\r\n    }\r\n    return prefixes[prefix];\r\n  }\r\n  return processPrefix;\r\n}\r\n","// N3.js implementations of the RDF/JS core data types\r\n// See https://github.com/rdfjs/representation-task-force/blob/master/interface-spec.md\r\n\r\nimport namespaces from './IRIs';\r\nimport { isDefaultGraph } from './N3Util';\r\nconst { rdf, xsd } = namespaces;\r\n\r\n// eslint-disable-next-line prefer-const\r\nlet DEFAULTGRAPH;\r\nlet _blankNodeCounter = 0;\r\n\r\nconst escapedLiteral = /^\"(.*\".*)(?=\"[^\"]*$)/;\r\nconst quadId = /^<<(\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+) (\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+) (\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+) ?(\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+)?>>$/;\r\n\r\n// ## DataFactory singleton\r\nconst DataFactory = {\r\n  namedNode,\r\n  blankNode,\r\n  variable,\r\n  literal,\r\n  defaultGraph,\r\n  quad,\r\n  triple: quad,\r\n};\r\nexport default DataFactory;\r\n\r\n// ## Term constructor\r\nexport class Term {\r\n  constructor(id) {\r\n    this.id = id;\r\n  }\r\n\r\n  // ### The value of this term\r\n  get value() {\r\n    return this.id;\r\n  }\r\n\r\n  // ### Returns whether this object represents the same term as the other\r\n  equals(other) {\r\n    // If both terms were created by this library,\r\n    // equality can be computed through ids\r\n    if (other instanceof Term)\r\n      return this.id === other.id;\r\n    // Otherwise, compare term type and value\r\n    return !!other && this.termType === other.termType &&\r\n                      this.value    === other.value;\r\n  }\r\n\r\n  // ### Returns a plain object representation of this term\r\n  toJSON() {\r\n    return {\r\n      termType: this.termType,\r\n      value:    this.value,\r\n    };\r\n  }\r\n}\r\n\r\n\r\n// ## NamedNode constructor\r\nexport class NamedNode extends Term {\r\n  // ### The term type of this term\r\n  get termType() {\r\n    return 'NamedNode';\r\n  }\r\n}\r\n\r\n// ## Literal constructor\r\nexport class Literal extends Term {\r\n  // ### The term type of this term\r\n  get termType() {\r\n    return 'Literal';\r\n  }\r\n\r\n  // ### The text value of this literal\r\n  get value() {\r\n    return this.id.substring(1, this.id.lastIndexOf('\"'));\r\n  }\r\n\r\n  // ### The language of this literal\r\n  get language() {\r\n    // Find the last quotation mark (e.g., '\"abc\"@en-us')\r\n    const id = this.id;\r\n    let atPos = id.lastIndexOf('\"') + 1;\r\n    // If \"@\" it follows, return the remaining substring; empty otherwise\r\n    return atPos < id.length && id[atPos++] === '@' ? id.substr(atPos).toLowerCase() : '';\r\n  }\r\n\r\n  // ### The datatype IRI of this literal\r\n  get datatype() {\r\n    return new NamedNode(this.datatypeString);\r\n  }\r\n\r\n  // ### The datatype string of this literal\r\n  get datatypeString() {\r\n    // Find the last quotation mark (e.g., '\"abc\"^^http://ex.org/types#t')\r\n    const id = this.id, dtPos = id.lastIndexOf('\"') + 1;\r\n    const char = dtPos < id.length ? id[dtPos] : '';\r\n    // If \"^\" it follows, return the remaining substring\r\n    return char === '^' ? id.substr(dtPos + 2) :\r\n           // If \"@\" follows, return rdf:langString; xsd:string otherwise\r\n           (char !== '@' ? xsd.string : rdf.langString);\r\n  }\r\n\r\n  // ### Returns whether this object represents the same term as the other\r\n  equals(other) {\r\n    // If both literals were created by this library,\r\n    // equality can be computed through ids\r\n    if (other instanceof Literal)\r\n      return this.id === other.id;\r\n    // Otherwise, compare term type, value, language, and datatype\r\n    return !!other && !!other.datatype &&\r\n                      this.termType === other.termType &&\r\n                      this.value    === other.value    &&\r\n                      this.language === other.language &&\r\n                      this.datatype.value === other.datatype.value;\r\n  }\r\n\r\n  toJSON() {\r\n    return {\r\n      termType: this.termType,\r\n      value:    this.value,\r\n      language: this.language,\r\n      datatype: { termType: 'NamedNode', value: this.datatypeString },\r\n    };\r\n  }\r\n}\r\n\r\n// ## BlankNode constructor\r\nexport class BlankNode extends Term {\r\n  constructor(name) {\r\n    super(`_:${name}`);\r\n  }\r\n\r\n  // ### The term type of this term\r\n  get termType() {\r\n    return 'BlankNode';\r\n  }\r\n\r\n  // ### The name of this blank node\r\n  get value() {\r\n    return this.id.substr(2);\r\n  }\r\n}\r\n\r\nexport class Variable extends Term {\r\n  constructor(name) {\r\n    super(`?${name}`);\r\n  }\r\n\r\n  // ### The term type of this term\r\n  get termType() {\r\n    return 'Variable';\r\n  }\r\n\r\n  // ### The name of this variable\r\n  get value() {\r\n    return this.id.substr(1);\r\n  }\r\n}\r\n\r\n// ## DefaultGraph constructor\r\nexport class DefaultGraph extends Term {\r\n  constructor() {\r\n    super('');\r\n    return DEFAULTGRAPH || this;\r\n  }\r\n\r\n  // ### The term type of this term\r\n  get termType() {\r\n    return 'DefaultGraph';\r\n  }\r\n\r\n  // ### Returns whether this object represents the same term as the other\r\n  equals(other) {\r\n    // If both terms were created by this library,\r\n    // equality can be computed through strict equality;\r\n    // otherwise, compare term types.\r\n    return (this === other) || (!!other && (this.termType === other.termType));\r\n  }\r\n}\r\n\r\n// ## DefaultGraph singleton\r\nDEFAULTGRAPH = new DefaultGraph();\r\n\r\n\r\n// ### Constructs a term from the given internal string ID\r\nexport function termFromId(id, factory) {\r\n  factory = factory || DataFactory;\r\n\r\n  // Falsy value or empty string indicate the default graph\r\n  if (!id)\r\n    return factory.defaultGraph();\r\n\r\n  // Identify the term type based on the first character\r\n  switch (id[0]) {\r\n  case '?':\r\n    return factory.variable(id.substr(1));\r\n  case '_':\r\n    return factory.blankNode(id.substr(2));\r\n  case '\"':\r\n    // Shortcut for internal literals\r\n    if (factory === DataFactory)\r\n      return new Literal(id);\r\n    // Literal without datatype or language\r\n    if (id[id.length - 1] === '\"')\r\n      return factory.literal(id.substr(1, id.length - 2));\r\n    // Literal with datatype or language\r\n    const endPos = id.lastIndexOf('\"', id.length - 1);\r\n    return factory.literal(id.substr(1, endPos - 1),\r\n            id[endPos + 1] === '@' ? id.substr(endPos + 2)\r\n                                   : factory.namedNode(id.substr(endPos + 3)));\r\n  case '<':\r\n    const components = quadId.exec(id);\r\n    return factory.quad(\r\n      termFromId(unescapeQuotes(components[1]), factory),\r\n      termFromId(unescapeQuotes(components[2]), factory),\r\n      termFromId(unescapeQuotes(components[3]), factory),\r\n      components[4] && termFromId(unescapeQuotes(components[4]), factory)\r\n    );\r\n  default:\r\n    return factory.namedNode(id);\r\n  }\r\n}\r\n\r\n// ### Constructs an internal string ID from the given term or ID string\r\nexport function termToId(term) {\r\n  if (typeof term === 'string')\r\n    return term;\r\n  if (term instanceof Term && term.termType !== 'Quad')\r\n    return term.id;\r\n  if (!term)\r\n    return DEFAULTGRAPH.id;\r\n\r\n  // Term instantiated with another library\r\n  switch (term.termType) {\r\n  case 'NamedNode':    return term.value;\r\n  case 'BlankNode':    return `_:${term.value}`;\r\n  case 'Variable':     return `?${term.value}`;\r\n  case 'DefaultGraph': return '';\r\n  case 'Literal':      return `\"${term.value}\"${\r\n    term.language ? `@${term.language}` :\r\n      (term.datatype && term.datatype.value !== xsd.string ? `^^${term.datatype.value}` : '')}`;\r\n  case 'Quad':\r\n    // To identify RDF* quad components, we escape quotes by doubling them.\r\n    // This avoids the overhead of backslash parsing of Turtle-like syntaxes.\r\n    return `<<${\r\n        escapeQuotes(termToId(term.subject))\r\n      } ${\r\n        escapeQuotes(termToId(term.predicate))\r\n      } ${\r\n        escapeQuotes(termToId(term.object))\r\n      }${\r\n        (isDefaultGraph(term.graph)) ? '' : ` ${termToId(term.graph)}`\r\n      }>>`;\r\n  default: throw new Error(`Unexpected termType: ${term.termType}`);\r\n  }\r\n}\r\n\r\n\r\n// ## Quad constructor\r\nexport class Quad extends Term {\r\n  constructor(subject, predicate, object, graph) {\r\n    super('');\r\n    this._subject   = subject;\r\n    this._predicate = predicate;\r\n    this._object    = object;\r\n    this._graph     = graph || DEFAULTGRAPH;\r\n  }\r\n\r\n  // ### The term type of this term\r\n  get termType() {\r\n    return 'Quad';\r\n  }\r\n\r\n  get subject() {\r\n    return this._subject;\r\n  }\r\n\r\n  get predicate() {\r\n    return this._predicate;\r\n  }\r\n\r\n  get object() {\r\n    return this._object;\r\n  }\r\n\r\n  get graph() {\r\n    return this._graph;\r\n  }\r\n\r\n  // ### Returns a plain object representation of this quad\r\n  toJSON() {\r\n    return {\r\n      termType:  this.termType,\r\n      subject:   this._subject.toJSON(),\r\n      predicate: this._predicate.toJSON(),\r\n      object:    this._object.toJSON(),\r\n      graph:     this._graph.toJSON(),\r\n    };\r\n  }\r\n\r\n  // ### Returns whether this object represents the same quad as the other\r\n  equals(other) {\r\n    return !!other && this._subject.equals(other.subject)     &&\r\n                      this._predicate.equals(other.predicate) &&\r\n                      this._object.equals(other.object)       &&\r\n                      this._graph.equals(other.graph);\r\n  }\r\n}\r\nexport { Quad as Triple };\r\n\r\n// ### Escapes the quotes within the given literal\r\nexport function escapeQuotes(id) {\r\n  return id.replace(escapedLiteral, (_, quoted) => `\"${quoted.replace(/\"/g, '\"\"')}`);\r\n}\r\n\r\n// ### Unescapes the quotes within the given literal\r\nexport function unescapeQuotes(id) {\r\n  return id.replace(escapedLiteral, (_, quoted) => `\"${quoted.replace(/\"\"/g, '\"')}`);\r\n}\r\n\r\n// ### Creates an IRI\r\nfunction namedNode(iri) {\r\n  return new NamedNode(iri);\r\n}\r\n\r\n// ### Creates a blank node\r\nfunction blankNode(name) {\r\n  return new BlankNode(name || `n3-${_blankNodeCounter++}`);\r\n}\r\n\r\n// ### Creates a literal\r\nfunction literal(value, languageOrDataType) {\r\n  // Create a language-tagged string\r\n  if (typeof languageOrDataType === 'string')\r\n    return new Literal(`\"${value}\"@${languageOrDataType.toLowerCase()}`);\r\n\r\n  // Automatically determine datatype for booleans and numbers\r\n  let datatype = languageOrDataType ? languageOrDataType.value : '';\r\n  if (datatype === '') {\r\n    // Convert a boolean\r\n    if (typeof value === 'boolean')\r\n      datatype = xsd.boolean;\r\n    // Convert an integer or double\r\n    else if (typeof value === 'number') {\r\n      if (Number.isFinite(value))\r\n        datatype = Number.isInteger(value) ? xsd.integer : xsd.double;\r\n      else {\r\n        datatype = xsd.double;\r\n        if (!Number.isNaN(value))\r\n          value = value > 0 ? 'INF' : '-INF';\r\n      }\r\n    }\r\n  }\r\n\r\n  // Create a datatyped literal\r\n  return (datatype === '' || datatype === xsd.string) ?\r\n    new Literal(`\"${value}\"`) :\r\n    new Literal(`\"${value}\"^^${datatype}`);\r\n}\r\n\r\n// ### Creates a variable\r\nfunction variable(name) {\r\n  return new Variable(name);\r\n}\r\n\r\n// ### Returns the default graph\r\nfunction defaultGraph() {\r\n  return DEFAULTGRAPH;\r\n}\r\n\r\n// ### Creates a quad\r\nfunction quad(subject, predicate, object, graph) {\r\n  return new Quad(subject, predicate, object, graph);\r\n}\r\n","// **N3Parser** parses N3 documents.\r\nimport N3Lexer from './N3Lexer';\r\nimport N3DataFactory from './N3DataFactory';\r\nimport namespaces from './IRIs';\r\n\r\nlet blankNodePrefix = 0;\r\n\r\n// ## Constructor\r\nexport default class N3Parser {\r\n  constructor(options) {\r\n    this._contextStack = [];\r\n    this._graph = null;\r\n\r\n    // Set the document IRI\r\n    options = options || {};\r\n    this._setBase(options.baseIRI);\r\n    options.factory && initDataFactory(this, options.factory);\r\n\r\n    // Set supported features depending on the format\r\n    const format = (typeof options.format === 'string') ?\r\n                 options.format.match(/\\w*$/)[0].toLowerCase() : '',\r\n        isTurtle = /turtle/.test(format), isTriG = /trig/.test(format),\r\n        isNTriples = /triple/.test(format), isNQuads = /quad/.test(format),\r\n        isN3 = this._n3Mode = /n3/.test(format),\r\n        isLineMode = isNTriples || isNQuads;\r\n    if (!(this._supportsNamedGraphs = !(isTurtle || isN3)))\r\n      this._readPredicateOrNamedGraph = this._readPredicate;\r\n    // Support triples in other graphs\r\n    this._supportsQuads = !(isTurtle || isTriG || isNTriples || isN3);\r\n    // Support nesting of triples\r\n    this._supportsRDFStar = format === '' || /star|\\*$/.test(format);\r\n    // Disable relative IRIs in N-Triples or N-Quads mode\r\n    if (isLineMode)\r\n      this._resolveRelativeIRI = iri => { return null; };\r\n    this._blankNodePrefix = typeof options.blankNodePrefix !== 'string' ? '' :\r\n                              options.blankNodePrefix.replace(/^(?!_:)/, '_:');\r\n    this._lexer = options.lexer || new N3Lexer({ lineMode: isLineMode, n3: isN3 });\r\n    // Disable explicit quantifiers by default\r\n    this._explicitQuantifiers = !!options.explicitQuantifiers;\r\n  }\r\n\r\n  // ## Static class methods\r\n\r\n  // ### `_resetBlankNodePrefix` restarts blank node prefix identification\r\n  static _resetBlankNodePrefix() {\r\n    blankNodePrefix = 0;\r\n  }\r\n\r\n  // ## Private methods\r\n\r\n  // ### `_setBase` sets the base IRI to resolve relative IRIs\r\n  _setBase(baseIRI) {\r\n    if (!baseIRI) {\r\n      this._base = '';\r\n      this._basePath = '';\r\n    }\r\n    else {\r\n      // Remove fragment if present\r\n      const fragmentPos = baseIRI.indexOf('#');\r\n      if (fragmentPos >= 0)\r\n        baseIRI = baseIRI.substr(0, fragmentPos);\r\n      // Set base IRI and its components\r\n      this._base = baseIRI;\r\n      this._basePath   = baseIRI.indexOf('/') < 0 ? baseIRI :\r\n                         baseIRI.replace(/[^\\/?]*(?:\\?.*)?$/, '');\r\n      baseIRI = baseIRI.match(/^(?:([a-z][a-z0-9+.-]*:))?(?:\\/\\/[^\\/]*)?/i);\r\n      this._baseRoot   = baseIRI[0];\r\n      this._baseScheme = baseIRI[1];\r\n    }\r\n  }\r\n\r\n  // ### `_saveContext` stores the current parsing context\r\n  // when entering a new scope (list, blank node, formula)\r\n  _saveContext(type, graph, subject, predicate, object) {\r\n    const n3Mode = this._n3Mode;\r\n    this._contextStack.push({\r\n      subject: subject, predicate: predicate, object: object,\r\n      graph: graph, type: type,\r\n      inverse: n3Mode ? this._inversePredicate : false,\r\n      blankPrefix: n3Mode ? this._prefixes._ : '',\r\n      quantified: n3Mode ? this._quantified : null,\r\n    });\r\n    // The settings below only apply to N3 streams\r\n    if (n3Mode) {\r\n      // Every new scope resets the predicate direction\r\n      this._inversePredicate = false;\r\n      // In N3, blank nodes are scoped to a formula\r\n      // (using a dot as separator, as a blank node label cannot start with it)\r\n      this._prefixes._ = (this._graph ? `${this._graph.id.substr(2)}.` : '.');\r\n      // Quantifiers are scoped to a formula\r\n      this._quantified = Object.create(this._quantified);\r\n    }\r\n  }\r\n\r\n  // ### `_restoreContext` restores the parent context\r\n  // when leaving a scope (list, blank node, formula)\r\n  _restoreContext() {\r\n    const context = this._contextStack.pop(), n3Mode = this._n3Mode;\r\n    this._subject   = context.subject;\r\n    this._predicate = context.predicate;\r\n    this._object    = context.object;\r\n    this._graph     = context.graph;\r\n    // The settings below only apply to N3 streams\r\n    if (n3Mode) {\r\n      this._inversePredicate = context.inverse;\r\n      this._prefixes._ = context.blankPrefix;\r\n      this._quantified = context.quantified;\r\n    }\r\n  }\r\n\r\n  // ### `_readInTopContext` reads a token when in the top context\r\n  _readInTopContext(token) {\r\n    switch (token.type) {\r\n    // If an EOF token arrives in the top context, signal that we're done\r\n    case 'eof':\r\n      if (this._graph !== null)\r\n        return this._error('Unclosed graph', token);\r\n      delete this._prefixes._;\r\n      return this._callback(null, null, this._prefixes);\r\n    // It could be a prefix declaration\r\n    case 'PREFIX':\r\n      this._sparqlStyle = true;\r\n    case '@prefix':\r\n      return this._readPrefix;\r\n    // It could be a base declaration\r\n    case 'BASE':\r\n      this._sparqlStyle = true;\r\n    case '@base':\r\n      return this._readBaseIRI;\r\n    // It could be a graph\r\n    case '{':\r\n      if (this._supportsNamedGraphs) {\r\n        this._graph = '';\r\n        this._subject = null;\r\n        return this._readSubject;\r\n      }\r\n    case 'GRAPH':\r\n      if (this._supportsNamedGraphs)\r\n        return this._readNamedGraphLabel;\r\n    // Otherwise, the next token must be a subject\r\n    default:\r\n      return this._readSubject(token);\r\n    }\r\n  }\r\n\r\n  // ### `_readEntity` reads an IRI, prefixed name, blank node, or variable\r\n  _readEntity(token, quantifier) {\r\n    let value;\r\n    switch (token.type) {\r\n    // Read a relative or absolute IRI\r\n    case 'IRI':\r\n    case 'typeIRI':\r\n      const iri = this._resolveIRI(token.value);\r\n      if (iri === null)\r\n        return this._error('Invalid IRI', token);\r\n      value = this._namedNode(iri);\r\n      break;\r\n    // Read a prefixed name\r\n    case 'type':\r\n    case 'prefixed':\r\n      const prefix = this._prefixes[token.prefix];\r\n      if (prefix === undefined)\r\n        return this._error(`Undefined prefix \"${token.prefix}:\"`, token);\r\n      value = this._namedNode(prefix + token.value);\r\n      break;\r\n    // Read a blank node\r\n    case 'blank':\r\n      value = this._blankNode(this._prefixes[token.prefix] + token.value);\r\n      break;\r\n    // Read a variable\r\n    case 'var':\r\n      value = this._variable(token.value.substr(1));\r\n      break;\r\n    // Everything else is not an entity\r\n    default:\r\n      return this._error(`Expected entity but got ${token.type}`, token);\r\n    }\r\n    // In N3 mode, replace the entity if it is quantified\r\n    if (!quantifier && this._n3Mode && (value.id in this._quantified))\r\n      value = this._quantified[value.id];\r\n    return value;\r\n  }\r\n\r\n  // ### `_readSubject` reads a quad's subject\r\n  _readSubject(token) {\r\n    this._predicate = null;\r\n    switch (token.type) {\r\n    case '[':\r\n      // Start a new quad with a new blank node as subject\r\n      this._saveContext('blank', this._graph,\r\n                        this._subject = this._blankNode(), null, null);\r\n      return this._readBlankNodeHead;\r\n    case '(':\r\n      // Start a new list\r\n      this._saveContext('list', this._graph, this.RDF_NIL, null, null);\r\n      this._subject = null;\r\n      return this._readListItem;\r\n    case '{':\r\n      // Start a new formula\r\n      if (!this._n3Mode)\r\n        return this._error('Unexpected graph', token);\r\n      this._saveContext('formula', this._graph,\r\n                        this._graph = this._blankNode(), null, null);\r\n      return this._readSubject;\r\n    case '}':\r\n       // No subject; the graph in which we are reading is closed instead\r\n      return this._readPunctuation(token);\r\n    case '@forSome':\r\n      if (!this._n3Mode)\r\n        return this._error('Unexpected \"@forSome\"', token);\r\n      this._subject = null;\r\n      this._predicate = this.N3_FORSOME;\r\n      this._quantifier = this._blankNode;\r\n      return this._readQuantifierList;\r\n    case '@forAll':\r\n      if (!this._n3Mode)\r\n        return this._error('Unexpected \"@forAll\"', token);\r\n      this._subject = null;\r\n      this._predicate = this.N3_FORALL;\r\n      this._quantifier = this._variable;\r\n      return this._readQuantifierList;\r\n    case 'literal':\r\n      if (!this._n3Mode)\r\n        return this._error('Unexpected literal', token);\r\n\r\n      if (token.prefix.length === 0) {\r\n        this._literalValue = token.value;\r\n        return this._completeSubjectLiteral;\r\n      }\r\n      else\r\n        this._subject = this._literal(token.value, this._namedNode(token.prefix));\r\n\r\n      break;\r\n    case '<<':\r\n      if (!this._supportsRDFStar)\r\n        return this._error('Unexpected RDF* syntax', token);\r\n      this._saveContext('<<', this._graph, null, null, null);\r\n      this._graph = null;\r\n      return this._readSubject;\r\n    default:\r\n      // Read the subject entity\r\n      if ((this._subject = this._readEntity(token)) === undefined)\r\n        return;\r\n      // In N3 mode, the subject might be a path\r\n      if (this._n3Mode)\r\n        return this._getPathReader(this._readPredicateOrNamedGraph);\r\n    }\r\n\r\n    // The next token must be a predicate,\r\n    // or, if the subject was actually a graph IRI, a named graph\r\n    return this._readPredicateOrNamedGraph;\r\n  }\r\n\r\n  // ### `_readPredicate` reads a quad's predicate\r\n  _readPredicate(token) {\r\n    const type = token.type;\r\n    switch (type) {\r\n    case 'inverse':\r\n      this._inversePredicate = true;\r\n    case 'abbreviation':\r\n      this._predicate = this.ABBREVIATIONS[token.value];\r\n      break;\r\n    case '.':\r\n    case ']':\r\n    case '}':\r\n      // Expected predicate didn't come, must have been trailing semicolon\r\n      if (this._predicate === null)\r\n        return this._error(`Unexpected ${type}`, token);\r\n      this._subject = null;\r\n      return type === ']' ? this._readBlankNodeTail(token) : this._readPunctuation(token);\r\n    case ';':\r\n      // Additional semicolons can be safely ignored\r\n      return this._predicate !== null ? this._readPredicate :\r\n             this._error('Expected predicate but got ;', token);\r\n    case 'blank':\r\n      if (!this._n3Mode)\r\n        return this._error('Disallowed blank node as predicate', token);\r\n    default:\r\n      if ((this._predicate = this._readEntity(token)) === undefined)\r\n        return;\r\n    }\r\n    // The next token must be an object\r\n    return this._readObject;\r\n  }\r\n\r\n  // ### `_readObject` reads a quad's object\r\n  _readObject(token) {\r\n    switch (token.type) {\r\n    case 'literal':\r\n      // Regular literal, can still get a datatype or language\r\n      if (token.prefix.length === 0) {\r\n        this._literalValue = token.value;\r\n        return this._readDataTypeOrLang;\r\n      }\r\n      // Pre-datatyped string literal (prefix stores the datatype)\r\n      else\r\n        this._object = this._literal(token.value, this._namedNode(token.prefix));\r\n      break;\r\n    case '[':\r\n      // Start a new quad with a new blank node as subject\r\n      this._saveContext('blank', this._graph, this._subject, this._predicate,\r\n                        this._subject = this._blankNode());\r\n      return this._readBlankNodeHead;\r\n    case '(':\r\n      // Start a new list\r\n      this._saveContext('list', this._graph, this._subject, this._predicate, this.RDF_NIL);\r\n      this._subject = null;\r\n      return this._readListItem;\r\n    case '{':\r\n      // Start a new formula\r\n      if (!this._n3Mode)\r\n        return this._error('Unexpected graph', token);\r\n      this._saveContext('formula', this._graph, this._subject, this._predicate,\r\n                        this._graph = this._blankNode());\r\n      return this._readSubject;\r\n    case '<<':\r\n      if (!this._supportsRDFStar)\r\n        return this._error('Unexpected RDF* syntax', token);\r\n      this._saveContext('<<', this._graph, this._subject, this._predicate, null);\r\n      this._graph = null;\r\n      return this._readSubject;\r\n    default:\r\n      // Read the object entity\r\n      if ((this._object = this._readEntity(token)) === undefined)\r\n        return;\r\n      // In N3 mode, the object might be a path\r\n      if (this._n3Mode)\r\n        return this._getPathReader(this._getContextEndReader());\r\n    }\r\n    return this._getContextEndReader();\r\n  }\r\n\r\n  // ### `_readPredicateOrNamedGraph` reads a quad's predicate, or a named graph\r\n  _readPredicateOrNamedGraph(token) {\r\n    return token.type === '{' ? this._readGraph(token) : this._readPredicate(token);\r\n  }\r\n\r\n  // ### `_readGraph` reads a graph\r\n  _readGraph(token) {\r\n    if (token.type !== '{')\r\n      return this._error(`Expected graph but got ${token.type}`, token);\r\n    // The \"subject\" we read is actually the GRAPH's label\r\n    this._graph = this._subject, this._subject = null;\r\n    return this._readSubject;\r\n  }\r\n\r\n  // ### `_readBlankNodeHead` reads the head of a blank node\r\n  _readBlankNodeHead(token) {\r\n    if (token.type === ']') {\r\n      this._subject = null;\r\n      return this._readBlankNodeTail(token);\r\n    }\r\n    else {\r\n      this._predicate = null;\r\n      return this._readPredicate(token);\r\n    }\r\n  }\r\n\r\n  // ### `_readBlankNodeTail` reads the end of a blank node\r\n  _readBlankNodeTail(token) {\r\n    if (token.type !== ']')\r\n      return this._readBlankNodePunctuation(token);\r\n\r\n    // Store blank node quad\r\n    if (this._subject !== null)\r\n      this._emit(this._subject, this._predicate, this._object, this._graph);\r\n\r\n    // Restore the parent context containing this blank node\r\n    const empty = this._predicate === null;\r\n    this._restoreContext();\r\n    // If the blank node was the subject, continue reading the predicate\r\n    if (this._object === null)\r\n      // If the blank node was empty, it could be a named graph label\r\n      return empty ? this._readPredicateOrNamedGraph : this._readPredicateAfterBlank;\r\n    // If the blank node was the object, restore previous context and read punctuation\r\n    else\r\n      return this._getContextEndReader();\r\n  }\r\n\r\n  // ### `_readPredicateAfterBlank` reads a predicate after an anonymous blank node\r\n  _readPredicateAfterBlank(token) {\r\n    switch (token.type) {\r\n    case '.':\r\n    case '}':\r\n      // No predicate is coming if the triple is terminated here\r\n      this._subject = null;\r\n      return this._readPunctuation(token);\r\n    default:\r\n      return this._readPredicate(token);\r\n    }\r\n  }\r\n\r\n  // ### `_readListItem` reads items from a list\r\n  _readListItem(token) {\r\n    let item = null,                      // The item of the list\r\n        list = null,                      // The list itself\r\n        next = this._readListItem;        // The next function to execute\r\n    const previousList = this._subject,   // The previous list that contains this list\r\n        stack = this._contextStack,       // The stack of parent contexts\r\n        parent = stack[stack.length - 1]; // The parent containing the current list\r\n\r\n    switch (token.type) {\r\n    case '[':\r\n      // Stack the current list quad and start a new quad with a blank node as subject\r\n      this._saveContext('blank', this._graph,\r\n                        list = this._blankNode(), this.RDF_FIRST,\r\n                        this._subject = item = this._blankNode());\r\n      next = this._readBlankNodeHead;\r\n      break;\r\n    case '(':\r\n      // Stack the current list quad and start a new list\r\n      this._saveContext('list', this._graph,\r\n                        list = this._blankNode(), this.RDF_FIRST, this.RDF_NIL);\r\n      this._subject = null;\r\n      break;\r\n    case ')':\r\n      // Closing the list; restore the parent context\r\n      this._restoreContext();\r\n      // If this list is contained within a parent list, return the membership quad here.\r\n      // This will be `<parent list element> rdf:first <this list>.`.\r\n      if (stack.length !== 0 && stack[stack.length - 1].type === 'list')\r\n        this._emit(this._subject, this._predicate, this._object, this._graph);\r\n      // Was this list the parent's subject?\r\n      if (this._predicate === null) {\r\n        // The next token is the predicate\r\n        next = this._readPredicate;\r\n        // No list tail if this was an empty list\r\n        if (this._subject === this.RDF_NIL)\r\n          return next;\r\n      }\r\n      // The list was in the parent context's object\r\n      else {\r\n        next = this._getContextEndReader();\r\n        // No list tail if this was an empty list\r\n        if (this._object === this.RDF_NIL)\r\n          return next;\r\n      }\r\n      // Close the list by making the head nil\r\n      list = this.RDF_NIL;\r\n      break;\r\n    case 'literal':\r\n      // Regular literal, can still get a datatype or language\r\n      if (token.prefix.length === 0) {\r\n        this._literalValue = token.value;\r\n        next = this._readListItemDataTypeOrLang;\r\n      }\r\n      // Pre-datatyped string literal (prefix stores the datatype)\r\n      else {\r\n        item = this._literal(token.value, this._namedNode(token.prefix));\r\n        next = this._getContextEndReader();\r\n      }\r\n      break;\r\n    case '{':\r\n      // Start a new formula\r\n      if (!this._n3Mode)\r\n        return this._error('Unexpected graph', token);\r\n      this._saveContext('formula', this._graph, this._subject, this._predicate,\r\n                        this._graph = this._blankNode());\r\n      return this._readSubject;\r\n    default:\r\n      if ((item = this._readEntity(token)) === undefined)\r\n        return;\r\n    }\r\n\r\n     // Create a new blank node if no item head was assigned yet\r\n    if (list === null)\r\n      this._subject = list = this._blankNode();\r\n\r\n    // Is this the first element of the list?\r\n    if (previousList === null) {\r\n      // This list is either the subject or the object of its parent\r\n      if (parent.predicate === null)\r\n        parent.subject = list;\r\n      else\r\n        parent.object = list;\r\n    }\r\n    else {\r\n      // Continue the previous list with the current list\r\n      this._emit(previousList, this.RDF_REST, list, this._graph);\r\n    }\r\n    // If an item was read, add it to the list\r\n    if (item !== null) {\r\n      // In N3 mode, the item might be a path\r\n      if (this._n3Mode && (token.type === 'IRI' || token.type === 'prefixed')) {\r\n        // Create a new context to add the item's path\r\n        this._saveContext('item', this._graph, list, this.RDF_FIRST, item);\r\n        this._subject = item, this._predicate = null;\r\n        // _readPath will restore the context and output the item\r\n        return this._getPathReader(this._readListItem);\r\n      }\r\n      // Output the item\r\n      this._emit(list, this.RDF_FIRST, item, this._graph);\r\n    }\r\n    return next;\r\n  }\r\n\r\n  // ### `_readDataTypeOrLang` reads an _optional_ datatype or language\r\n  _readDataTypeOrLang(token) {\r\n    return this._completeObjectLiteral(token, false);\r\n  }\r\n\r\n\r\n  // ### `_readListItemDataTypeOrLang` reads an _optional_ datatype or language in a list\r\n  _readListItemDataTypeOrLang(token) {\r\n    return this._completeObjectLiteral(token, true);\r\n  }\r\n\r\n  // ### `_completeLiteral` completes a literal with an optional datatype or language\r\n  _completeLiteral(token) {\r\n    // Create a simple string literal by default\r\n    let literal = this._literal(this._literalValue);\r\n\r\n    switch (token.type) {\r\n    // Create a datatyped literal\r\n    case 'type':\r\n    case 'typeIRI':\r\n      const datatype = this._readEntity(token);\r\n      if (datatype === undefined) return; // No datatype means an error occurred\r\n      literal = this._literal(this._literalValue, datatype);\r\n      token = null;\r\n      break;\r\n    // Create a language-tagged string\r\n    case 'langcode':\r\n      literal = this._literal(this._literalValue, token.value);\r\n      token = null;\r\n      break;\r\n    }\r\n\r\n    return { token, literal };\r\n  }\r\n\r\n  // Completes a literal in subject position\r\n  _completeSubjectLiteral(token) {\r\n    this._subject = this._completeLiteral(token).literal;\r\n    return this._readPredicateOrNamedGraph;\r\n  }\r\n\r\n  // Completes a literal in object position\r\n  _completeObjectLiteral(token, listItem) {\r\n    const completed = this._completeLiteral(token);\r\n    if (!completed)\r\n      return;\r\n    this._object = completed.literal;\r\n\r\n    // If this literal was part of a list, write the item\r\n    // (we could also check the context stack, but passing in a flag is faster)\r\n    if (listItem)\r\n      this._emit(this._subject, this.RDF_FIRST, this._object, this._graph);\r\n    // If the token was consumed, continue with the rest of the input\r\n    if (completed.token === null)\r\n      return this._getContextEndReader();\r\n    // Otherwise, consume the token now\r\n    else {\r\n      this._readCallback = this._getContextEndReader();\r\n      return this._readCallback(completed.token);\r\n    }\r\n  }\r\n\r\n  // ### `_readFormulaTail` reads the end of a formula\r\n  _readFormulaTail(token) {\r\n    if (token.type !== '}')\r\n      return this._readPunctuation(token);\r\n\r\n    // Store the last quad of the formula\r\n    if (this._subject !== null)\r\n      this._emit(this._subject, this._predicate, this._object, this._graph);\r\n\r\n    // Restore the parent context containing this formula\r\n    this._restoreContext();\r\n    // If the formula was the subject, continue reading the predicate.\r\n    // If the formula was the object, read punctuation.\r\n    return this._object === null ? this._readPredicate : this._getContextEndReader();\r\n  }\r\n\r\n  // ### `_readPunctuation` reads punctuation between quads or quad parts\r\n  _readPunctuation(token) {\r\n    let next, graph = this._graph;\r\n    const subject = this._subject, inversePredicate = this._inversePredicate;\r\n    switch (token.type) {\r\n    // A closing brace ends a graph\r\n    case '}':\r\n      if (this._graph === null)\r\n        return this._error('Unexpected graph closing', token);\r\n      if (this._n3Mode)\r\n        return this._readFormulaTail(token);\r\n      this._graph = null;\r\n    // A dot just ends the statement, without sharing anything with the next\r\n    case '.':\r\n      this._subject = null;\r\n      next = this._contextStack.length ? this._readSubject : this._readInTopContext;\r\n      if (inversePredicate) this._inversePredicate = false;\r\n      break;\r\n    // Semicolon means the subject is shared; predicate and object are different\r\n    case ';':\r\n      next = this._readPredicate;\r\n      break;\r\n    // Comma means both the subject and predicate are shared; the object is different\r\n    case ',':\r\n      next = this._readObject;\r\n      break;\r\n    default:\r\n      // An entity means this is a quad (only allowed if not already inside a graph)\r\n      if (this._supportsQuads && this._graph === null && (graph = this._readEntity(token)) !== undefined) {\r\n        next = this._readQuadPunctuation;\r\n        break;\r\n      }\r\n      return this._error(`Expected punctuation to follow \"${this._object.id}\"`, token);\r\n    }\r\n    // A quad has been completed now, so return it\r\n    if (subject !== null) {\r\n      const predicate = this._predicate, object = this._object;\r\n      if (!inversePredicate)\r\n        this._emit(subject, predicate, object,  graph);\r\n      else\r\n        this._emit(object,  predicate, subject, graph);\r\n    }\r\n    return next;\r\n  }\r\n\r\n    // ### `_readBlankNodePunctuation` reads punctuation in a blank node\r\n  _readBlankNodePunctuation(token) {\r\n    let next;\r\n    switch (token.type) {\r\n    // Semicolon means the subject is shared; predicate and object are different\r\n    case ';':\r\n      next = this._readPredicate;\r\n      break;\r\n    // Comma means both the subject and predicate are shared; the object is different\r\n    case ',':\r\n      next = this._readObject;\r\n      break;\r\n    default:\r\n      return this._error(`Expected punctuation to follow \"${this._object.id}\"`, token);\r\n    }\r\n    // A quad has been completed now, so return it\r\n    this._emit(this._subject, this._predicate, this._object, this._graph);\r\n    return next;\r\n  }\r\n\r\n  // ### `_readQuadPunctuation` reads punctuation after a quad\r\n  _readQuadPunctuation(token) {\r\n    if (token.type !== '.')\r\n      return this._error('Expected dot to follow quad', token);\r\n    return this._readInTopContext;\r\n  }\r\n\r\n  // ### `_readPrefix` reads the prefix of a prefix declaration\r\n  _readPrefix(token) {\r\n    if (token.type !== 'prefix')\r\n      return this._error('Expected prefix to follow @prefix', token);\r\n    this._prefix = token.value;\r\n    return this._readPrefixIRI;\r\n  }\r\n\r\n  // ### `_readPrefixIRI` reads the IRI of a prefix declaration\r\n  _readPrefixIRI(token) {\r\n    if (token.type !== 'IRI')\r\n      return this._error(`Expected IRI to follow prefix \"${this._prefix}:\"`, token);\r\n    const prefixNode = this._readEntity(token);\r\n    this._prefixes[this._prefix] = prefixNode.value;\r\n    this._prefixCallback(this._prefix, prefixNode);\r\n    return this._readDeclarationPunctuation;\r\n  }\r\n\r\n  // ### `_readBaseIRI` reads the IRI of a base declaration\r\n  _readBaseIRI(token) {\r\n    const iri = token.type === 'IRI' && this._resolveIRI(token.value);\r\n    if (!iri)\r\n      return this._error('Expected valid IRI to follow base declaration', token);\r\n    this._setBase(iri);\r\n    return this._readDeclarationPunctuation;\r\n  }\r\n\r\n  // ### `_readNamedGraphLabel` reads the label of a named graph\r\n  _readNamedGraphLabel(token) {\r\n    switch (token.type) {\r\n    case 'IRI':\r\n    case 'blank':\r\n    case 'prefixed':\r\n      return this._readSubject(token), this._readGraph;\r\n    case '[':\r\n      return this._readNamedGraphBlankLabel;\r\n    default:\r\n      return this._error('Invalid graph label', token);\r\n    }\r\n  }\r\n\r\n  // ### `_readNamedGraphLabel` reads a blank node label of a named graph\r\n  _readNamedGraphBlankLabel(token) {\r\n    if (token.type !== ']')\r\n      return this._error('Invalid graph label', token);\r\n    this._subject = this._blankNode();\r\n    return this._readGraph;\r\n  }\r\n\r\n  // ### `_readDeclarationPunctuation` reads the punctuation of a declaration\r\n  _readDeclarationPunctuation(token) {\r\n    // SPARQL-style declarations don't have punctuation\r\n    if (this._sparqlStyle) {\r\n      this._sparqlStyle = false;\r\n      return this._readInTopContext(token);\r\n    }\r\n\r\n    if (token.type !== '.')\r\n      return this._error('Expected declaration to end with a dot', token);\r\n    return this._readInTopContext;\r\n  }\r\n\r\n  // Reads a list of quantified symbols from a @forSome or @forAll statement\r\n  _readQuantifierList(token) {\r\n    let entity;\r\n    switch (token.type) {\r\n    case 'IRI':\r\n    case 'prefixed':\r\n      if ((entity = this._readEntity(token, true)) !== undefined)\r\n        break;\r\n    default:\r\n      return this._error(`Unexpected ${token.type}`, token);\r\n    }\r\n    // Without explicit quantifiers, map entities to a quantified entity\r\n    if (!this._explicitQuantifiers)\r\n      this._quantified[entity.id] = this._quantifier(this._blankNode().value);\r\n    // With explicit quantifiers, output the reified quantifier\r\n    else {\r\n      // If this is the first item, start a new quantifier list\r\n      if (this._subject === null)\r\n        this._emit(this._graph || this.DEFAULTGRAPH, this._predicate,\r\n                   this._subject = this._blankNode(), this.QUANTIFIERS_GRAPH);\r\n      // Otherwise, continue the previous list\r\n      else\r\n        this._emit(this._subject, this.RDF_REST,\r\n                   this._subject = this._blankNode(), this.QUANTIFIERS_GRAPH);\r\n      // Output the list item\r\n      this._emit(this._subject, this.RDF_FIRST, entity, this.QUANTIFIERS_GRAPH);\r\n    }\r\n    return this._readQuantifierPunctuation;\r\n  }\r\n\r\n  // Reads punctuation from a @forSome or @forAll statement\r\n  _readQuantifierPunctuation(token) {\r\n    // Read more quantifiers\r\n    if (token.type === ',')\r\n      return this._readQuantifierList;\r\n    // End of the quantifier list\r\n    else {\r\n      // With explicit quantifiers, close the quantifier list\r\n      if (this._explicitQuantifiers) {\r\n        this._emit(this._subject, this.RDF_REST, this.RDF_NIL, this.QUANTIFIERS_GRAPH);\r\n        this._subject = null;\r\n      }\r\n      // Read a dot\r\n      this._readCallback = this._getContextEndReader();\r\n      return this._readCallback(token);\r\n    }\r\n  }\r\n\r\n  // ### `_getPathReader` reads a potential path and then resumes with the given function\r\n  _getPathReader(afterPath) {\r\n    this._afterPath = afterPath;\r\n    return this._readPath;\r\n  }\r\n\r\n  // ### `_readPath` reads a potential path\r\n  _readPath(token) {\r\n    switch (token.type) {\r\n    // Forward path\r\n    case '!': return this._readForwardPath;\r\n    // Backward path\r\n    case '^': return this._readBackwardPath;\r\n    // Not a path; resume reading where we left off\r\n    default:\r\n      const stack = this._contextStack, parent = stack.length && stack[stack.length - 1];\r\n      // If we were reading a list item, we still need to output it\r\n      if (parent && parent.type === 'item') {\r\n        // The list item is the remaining subejct after reading the path\r\n        const item = this._subject;\r\n        // Switch back to the context of the list\r\n        this._restoreContext();\r\n        // Output the list item\r\n        this._emit(this._subject, this.RDF_FIRST, item, this._graph);\r\n      }\r\n      return this._afterPath(token);\r\n    }\r\n  }\r\n\r\n  // ### `_readForwardPath` reads a '!' path\r\n  _readForwardPath(token) {\r\n    let subject, predicate;\r\n    const object = this._blankNode();\r\n    // The next token is the predicate\r\n    if ((predicate = this._readEntity(token)) === undefined)\r\n      return;\r\n    // If we were reading a subject, replace the subject by the path's object\r\n    if (this._predicate === null)\r\n      subject = this._subject, this._subject = object;\r\n    // If we were reading an object, replace the subject by the path's object\r\n    else\r\n      subject = this._object,  this._object  = object;\r\n    // Emit the path's current quad and read its next section\r\n    this._emit(subject, predicate, object, this._graph);\r\n    return this._readPath;\r\n  }\r\n\r\n  // ### `_readBackwardPath` reads a '^' path\r\n  _readBackwardPath(token) {\r\n    const subject = this._blankNode();\r\n    let predicate, object;\r\n    // The next token is the predicate\r\n    if ((predicate = this._readEntity(token)) === undefined)\r\n      return;\r\n    // If we were reading a subject, replace the subject by the path's subject\r\n    if (this._predicate === null)\r\n      object = this._subject, this._subject = subject;\r\n    // If we were reading an object, replace the subject by the path's subject\r\n    else\r\n      object = this._object,  this._object  = subject;\r\n    // Emit the path's current quad and read its next section\r\n    this._emit(subject, predicate, object, this._graph);\r\n    return this._readPath;\r\n  }\r\n\r\n  // ### `_readRDFStarTailOrGraph` reads the graph of a nested RDF* quad or the end of a nested RDF* triple\r\n  _readRDFStarTailOrGraph(token) {\r\n    if (token.type !== '>>') {\r\n      // An entity means this is a quad (only allowed if not already inside a graph)\r\n      if (this._supportsQuads && this._graph === null && (this._graph = this._readEntity(token)) !== undefined)\r\n        return this._readRDFStarTail;\r\n      return this._error(`Expected >> to follow \"${this._object.id}\"`, token);\r\n    }\r\n    return this._readRDFStarTail(token);\r\n  }\r\n\r\n  // ### `_readRDFStarTail` reads the end of a nested RDF* triple\r\n  _readRDFStarTail(token) {\r\n    if (token.type !== '>>')\r\n      return this._error(`Expected >> but got ${token.type}`, token);\r\n    // Read the quad and restore the previous context\r\n    const quad = this._quad(this._subject, this._predicate, this._object,\r\n      this._graph || this.DEFAULTGRAPH);\r\n    this._restoreContext();\r\n    // If the triple was the subject, continue by reading the predicate.\r\n    if (this._subject === null) {\r\n      this._subject = quad;\r\n      return this._readPredicate;\r\n    }\r\n    // If the triple was the object, read context end.\r\n    else {\r\n      this._object = quad;\r\n      return this._getContextEndReader();\r\n    }\r\n  }\r\n\r\n  // ### `_getContextEndReader` gets the next reader function at the end of a context\r\n  _getContextEndReader() {\r\n    const contextStack = this._contextStack;\r\n    if (!contextStack.length)\r\n      return this._readPunctuation;\r\n\r\n    switch (contextStack[contextStack.length - 1].type) {\r\n    case 'blank':\r\n      return this._readBlankNodeTail;\r\n    case 'list':\r\n      return this._readListItem;\r\n    case 'formula':\r\n      return this._readFormulaTail;\r\n    case '<<':\r\n      return this._readRDFStarTailOrGraph;\r\n    }\r\n  }\r\n\r\n  // ### `_emit` sends a quad through the callback\r\n  _emit(subject, predicate, object, graph) {\r\n    this._callback(null, this._quad(subject, predicate, object, graph || this.DEFAULTGRAPH));\r\n  }\r\n\r\n  // ### `_error` emits an error message through the callback\r\n  _error(message, token) {\r\n    const err = new Error(`${message} on line ${token.line}.`);\r\n    err.context = {\r\n      token: token,\r\n      line: token.line,\r\n      previousToken: this._lexer.previousToken,\r\n    };\r\n    this._callback(err);\r\n    this._callback = noop;\r\n  }\r\n\r\n  // ### `_resolveIRI` resolves an IRI against the base path\r\n  _resolveIRI(iri) {\r\n    return /^[a-z][a-z0-9+.-]*:/i.test(iri) ? iri : this._resolveRelativeIRI(iri);\r\n  }\r\n\r\n  // ### `_resolveRelativeIRI` resolves an IRI against the base path,\r\n  // assuming that a base path has been set and that the IRI is indeed relative\r\n  _resolveRelativeIRI(iri) {\r\n    // An empty relative IRI indicates the base IRI\r\n    if (!iri.length)\r\n      return this._base;\r\n    // Decide resolving strategy based in the first character\r\n    switch (iri[0]) {\r\n    // Resolve relative fragment IRIs against the base IRI\r\n    case '#': return this._base + iri;\r\n    // Resolve relative query string IRIs by replacing the query string\r\n    case '?': return this._base.replace(/(?:\\?.*)?$/, iri);\r\n    // Resolve root-relative IRIs at the root of the base IRI\r\n    case '/':\r\n      // Resolve scheme-relative IRIs to the scheme\r\n      return (iri[1] === '/' ? this._baseScheme : this._baseRoot) + this._removeDotSegments(iri);\r\n    // Resolve all other IRIs at the base IRI's path\r\n    default:\r\n      // Relative IRIs cannot contain a colon in the first path segment\r\n      return (/^[^/:]*:/.test(iri)) ? null : this._removeDotSegments(this._basePath + iri);\r\n    }\r\n  }\r\n\r\n  // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986\r\n  _removeDotSegments(iri) {\r\n    // Don't modify the IRI if it does not contain any dot segments\r\n    if (!/(^|\\/)\\.\\.?($|[/#?])/.test(iri))\r\n      return iri;\r\n\r\n    // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'\r\n    const length = iri.length;\r\n    let result = '', i = -1, pathStart = -1, segmentStart = 0, next = '/';\r\n\r\n    while (i < length) {\r\n      switch (next) {\r\n      // The path starts with the first slash after the authority\r\n      case ':':\r\n        if (pathStart < 0) {\r\n          // Skip two slashes before the authority\r\n          if (iri[++i] === '/' && iri[++i] === '/')\r\n            // Skip to slash after the authority\r\n            while ((pathStart = i + 1) < length && iri[pathStart] !== '/')\r\n              i = pathStart;\r\n        }\r\n        break;\r\n      // Don't modify a query string or fragment\r\n      case '?':\r\n      case '#':\r\n        i = length;\r\n        break;\r\n      // Handle '/.' or '/..' path segments\r\n      case '/':\r\n        if (iri[i + 1] === '.') {\r\n          next = iri[++i + 1];\r\n          switch (next) {\r\n          // Remove a '/.' segment\r\n          case '/':\r\n            result += iri.substring(segmentStart, i - 1);\r\n            segmentStart = i + 1;\r\n            break;\r\n          // Remove a trailing '/.' segment\r\n          case undefined:\r\n          case '?':\r\n          case '#':\r\n            return result + iri.substring(segmentStart, i) + iri.substr(i + 1);\r\n          // Remove a '/..' segment\r\n          case '.':\r\n            next = iri[++i + 1];\r\n            if (next === undefined || next === '/' || next === '?' || next === '#') {\r\n              result += iri.substring(segmentStart, i - 2);\r\n              // Try to remove the parent path from result\r\n              if ((segmentStart = result.lastIndexOf('/')) >= pathStart)\r\n                result = result.substr(0, segmentStart);\r\n              // Remove a trailing '/..' segment\r\n              if (next !== '/')\r\n                return `${result}/${iri.substr(i + 1)}`;\r\n              segmentStart = i + 1;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      next = iri[++i];\r\n    }\r\n    return result + iri.substring(segmentStart);\r\n  }\r\n\r\n  // ## Public methods\r\n\r\n  // ### `parse` parses the N3 input and emits each parsed quad through the callback\r\n  parse(input, quadCallback, prefixCallback) {\r\n    // The read callback is the next function to be executed when a token arrives.\r\n    // We start reading in the top context.\r\n    this._readCallback = this._readInTopContext;\r\n    this._sparqlStyle = false;\r\n    this._prefixes = Object.create(null);\r\n    this._prefixes._ = this._blankNodePrefix ? this._blankNodePrefix.substr(2)\r\n                                             : `b${blankNodePrefix++}_`;\r\n    this._prefixCallback = prefixCallback || noop;\r\n    this._inversePredicate = false;\r\n    this._quantified = Object.create(null);\r\n\r\n    // Parse synchronously if no quad callback is given\r\n    if (!quadCallback) {\r\n      const quads = [];\r\n      let error;\r\n      this._callback = (e, t) => { e ? (error = e) : t && quads.push(t); };\r\n      this._lexer.tokenize(input).every(token => {\r\n        return this._readCallback = this._readCallback(token);\r\n      });\r\n      if (error) throw error;\r\n      return quads;\r\n    }\r\n\r\n    // Parse asynchronously otherwise, executing the read callback when a token arrives\r\n    this._callback = quadCallback;\r\n    this._lexer.tokenize(input, (error, token) => {\r\n      if (error !== null)\r\n        this._callback(error), this._callback = noop;\r\n      else if (this._readCallback)\r\n        this._readCallback = this._readCallback(token);\r\n    });\r\n  }\r\n}\r\n\r\n// The empty function\r\nfunction noop() {}\r\n\r\n// Initializes the parser with the given data factory\r\nfunction initDataFactory(parser, factory) {\r\n  // Set factory methods\r\n  const namedNode = factory.namedNode;\r\n  parser._namedNode   = namedNode;\r\n  parser._blankNode   = factory.blankNode;\r\n  parser._literal     = factory.literal;\r\n  parser._variable    = factory.variable;\r\n  parser._quad        = factory.quad;\r\n  parser.DEFAULTGRAPH = factory.defaultGraph();\r\n\r\n  // Set common named nodes\r\n  parser.RDF_FIRST  = namedNode(namespaces.rdf.first);\r\n  parser.RDF_REST   = namedNode(namespaces.rdf.rest);\r\n  parser.RDF_NIL    = namedNode(namespaces.rdf.nil);\r\n  parser.N3_FORALL  = namedNode(namespaces.r.forAll);\r\n  parser.N3_FORSOME = namedNode(namespaces.r.forSome);\r\n  parser.ABBREVIATIONS = {\r\n    'a': namedNode(namespaces.rdf.type),\r\n    '=': namedNode(namespaces.owl.sameAs),\r\n    '>': namedNode(namespaces.log.implies),\r\n  };\r\n  parser.QUANTIFIERS_GRAPH = namedNode('urn:n3:quantifiers');\r\n}\r\ninitDataFactory(N3Parser.prototype, N3DataFactory);\r\n","// **N3Writer** writes N3 documents.\r\nimport namespaces from './IRIs';\r\nimport { default as N3DataFactory, Term } from './N3DataFactory';\r\nimport { isDefaultGraph } from './N3Util';\r\n\r\nconst DEFAULTGRAPH = N3DataFactory.defaultGraph();\r\n\r\nconst { rdf, xsd } = namespaces;\r\n\r\n// Characters in literals that require escaping\r\nconst escape    = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019\\ud800-\\udbff]/,\r\n    escapeAll = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019]|[\\ud800-\\udbff][\\udc00-\\udfff]/g,\r\n    escapedCharacters = {\r\n      '\\\\': '\\\\\\\\', '\"': '\\\\\"', '\\t': '\\\\t',\r\n      '\\n': '\\\\n', '\\r': '\\\\r', '\\b': '\\\\b', '\\f': '\\\\f',\r\n    };\r\n\r\n// ## Placeholder class to represent already pretty-printed terms\r\nclass SerializedTerm extends Term {\r\n  // Pretty-printed nodes are not equal to any other node\r\n  // (e.g., [] does not equal [])\r\n  equals() {\r\n    return false;\r\n  }\r\n}\r\n\r\n// ## Constructor\r\nexport default class N3Writer {\r\n  constructor(outputStream, options) {\r\n    // ### `_prefixRegex` matches a prefixed name or IRI that begins with one of the added prefixes\r\n    this._prefixRegex = /$0^/;\r\n\r\n    // Shift arguments if the first argument is not a stream\r\n    if (outputStream && typeof outputStream.write !== 'function')\r\n      options = outputStream, outputStream = null;\r\n    options = options || {};\r\n    this._lists = options.lists;\r\n\r\n    // If no output stream given, send the output as string through the end callback\r\n    if (!outputStream) {\r\n      let output = '';\r\n      this._outputStream = {\r\n        write(chunk, encoding, done) { output += chunk; done && done(); },\r\n        end: done => { done && done(null, output); },\r\n      };\r\n      this._endStream = true;\r\n    }\r\n    else {\r\n      this._outputStream = outputStream;\r\n      this._endStream = options.end === undefined ? true : !!options.end;\r\n    }\r\n\r\n    // Initialize writer, depending on the format\r\n    this._subject = null;\r\n    if (!(/triple|quad/i).test(options.format)) {\r\n      this._lineMode = false;\r\n      this._graph = DEFAULTGRAPH;\r\n      this._baseIRI = options.baseIRI;\r\n      this._prefixIRIs = Object.create(null);\r\n      options.prefixes && this.addPrefixes(options.prefixes);\r\n    }\r\n    else {\r\n      this._lineMode = true;\r\n      this._writeQuad = this._writeQuadLine;\r\n    }\r\n  }\r\n\r\n  // ## Private methods\r\n\r\n  // ### Whether the current graph is the default graph\r\n  get _inDefaultGraph() {\r\n    return DEFAULTGRAPH.equals(this._graph);\r\n  }\r\n\r\n  // ### `_write` writes the argument to the output stream\r\n  _write(string, callback) {\r\n    this._outputStream.write(string, 'utf8', callback);\r\n  }\r\n\r\n  // ### `_writeQuad` writes the quad to the output stream\r\n  _writeQuad(subject, predicate, object, graph, done) {\r\n    try {\r\n      // Write the graph's label if it has changed\r\n      if (!graph.equals(this._graph)) {\r\n        // Close the previous graph and start the new one\r\n        this._write((this._subject === null ? '' : (this._inDefaultGraph ? '.\\n' : '\\n}\\n')) +\r\n                    (DEFAULTGRAPH.equals(graph) ? '' : `${this._encodeIriOrBlank(graph)} {\\n`));\r\n        this._graph = graph;\r\n        this._subject = null;\r\n      }\r\n      // Don't repeat the subject if it's the same\r\n      if (subject.equals(this._subject)) {\r\n        // Don't repeat the predicate if it's the same\r\n        if (predicate.equals(this._predicate))\r\n          this._write(`, ${this._encodeObject(object)}`, done);\r\n        // Same subject, different predicate\r\n        else\r\n          this._write(`;\\n    ${\r\n                      this._encodePredicate(this._predicate = predicate)} ${\r\n                      this._encodeObject(object)}`, done);\r\n      }\r\n      // Different subject; write the whole quad\r\n      else\r\n        this._write(`${(this._subject === null ? '' : '.\\n') +\r\n                    this._encodeSubject(this._subject = subject)} ${\r\n                    this._encodePredicate(this._predicate = predicate)} ${\r\n                    this._encodeObject(object)}`, done);\r\n    }\r\n    catch (error) { done && done(error); }\r\n  }\r\n\r\n  // ### `_writeQuadLine` writes the quad to the output stream as a single line\r\n  _writeQuadLine(subject, predicate, object, graph, done) {\r\n    // Write the quad without prefixes\r\n    delete this._prefixMatch;\r\n    this._write(this.quadToString(subject, predicate, object, graph), done);\r\n  }\r\n\r\n  // ### `quadToString` serializes a quad as a string\r\n  quadToString(subject, predicate, object, graph) {\r\n    return  `${this._encodeSubject(subject)} ${\r\n            this._encodeIriOrBlank(predicate)} ${\r\n            this._encodeObject(object)\r\n            }${graph && graph.value ? ` ${this._encodeIriOrBlank(graph)} .\\n` : ' .\\n'}`;\r\n  }\r\n\r\n  // ### `quadsToString` serializes an array of quads as a string\r\n  quadsToString(quads) {\r\n    return quads.map(t => {\r\n      return this.quadToString(t.subject, t.predicate, t.object, t.graph);\r\n    }).join('');\r\n  }\r\n\r\n  // ### `_encodeSubject` represents a subject\r\n  _encodeSubject(entity) {\r\n    return entity.termType === 'Quad' ?\r\n      this._encodeQuad(entity) : this._encodeIriOrBlank(entity);\r\n  }\r\n\r\n  // ### `_encodeIriOrBlank` represents an IRI or blank node\r\n  _encodeIriOrBlank(entity) {\r\n    // A blank node or list is represented as-is\r\n    if (entity.termType !== 'NamedNode') {\r\n      // If it is a list head, pretty-print it\r\n      if (this._lists && (entity.value in this._lists))\r\n        entity = this.list(this._lists[entity.value]);\r\n      return 'id' in entity ? entity.id : `_:${entity.value}`;\r\n    }\r\n    let iri = entity.value;\r\n    // Use relative IRIs if requested and possible\r\n    if (this._baseIRI && iri.startsWith(this._baseIRI))\r\n      iri = iri.substr(this._baseIRI.length);\r\n    // Escape special characters\r\n    if (escape.test(iri))\r\n      iri = iri.replace(escapeAll, characterReplacer);\r\n    // Try to represent the IRI as prefixed name\r\n    const prefixMatch = this._prefixRegex.exec(iri);\r\n    return !prefixMatch ? `<${iri}>` :\r\n           (!prefixMatch[1] ? iri : this._prefixIRIs[prefixMatch[1]] + prefixMatch[2]);\r\n  }\r\n\r\n  // ### `_encodeLiteral` represents a literal\r\n  _encodeLiteral(literal) {\r\n    // Escape special characters\r\n    let value = literal.value;\r\n    if (escape.test(value))\r\n      value = value.replace(escapeAll, characterReplacer);\r\n\r\n    // Write a language-tagged literal\r\n    if (literal.language)\r\n      return `\"${value}\"@${literal.language}`;\r\n\r\n    // Write dedicated literals per data type\r\n    if (this._lineMode) {\r\n      // Only abbreviate strings in N-Triples or N-Quads\r\n      if (literal.datatype.value === xsd.string)\r\n        return `\"${value}\"`;\r\n    }\r\n    else {\r\n      // Use common datatype abbreviations in Turtle or TriG\r\n      switch (literal.datatype.value) {\r\n      case xsd.string:\r\n        return `\"${value}\"`;\r\n      case xsd.boolean:\r\n        if (value === 'true' || value === 'false')\r\n          return value;\r\n        break;\r\n      case xsd.integer:\r\n        if (/^[+-]?\\d+$/.test(value))\r\n          return value;\r\n        break;\r\n      case xsd.decimal:\r\n        if (/^[+-]?\\d*\\.\\d+$/.test(value))\r\n          return value;\r\n        break;\r\n      case xsd.double:\r\n        if (/^[+-]?(?:\\d+\\.\\d*|\\.?\\d+)[eE][+-]?\\d+$/.test(value))\r\n          return value;\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Write a regular datatyped literal\r\n    return `\"${value}\"^^${this._encodeIriOrBlank(literal.datatype)}`;\r\n  }\r\n\r\n  // ### `_encodePredicate` represents a predicate\r\n  _encodePredicate(predicate) {\r\n    return predicate.value === rdf.type ? 'a' : this._encodeIriOrBlank(predicate);\r\n  }\r\n\r\n  // ### `_encodeObject` represents an object\r\n  _encodeObject(object) {\r\n    switch (object.termType) {\r\n    case 'Quad':\r\n      return this._encodeQuad(object);\r\n    case 'Literal':\r\n      return this._encodeLiteral(object);\r\n    default:\r\n      return this._encodeIriOrBlank(object);\r\n    }\r\n  }\r\n\r\n  // ### `_encodeQuad` encodes an RDF* quad\r\n  _encodeQuad({ subject, predicate, object, graph }) {\r\n    return `<<${\r\n      this._encodeSubject(subject)} ${\r\n      this._encodePredicate(predicate)} ${\r\n      this._encodeObject(object)}${\r\n      isDefaultGraph(graph) ? '' : ` ${this._encodeIriOrBlank(graph)}`}>>`;\r\n  }\r\n\r\n  // ### `_blockedWrite` replaces `_write` after the writer has been closed\r\n  _blockedWrite() {\r\n    throw new Error('Cannot write because the writer has been closed.');\r\n  }\r\n\r\n  // ### `addQuad` adds the quad to the output stream\r\n  addQuad(subject, predicate, object, graph, done) {\r\n    // The quad was given as an object, so shift parameters\r\n    if (object === undefined)\r\n      this._writeQuad(subject.subject, subject.predicate, subject.object, subject.graph, predicate);\r\n    // The optional `graph` parameter was not provided\r\n    else if (typeof graph === 'function')\r\n      this._writeQuad(subject, predicate, object, DEFAULTGRAPH, graph);\r\n    // The `graph` parameter was provided\r\n    else\r\n      this._writeQuad(subject, predicate, object, graph || DEFAULTGRAPH, done);\r\n  }\r\n\r\n  // ### `addQuads` adds the quads to the output stream\r\n  addQuads(quads) {\r\n    for (let i = 0; i < quads.length; i++)\r\n      this.addQuad(quads[i]);\r\n  }\r\n\r\n  // ### `addPrefix` adds the prefix to the output stream\r\n  addPrefix(prefix, iri, done) {\r\n    const prefixes = {};\r\n    prefixes[prefix] = iri;\r\n    this.addPrefixes(prefixes, done);\r\n  }\r\n\r\n  // ### `addPrefixes` adds the prefixes to the output stream\r\n  addPrefixes(prefixes, done) {\r\n    // Ignore prefixes if not supported by the serialization\r\n    if (!this._prefixIRIs)\r\n      return done && done();\r\n\r\n    // Write all new prefixes\r\n    let hasPrefixes = false;\r\n    for (let prefix in prefixes) {\r\n      let iri = prefixes[prefix];\r\n      if (typeof iri !== 'string')\r\n        iri = iri.value;\r\n      hasPrefixes = true;\r\n      // Finish a possible pending quad\r\n      if (this._subject !== null) {\r\n        this._write(this._inDefaultGraph ? '.\\n' : '\\n}\\n');\r\n        this._subject = null, this._graph = '';\r\n      }\r\n      // Store and write the prefix\r\n      this._prefixIRIs[iri] = (prefix += ':');\r\n      this._write(`@prefix ${prefix} <${iri}>.\\n`);\r\n    }\r\n    // Recreate the prefix matcher\r\n    if (hasPrefixes) {\r\n      let IRIlist = '', prefixList = '';\r\n      for (const prefixIRI in this._prefixIRIs) {\r\n        IRIlist += IRIlist ? `|${prefixIRI}` : prefixIRI;\r\n        prefixList += (prefixList ? '|' : '') + this._prefixIRIs[prefixIRI];\r\n      }\r\n      IRIlist = IRIlist.replace(/[\\]\\/\\(\\)\\*\\+\\?\\.\\\\\\$]/g, '\\\\$&');\r\n      this._prefixRegex = new RegExp(`^(?:${prefixList})[^\\/]*$|` +\r\n                                     `^(${IRIlist})([a-zA-Z][\\\\-_a-zA-Z0-9]*)$`);\r\n    }\r\n    // End a prefix block with a newline\r\n    this._write(hasPrefixes ? '\\n' : '', done);\r\n  }\r\n\r\n  // ### `blank` creates a blank node with the given content\r\n  blank(predicate, object) {\r\n    let children = predicate, child, length;\r\n    // Empty blank node\r\n    if (predicate === undefined)\r\n      children = [];\r\n    // Blank node passed as blank(Term(\"predicate\"), Term(\"object\"))\r\n    else if (predicate.termType)\r\n      children = [{ predicate: predicate, object: object }];\r\n    // Blank node passed as blank({ predicate: predicate, object: object })\r\n    else if (!('length' in predicate))\r\n      children = [predicate];\r\n\r\n    switch (length = children.length) {\r\n    // Generate an empty blank node\r\n    case 0:\r\n      return new SerializedTerm('[]');\r\n    // Generate a non-nested one-triple blank node\r\n    case 1:\r\n      child = children[0];\r\n      if (!(child.object instanceof SerializedTerm))\r\n        return new SerializedTerm(`[ ${this._encodePredicate(child.predicate)} ${\r\n                                  this._encodeObject(child.object)} ]`);\r\n    // Generate a multi-triple or nested blank node\r\n    default:\r\n      let contents = '[';\r\n      // Write all triples in order\r\n      for (let i = 0; i < length; i++) {\r\n        child = children[i];\r\n        // Write only the object is the predicate is the same as the previous\r\n        if (child.predicate.equals(predicate))\r\n          contents += `, ${this._encodeObject(child.object)}`;\r\n        // Otherwise, write the predicate and the object\r\n        else {\r\n          contents += `${(i ? ';\\n  ' : '\\n  ') +\r\n                      this._encodePredicate(child.predicate)} ${\r\n                      this._encodeObject(child.object)}`;\r\n          predicate = child.predicate;\r\n        }\r\n      }\r\n      return new SerializedTerm(`${contents}\\n]`);\r\n    }\r\n  }\r\n\r\n  // ### `list` creates a list node with the given content\r\n  list(elements) {\r\n    const length = elements && elements.length || 0, contents = new Array(length);\r\n    for (let i = 0; i < length; i++)\r\n      contents[i] = this._encodeObject(elements[i]);\r\n    return new SerializedTerm(`(${contents.join(' ')})`);\r\n  }\r\n\r\n  // ### `end` signals the end of the output stream\r\n  end(done) {\r\n    // Finish a possible pending quad\r\n    if (this._subject !== null) {\r\n      this._write(this._inDefaultGraph ? '.\\n' : '\\n}\\n');\r\n      this._subject = null;\r\n    }\r\n    // Disallow further writing\r\n    this._write = this._blockedWrite;\r\n\r\n    // Try to end the underlying stream, ensuring done is called exactly one time\r\n    let singleDone = done && ((error, result) => { singleDone = null, done(error, result); });\r\n    if (this._endStream) {\r\n      try { return this._outputStream.end(singleDone); }\r\n      catch (error) { /* error closing stream */ }\r\n    }\r\n    singleDone && singleDone();\r\n  }\r\n}\r\n\r\n// Replaces a character by its escaped version\r\nfunction characterReplacer(character) {\r\n  // Replace a single character by its escaped version\r\n  let result = escapedCharacters[character];\r\n  if (result === undefined) {\r\n    // Replace a single character with its 4-bit unicode escape sequence\r\n    if (character.length === 1) {\r\n      result = character.charCodeAt(0).toString(16);\r\n      result = '\\\\u0000'.substr(0, 6 - result.length) + result;\r\n    }\r\n    // Replace a surrogate pair with its 8-bit unicode escape sequence\r\n    else {\r\n      result = ((character.charCodeAt(0) - 0xD800) * 0x400 +\r\n                 character.charCodeAt(1) + 0x2400).toString(16);\r\n      result = '\\\\U00000000'.substr(0, 10 - result.length) + result;\r\n    }\r\n  }\r\n  return result;\r\n}\r\n","// **N3Store** objects store N3 quads by graph in memory.\r\nimport { default as N3DataFactory, termToId, termFromId } from './N3DataFactory';\r\nimport { Readable } from 'readable-stream';\r\nimport namespaces from './IRIs';\r\n\r\n// ## Constructor\r\nexport default class N3Store {\r\n  constructor(quads, options) {\r\n    // The number of quads is initially zero\r\n    this._size = 0;\r\n    // `_graphs` contains subject, predicate, and object indexes per graph\r\n    this._graphs = Object.create(null);\r\n    // `_ids` maps entities such as `http://xmlns.com/foaf/0.1/name` to numbers,\r\n    // saving memory by using only numbers as keys in `_graphs`\r\n    this._id = 0;\r\n    this._ids = Object.create(null);\r\n    this._ids['><'] = 0; // dummy entry, so the first actual key is non-zero\r\n    this._entities = Object.create(null); // inverse of `_ids`\r\n    // `_blankNodeIndex` is the index of the last automatically named blank node\r\n    this._blankNodeIndex = 0;\r\n\r\n    // Shift parameters if `quads` is not given\r\n    if (!options && quads && !quads[0])\r\n      options = quads, quads = null;\r\n    options = options || {};\r\n    this._factory = options.factory || N3DataFactory;\r\n\r\n    // Add quads if passed\r\n    if (quads)\r\n      this.addQuads(quads);\r\n  }\r\n\r\n  // ## Public properties\r\n\r\n  // ### `size` returns the number of quads in the store\r\n  get size() {\r\n    // Return the quad count if if was cached\r\n    let size = this._size;\r\n    if (size !== null)\r\n      return size;\r\n\r\n    // Calculate the number of quads by counting to the deepest level\r\n    size = 0;\r\n    const graphs = this._graphs;\r\n    let subjects, subject;\r\n    for (const graphKey in graphs)\r\n      for (const subjectKey in (subjects = graphs[graphKey].subjects))\r\n        for (const predicateKey in (subject = subjects[subjectKey]))\r\n          size += Object.keys(subject[predicateKey]).length;\r\n    return this._size = size;\r\n  }\r\n\r\n  // ## Private methods\r\n\r\n  // ### `_addToIndex` adds a quad to a three-layered index.\r\n  // Returns if the index has changed, if the entry did not already exist.\r\n  _addToIndex(index0, key0, key1, key2) {\r\n    // Create layers as necessary\r\n    const index1 = index0[key0] || (index0[key0] = {});\r\n    const index2 = index1[key1] || (index1[key1] = {});\r\n    // Setting the key to _any_ value signals the presence of the quad\r\n    const existed = key2 in index2;\r\n    if (!existed)\r\n      index2[key2] = null;\r\n    return !existed;\r\n  }\r\n\r\n  // ### `_removeFromIndex` removes a quad from a three-layered index\r\n  _removeFromIndex(index0, key0, key1, key2) {\r\n    // Remove the quad from the index\r\n    const index1 = index0[key0], index2 = index1[key1];\r\n    delete index2[key2];\r\n\r\n    // Remove intermediary index layers if they are empty\r\n    for (const key in index2) return;\r\n    delete index1[key1];\r\n    for (const key in index1) return;\r\n    delete index0[key0];\r\n  }\r\n\r\n  // ### `_findInIndex` finds a set of quads in a three-layered index.\r\n  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.\r\n  // Any of these keys can be undefined, which is interpreted as a wildcard.\r\n  // `name0`, `name1`, and `name2` are the names of the keys at each level,\r\n  // used when reconstructing the resulting quad\r\n  // (for instance: _subject_, _predicate_, and _object_).\r\n  // Finally, `graph` will be the graph of the created quads.\r\n  // If `callback` is given, each result is passed through it\r\n  // and iteration halts when it returns truthy for any quad.\r\n  // If instead `array` is given, each result is added to the array.\r\n  _findInIndex(index0, key0, key1, key2, name0, name1, name2, graph, callback, array) {\r\n    let tmp, index1, index2;\r\n    // Depending on the number of variables, keys or reverse index are faster\r\n    const varCount = !key0 + !key1 + !key2,\r\n        entityKeys = varCount > 1 ? Object.keys(this._ids) : this._entities;\r\n\r\n    // If a key is specified, use only that part of index 0.\r\n    if (key0) (tmp = index0, index0 = {})[key0] = tmp[key0];\r\n    for (const value0 in index0) {\r\n      const entity0 = entityKeys[value0];\r\n\r\n      if (index1 = index0[value0]) {\r\n        // If a key is specified, use only that part of index 1.\r\n        if (key1) (tmp = index1, index1 = {})[key1] = tmp[key1];\r\n        for (const value1 in index1) {\r\n          const entity1 = entityKeys[value1];\r\n\r\n          if (index2 = index1[value1]) {\r\n            // If a key is specified, use only that part of index 2, if it exists.\r\n            const values = key2 ? (key2 in index2 ? [key2] : []) : Object.keys(index2);\r\n            // Create quads for all items found in index 2.\r\n            for (let l = 0; l < values.length; l++) {\r\n              const parts = { subject: null, predicate: null, object: null };\r\n              parts[name0] = termFromId(entity0, this._factory);\r\n              parts[name1] = termFromId(entity1, this._factory);\r\n              parts[name2] = termFromId(entityKeys[values[l]], this._factory);\r\n              const quad = this._factory.quad(\r\n                parts.subject, parts.predicate, parts.object, termFromId(graph, this._factory));\r\n              if (array)\r\n                array.push(quad);\r\n              else if (callback(quad))\r\n                return true;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return array;\r\n  }\r\n\r\n  // ### `_loop` executes the callback on all keys of index 0\r\n  _loop(index0, callback) {\r\n    for (const key0 in index0)\r\n      callback(key0);\r\n  }\r\n\r\n  // ### `_loopByKey0` executes the callback on all keys of a certain entry in index 0\r\n  _loopByKey0(index0, key0, callback) {\r\n    let index1, key1;\r\n    if (index1 = index0[key0]) {\r\n      for (key1 in index1)\r\n        callback(key1);\r\n    }\r\n  }\r\n\r\n  // ### `_loopByKey1` executes the callback on given keys of all entries in index 0\r\n  _loopByKey1(index0, key1, callback) {\r\n    let key0, index1;\r\n    for (key0 in index0) {\r\n      index1 = index0[key0];\r\n      if (index1[key1])\r\n        callback(key0);\r\n    }\r\n  }\r\n\r\n  // ### `_loopBy2Keys` executes the callback on given keys of certain entries in index 2\r\n  _loopBy2Keys(index0, key0, key1, callback) {\r\n    let index1, index2, key2;\r\n    if ((index1 = index0[key0]) && (index2 = index1[key1])) {\r\n      for (key2 in index2)\r\n        callback(key2);\r\n    }\r\n  }\r\n\r\n  // ### `_countInIndex` counts matching quads in a three-layered index.\r\n  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.\r\n  // Any of these keys can be undefined, which is interpreted as a wildcard.\r\n  _countInIndex(index0, key0, key1, key2) {\r\n    let count = 0, tmp, index1, index2;\r\n\r\n    // If a key is specified, count only that part of index 0\r\n    if (key0) (tmp = index0, index0 = {})[key0] = tmp[key0];\r\n    for (const value0 in index0) {\r\n      if (index1 = index0[value0]) {\r\n        // If a key is specified, count only that part of index 1\r\n        if (key1) (tmp = index1, index1 = {})[key1] = tmp[key1];\r\n        for (const value1 in index1) {\r\n          if (index2 = index1[value1]) {\r\n            // If a key is specified, count the quad if it exists\r\n            if (key2) (key2 in index2) && count++;\r\n            // Otherwise, count all quads\r\n            else count += Object.keys(index2).length;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return count;\r\n  }\r\n\r\n  // ### `_getGraphs` returns an array with the given graph,\r\n  // or all graphs if the argument is null or undefined.\r\n  _getGraphs(graph) {\r\n    if (!isString(graph))\r\n      return this._graphs;\r\n    const graphs = {};\r\n    graphs[graph] = this._graphs[graph];\r\n    return graphs;\r\n  }\r\n\r\n  // ### `_uniqueEntities` returns a function that accepts an entity ID\r\n  // and passes the corresponding entity to callback if it hasn't occurred before.\r\n  _uniqueEntities(callback) {\r\n    const uniqueIds = Object.create(null);\r\n    return id => {\r\n      if (!(id in uniqueIds)) {\r\n        uniqueIds[id] = true;\r\n        callback(termFromId(this._entities[id], this._factory));\r\n      }\r\n    };\r\n  }\r\n\r\n  // ## Public methods\r\n\r\n  // ### `add` adds the specified quad to the dataset.\r\n  // Returns the dataset instance it was called on.\r\n  // Existing quads, as defined in Quad.equals, will be ignored.\r\n  add(quad) {\r\n    this.addQuad(quad);\r\n    return this;\r\n  }\r\n\r\n  // ### `addQuad` adds a new quad to the store.\r\n  // Returns if the quad index has changed, if the quad did not already exist.\r\n  addQuad(subject, predicate, object, graph) {\r\n    // Shift arguments if a quad object is given instead of components\r\n    if (!predicate)\r\n      graph = subject.graph, object = subject.object,\r\n        predicate = subject.predicate, subject = subject.subject;\r\n\r\n    // Convert terms to internal string representation\r\n    subject = termToId(subject);\r\n    predicate = termToId(predicate);\r\n    object = termToId(object);\r\n    graph = termToId(graph);\r\n\r\n    // Find the graph that will contain the triple\r\n    let graphItem = this._graphs[graph];\r\n    // Create the graph if it doesn't exist yet\r\n    if (!graphItem) {\r\n      graphItem = this._graphs[graph] = { subjects: {}, predicates: {}, objects: {} };\r\n      // Freezing a graph helps subsequent `add` performance,\r\n      // and properties will never be modified anyway\r\n      Object.freeze(graphItem);\r\n    }\r\n\r\n    // Since entities can often be long IRIs, we avoid storing them in every index.\r\n    // Instead, we have a separate index that maps entities to numbers,\r\n    // which are then used as keys in the other indexes.\r\n    const ids = this._ids;\r\n    const entities = this._entities;\r\n    subject   = ids[subject]   || (ids[entities[++this._id] = subject]   = this._id);\r\n    predicate = ids[predicate] || (ids[entities[++this._id] = predicate] = this._id);\r\n    object    = ids[object]    || (ids[entities[++this._id] = object]    = this._id);\r\n\r\n    const changed = this._addToIndex(graphItem.subjects,   subject,   predicate, object);\r\n    this._addToIndex(graphItem.predicates, predicate, object,    subject);\r\n    this._addToIndex(graphItem.objects,    object,    subject,   predicate);\r\n\r\n    // The cached quad count is now invalid\r\n    this._size = null;\r\n    return changed;\r\n  }\r\n\r\n  // ### `addQuads` adds multiple quads to the store\r\n  addQuads(quads) {\r\n    for (let i = 0; i < quads.length; i++)\r\n      this.addQuad(quads[i]);\r\n  }\r\n\r\n  // ### `delete` removes the specified quad from the dataset.\r\n  // Returns the dataset instance it was called on.\r\n  delete(quad) {\r\n    this.removeQuad(quad);\r\n    return this;\r\n  }\r\n\r\n  // ### `has` determines whether a dataset includes a certain quad.\r\n  // Returns true or false as appropriate.\r\n  has(quad) {\r\n    const quads = this.getQuads(quad.subject, quad.predicate, quad.object, quad.graph);\r\n    return quads.length !== 0;\r\n  }\r\n\r\n  // ### `import` adds a stream of quads to the store\r\n  import(stream) {\r\n    stream.on('data', quad => { this.addQuad(quad); });\r\n    return stream;\r\n  }\r\n\r\n  // ### `removeQuad` removes a quad from the store if it exists\r\n  removeQuad(subject, predicate, object, graph) {\r\n    // Shift arguments if a quad object is given instead of components\r\n    if (!predicate)\r\n      graph = subject.graph, object = subject.object,\r\n        predicate = subject.predicate, subject = subject.subject;\r\n\r\n    // Convert terms to internal string representation\r\n    subject = termToId(subject);\r\n    predicate = termToId(predicate);\r\n    object = termToId(object);\r\n    graph = termToId(graph);\r\n\r\n    // Find internal identifiers for all components\r\n    // and verify the quad exists.\r\n    const ids = this._ids, graphs = this._graphs;\r\n    let graphItem, subjects, predicates;\r\n    if (!(subject    = ids[subject]) || !(predicate = ids[predicate]) ||\r\n        !(object     = ids[object])  || !(graphItem = graphs[graph])  ||\r\n        !(subjects   = graphItem.subjects[subject]) ||\r\n        !(predicates = subjects[predicate]) ||\r\n        !(object in predicates))\r\n      return false;\r\n\r\n    // Remove it from all indexes\r\n    this._removeFromIndex(graphItem.subjects,   subject,   predicate, object);\r\n    this._removeFromIndex(graphItem.predicates, predicate, object,    subject);\r\n    this._removeFromIndex(graphItem.objects,    object,    subject,   predicate);\r\n    if (this._size !== null) this._size--;\r\n\r\n    // Remove the graph if it is empty\r\n    for (subject in graphItem.subjects) return true;\r\n    delete graphs[graph];\r\n    return true;\r\n  }\r\n\r\n  // ### `removeQuads` removes multiple quads from the store\r\n  removeQuads(quads) {\r\n    for (let i = 0; i < quads.length; i++)\r\n      this.removeQuad(quads[i]);\r\n  }\r\n\r\n  // ### `remove` removes a stream of quads from the store\r\n  remove(stream) {\r\n    stream.on('data', quad => { this.removeQuad(quad); });\r\n    return stream;\r\n  }\r\n\r\n  // ### `removeMatches` removes all matching quads from the store\r\n  // Setting any field to `undefined` or `null` indicates a wildcard.\r\n  removeMatches(subject, predicate, object, graph) {\r\n    const stream = new Readable({ objectMode: true });\r\n\r\n    stream._read = () => {\r\n      for (const quad of this.getQuads(subject, predicate, object, graph))\r\n        stream.push(quad);\r\n      stream.push(null);\r\n    };\r\n\r\n    return this.remove(stream);\r\n  }\r\n\r\n  // ### `deleteGraph` removes all triples with the given graph from the store\r\n  deleteGraph(graph) {\r\n    return this.removeMatches(null, null, null, graph);\r\n  }\r\n\r\n  // ### `getQuads` returns an array of quads matching a pattern.\r\n  // Setting any field to `undefined` or `null` indicates a wildcard.\r\n  getQuads(subject, predicate, object, graph) {\r\n    // Convert terms to internal string representation\r\n    subject = subject && termToId(subject);\r\n    predicate = predicate && termToId(predicate);\r\n    object = object && termToId(object);\r\n    graph = graph && termToId(graph);\r\n\r\n    const quads = [], graphs = this._getGraphs(graph), ids = this._ids;\r\n    let content, subjectId, predicateId, objectId;\r\n\r\n    // Translate IRIs to internal index keys.\r\n    if (isString(subject)   && !(subjectId   = ids[subject])   ||\r\n        isString(predicate) && !(predicateId = ids[predicate]) ||\r\n        isString(object)    && !(objectId    = ids[object]))\r\n      return quads;\r\n\r\n    for (const graphId in graphs) {\r\n      // Only if the specified graph contains triples, there can be results\r\n      if (content = graphs[graphId]) {\r\n        // Choose the optimal index, based on what fields are present\r\n        if (subjectId) {\r\n          if (objectId)\r\n            // If subject and object are given, the object index will be the fastest\r\n            this._findInIndex(content.objects, objectId, subjectId, predicateId,\r\n                              'object', 'subject', 'predicate', graphId, null, quads);\r\n          else\r\n            // If only subject and possibly predicate are given, the subject index will be the fastest\r\n            this._findInIndex(content.subjects, subjectId, predicateId, null,\r\n                              'subject', 'predicate', 'object', graphId, null, quads);\r\n        }\r\n        else if (predicateId)\r\n          // If only predicate and possibly object are given, the predicate index will be the fastest\r\n          this._findInIndex(content.predicates, predicateId, objectId, null,\r\n                            'predicate', 'object', 'subject', graphId, null, quads);\r\n        else if (objectId)\r\n          // If only object is given, the object index will be the fastest\r\n          this._findInIndex(content.objects, objectId, null, null,\r\n                            'object', 'subject', 'predicate', graphId, null, quads);\r\n        else\r\n          // If nothing is given, iterate subjects and predicates first\r\n          this._findInIndex(content.subjects, null, null, null,\r\n                            'subject', 'predicate', 'object', graphId, null, quads);\r\n      }\r\n    }\r\n    return quads;\r\n  }\r\n\r\n  // ### `match` returns a new dataset that is comprised of all quads in the current instance matching the given arguments.\r\n  // The logic described in Quad Matching is applied for each quad in this dataset to check if it should be included in the output dataset.\r\n  // Note: This method always returns a new DatasetCore, even if that dataset contains no quads.\r\n  // Note: Since a DatasetCore is an unordered set, the order of the quads within the returned sequence is arbitrary.\r\n  // Setting any field to `undefined` or `null` indicates a wildcard.\r\n  // For backwards compatibility, the object return also implements the Readable stream interface.\r\n  match(subject, predicate, object, graph) {\r\n    return new DatasetCoreAndReadableStream(this, subject, predicate, object, graph);\r\n  }\r\n\r\n  // ### `countQuads` returns the number of quads matching a pattern.\r\n  // Setting any field to `undefined` or `null` indicates a wildcard.\r\n  countQuads(subject, predicate, object, graph) {\r\n    // Convert terms to internal string representation\r\n    subject = subject && termToId(subject);\r\n    predicate = predicate && termToId(predicate);\r\n    object = object && termToId(object);\r\n    graph = graph && termToId(graph);\r\n\r\n    const graphs = this._getGraphs(graph), ids = this._ids;\r\n    let count = 0, content, subjectId, predicateId, objectId;\r\n\r\n    // Translate IRIs to internal index keys.\r\n    if (isString(subject)   && !(subjectId   = ids[subject])   ||\r\n        isString(predicate) && !(predicateId = ids[predicate]) ||\r\n        isString(object)    && !(objectId    = ids[object]))\r\n      return 0;\r\n\r\n    for (const graphId in graphs) {\r\n      // Only if the specified graph contains triples, there can be results\r\n      if (content = graphs[graphId]) {\r\n        // Choose the optimal index, based on what fields are present\r\n        if (subject) {\r\n          if (object)\r\n            // If subject and object are given, the object index will be the fastest\r\n            count += this._countInIndex(content.objects, objectId, subjectId, predicateId);\r\n          else\r\n            // If only subject and possibly predicate are given, the subject index will be the fastest\r\n            count += this._countInIndex(content.subjects, subjectId, predicateId, objectId);\r\n        }\r\n        else if (predicate) {\r\n          // If only predicate and possibly object are given, the predicate index will be the fastest\r\n          count += this._countInIndex(content.predicates, predicateId, objectId, subjectId);\r\n        }\r\n        else {\r\n          // If only object is possibly given, the object index will be the fastest\r\n          count += this._countInIndex(content.objects, objectId, subjectId, predicateId);\r\n        }\r\n      }\r\n    }\r\n    return count;\r\n  }\r\n\r\n  // ### `forEach` executes the callback on all quads.\r\n  // Setting any field to `undefined` or `null` indicates a wildcard.\r\n  forEach(callback, subject, predicate, object, graph) {\r\n    this.some(quad => {\r\n      callback(quad);\r\n      return false;\r\n    }, subject, predicate, object, graph);\r\n  }\r\n\r\n  // ### `every` executes the callback on all quads,\r\n  // and returns `true` if it returns truthy for all them.\r\n  // Setting any field to `undefined` or `null` indicates a wildcard.\r\n  every(callback, subject, predicate, object, graph) {\r\n    let some = false;\r\n    const every = !this.some(quad => {\r\n      some = true;\r\n      return !callback(quad);\r\n    }, subject, predicate, object, graph);\r\n    return some && every;\r\n  }\r\n\r\n  // ### `some` executes the callback on all quads,\r\n  // and returns `true` if it returns truthy for any of them.\r\n  // Setting any field to `undefined` or `null` indicates a wildcard.\r\n  some(callback, subject, predicate, object, graph) {\r\n    // Convert terms to internal string representation\r\n    subject = subject && termToId(subject);\r\n    predicate = predicate && termToId(predicate);\r\n    object = object && termToId(object);\r\n    graph = graph && termToId(graph);\r\n\r\n    const graphs = this._getGraphs(graph), ids = this._ids;\r\n    let content, subjectId, predicateId, objectId;\r\n\r\n    // Translate IRIs to internal index keys.\r\n    if (isString(subject)   && !(subjectId   = ids[subject])   ||\r\n        isString(predicate) && !(predicateId = ids[predicate]) ||\r\n        isString(object)    && !(objectId    = ids[object]))\r\n      return false;\r\n\r\n    for (const graphId in graphs) {\r\n      // Only if the specified graph contains triples, there can be results\r\n      if (content = graphs[graphId]) {\r\n        // Choose the optimal index, based on what fields are present\r\n        if (subjectId) {\r\n          if (objectId) {\r\n          // If subject and object are given, the object index will be the fastest\r\n            if (this._findInIndex(content.objects, objectId, subjectId, predicateId,\r\n                                  'object', 'subject', 'predicate', graphId, callback, null))\r\n              return true;\r\n          }\r\n          else\r\n            // If only subject and possibly predicate are given, the subject index will be the fastest\r\n            if (this._findInIndex(content.subjects, subjectId, predicateId, null,\r\n                                  'subject', 'predicate', 'object', graphId, callback, null))\r\n              return true;\r\n        }\r\n        else if (predicateId) {\r\n          // If only predicate and possibly object are given, the predicate index will be the fastest\r\n          if (this._findInIndex(content.predicates, predicateId, objectId, null,\r\n                                'predicate', 'object', 'subject', graphId, callback, null)) {\r\n            return true;\r\n          }\r\n        }\r\n        else if (objectId) {\r\n          // If only object is given, the object index will be the fastest\r\n          if (this._findInIndex(content.objects, objectId, null, null,\r\n                                'object', 'subject', 'predicate', graphId, callback, null)) {\r\n            return true;\r\n          }\r\n        }\r\n        else\r\n        // If nothing is given, iterate subjects and predicates first\r\n        if (this._findInIndex(content.subjects, null, null, null,\r\n                              'subject', 'predicate', 'object', graphId, callback, null)) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // ### `getSubjects` returns all subjects that match the pattern.\r\n  // Setting any field to `undefined` or `null` indicates a wildcard.\r\n  getSubjects(predicate, object, graph) {\r\n    const results = [];\r\n    this.forSubjects(s => { results.push(s); }, predicate, object, graph);\r\n    return results;\r\n  }\r\n\r\n  // ### `forSubjects` executes the callback on all subjects that match the pattern.\r\n  // Setting any field to `undefined` or `null` indicates a wildcard.\r\n  forSubjects(callback, predicate, object, graph) {\r\n    // Convert terms to internal string representation\r\n    predicate = predicate && termToId(predicate);\r\n    object = object && termToId(object);\r\n    graph = graph && termToId(graph);\r\n\r\n    const ids = this._ids, graphs = this._getGraphs(graph);\r\n    let content, predicateId, objectId;\r\n    callback = this._uniqueEntities(callback);\r\n\r\n    // Translate IRIs to internal index keys.\r\n    if (isString(predicate) && !(predicateId = ids[predicate]) ||\r\n        isString(object)    && !(objectId    = ids[object]))\r\n      return;\r\n\r\n    for (graph in graphs) {\r\n      // Only if the specified graph contains triples, there can be results\r\n      if (content = graphs[graph]) {\r\n        // Choose optimal index based on which fields are wildcards\r\n        if (predicateId) {\r\n          if (objectId)\r\n            // If predicate and object are given, the POS index is best.\r\n            this._loopBy2Keys(content.predicates, predicateId, objectId, callback);\r\n          else\r\n            // If only predicate is given, the SPO index is best.\r\n            this._loopByKey1(content.subjects, predicateId, callback);\r\n        }\r\n        else if (objectId)\r\n          // If only object is given, the OSP index is best.\r\n          this._loopByKey0(content.objects, objectId, callback);\r\n        else\r\n          // If no params given, iterate all the subjects\r\n          this._loop(content.subjects, callback);\r\n      }\r\n    }\r\n  }\r\n\r\n  // ### `getPredicates` returns all predicates that match the pattern.\r\n  // Setting any field to `undefined` or `null` indicates a wildcard.\r\n  getPredicates(subject, object, graph) {\r\n    const results = [];\r\n    this.forPredicates(p => { results.push(p); }, subject, object, graph);\r\n    return results;\r\n  }\r\n\r\n  // ### `forPredicates` executes the callback on all predicates that match the pattern.\r\n  // Setting any field to `undefined` or `null` indicates a wildcard.\r\n  forPredicates(callback, subject, object, graph) {\r\n    // Convert terms to internal string representation\r\n    subject = subject && termToId(subject);\r\n    object = object && termToId(object);\r\n    graph = graph && termToId(graph);\r\n\r\n    const ids = this._ids, graphs = this._getGraphs(graph);\r\n    let content, subjectId, objectId;\r\n    callback = this._uniqueEntities(callback);\r\n\r\n    // Translate IRIs to internal index keys.\r\n    if (isString(subject) && !(subjectId = ids[subject]) ||\r\n        isString(object)  && !(objectId  = ids[object]))\r\n      return;\r\n\r\n    for (graph in graphs) {\r\n      // Only if the specified graph contains triples, there can be results\r\n      if (content = graphs[graph]) {\r\n        // Choose optimal index based on which fields are wildcards\r\n        if (subjectId) {\r\n          if (objectId)\r\n            // If subject and object are given, the OSP index is best.\r\n            this._loopBy2Keys(content.objects, objectId, subjectId, callback);\r\n          else\r\n            // If only subject is given, the SPO index is best.\r\n            this._loopByKey0(content.subjects, subjectId, callback);\r\n        }\r\n        else if (objectId)\r\n          // If only object is given, the POS index is best.\r\n          this._loopByKey1(content.predicates, objectId, callback);\r\n        else\r\n          // If no params given, iterate all the predicates.\r\n          this._loop(content.predicates, callback);\r\n      }\r\n    }\r\n  }\r\n\r\n  // ### `getObjects` returns all objects that match the pattern.\r\n  // Setting any field to `undefined` or `null` indicates a wildcard.\r\n  getObjects(subject, predicate, graph) {\r\n    const results = [];\r\n    this.forObjects(o => { results.push(o); }, subject, predicate, graph);\r\n    return results;\r\n  }\r\n\r\n  // ### `forObjects` executes the callback on all objects that match the pattern.\r\n  // Setting any field to `undefined` or `null` indicates a wildcard.\r\n  forObjects(callback, subject, predicate, graph) {\r\n    // Convert terms to internal string representation\r\n    subject = subject && termToId(subject);\r\n    predicate = predicate && termToId(predicate);\r\n    graph = graph && termToId(graph);\r\n\r\n    const ids = this._ids, graphs = this._getGraphs(graph);\r\n    let content, subjectId, predicateId;\r\n    callback = this._uniqueEntities(callback);\r\n\r\n    // Translate IRIs to internal index keys.\r\n    if (isString(subject)   && !(subjectId   = ids[subject]) ||\r\n        isString(predicate) && !(predicateId = ids[predicate]))\r\n      return;\r\n\r\n    for (graph in graphs) {\r\n      // Only if the specified graph contains triples, there can be results\r\n      if (content = graphs[graph]) {\r\n        // Choose optimal index based on which fields are wildcards\r\n        if (subjectId) {\r\n          if (predicateId)\r\n            // If subject and predicate are given, the SPO index is best.\r\n            this._loopBy2Keys(content.subjects, subjectId, predicateId, callback);\r\n          else\r\n            // If only subject is given, the OSP index is best.\r\n            this._loopByKey1(content.objects, subjectId, callback);\r\n        }\r\n        else if (predicateId)\r\n          // If only predicate is given, the POS index is best.\r\n          this._loopByKey0(content.predicates, predicateId, callback);\r\n        else\r\n          // If no params given, iterate all the objects.\r\n          this._loop(content.objects, callback);\r\n      }\r\n    }\r\n  }\r\n\r\n  // ### `getGraphs` returns all graphs that match the pattern.\r\n  // Setting any field to `undefined` or `null` indicates a wildcard.\r\n  getGraphs(subject, predicate, object) {\r\n    const results = [];\r\n    this.forGraphs(g => { results.push(g); }, subject, predicate, object);\r\n    return results;\r\n  }\r\n\r\n  // ### `forGraphs` executes the callback on all graphs that match the pattern.\r\n  // Setting any field to `undefined` or `null` indicates a wildcard.\r\n  forGraphs(callback, subject, predicate, object) {\r\n    for (const graph in this._graphs) {\r\n      this.some(quad => {\r\n        callback(quad.graph);\r\n        return true; // Halt iteration of some()\r\n      }, subject, predicate, object, graph);\r\n    }\r\n  }\r\n\r\n  // ### `createBlankNode` creates a new blank node, returning its name\r\n  createBlankNode(suggestedName) {\r\n    let name, index;\r\n    // Generate a name based on the suggested name\r\n    if (suggestedName) {\r\n      name = suggestedName = `_:${suggestedName}`, index = 1;\r\n      while (this._ids[name])\r\n        name = suggestedName + index++;\r\n    }\r\n    // Generate a generic blank node name\r\n    else {\r\n      do { name = `_:b${this._blankNodeIndex++}`; }\r\n      while (this._ids[name]);\r\n    }\r\n    // Add the blank node to the entities, avoiding the generation of duplicates\r\n    this._ids[name] = ++this._id;\r\n    this._entities[this._id] = name;\r\n    return this._factory.blankNode(name.substr(2));\r\n  }\r\n\r\n  // ### `extractLists` finds and removes all list triples\r\n  // and returns the items per list.\r\n  extractLists({ remove = false, ignoreErrors = false } = {}) {\r\n    const lists = {}; // has scalar keys so could be a simple Object\r\n    const onError = ignoreErrors ? (() => true) :\r\n                  ((node, message) => { throw new Error(`${node.value} ${message}`); });\r\n\r\n    // Traverse each list from its tail\r\n    const tails = this.getQuads(null, namespaces.rdf.rest, namespaces.rdf.nil, null);\r\n    const toRemove = remove ? [...tails] : [];\r\n    tails.forEach(tailQuad => {\r\n      const items = [];             // the members found as objects of rdf:first quads\r\n      let malformed = false;      // signals whether the current list is malformed\r\n      let head;                   // the head of the list (_:b1 in above example)\r\n      let headPos;                // set to subject or object when head is set\r\n      const graph = tailQuad.graph; // make sure list is in exactly one graph\r\n\r\n      // Traverse the list from tail to end\r\n      let current = tailQuad.subject;\r\n      while (current && !malformed) {\r\n        const objectQuads = this.getQuads(null, null, current, null);\r\n        const subjectQuads = this.getQuads(current, null, null, null);\r\n        let quad, first = null, rest = null, parent = null;\r\n\r\n        // Find the first and rest of this list node\r\n        for (let i = 0; i < subjectQuads.length && !malformed; i++) {\r\n          quad = subjectQuads[i];\r\n          if (!quad.graph.equals(graph))\r\n            malformed = onError(current, 'not confined to single graph');\r\n          else if (head)\r\n            malformed = onError(current, 'has non-list arcs out');\r\n\r\n          // one rdf:first\r\n          else if (quad.predicate.value === namespaces.rdf.first) {\r\n            if (first)\r\n              malformed = onError(current, 'has multiple rdf:first arcs');\r\n            else\r\n              toRemove.push(first = quad);\r\n          }\r\n\r\n          // one rdf:rest\r\n          else if (quad.predicate.value === namespaces.rdf.rest) {\r\n            if (rest)\r\n              malformed = onError(current, 'has multiple rdf:rest arcs');\r\n            else\r\n              toRemove.push(rest = quad);\r\n          }\r\n\r\n          // alien triple\r\n          else if (objectQuads.length)\r\n            malformed = onError(current, 'can\\'t be subject and object');\r\n          else {\r\n            head = quad; // e.g. { (1 2 3) :p :o }\r\n            headPos = 'subject';\r\n          }\r\n        }\r\n\r\n        // { :s :p (1 2) } arrives here with no head\r\n        // { (1 2) :p :o } arrives here with head set to the list.\r\n        for (let i = 0; i < objectQuads.length && !malformed; ++i) {\r\n          quad = objectQuads[i];\r\n          if (head)\r\n            malformed = onError(current, 'can\\'t have coreferences');\r\n          // one rdf:rest\r\n          else if (quad.predicate.value === namespaces.rdf.rest) {\r\n            if (parent)\r\n              malformed = onError(current, 'has incoming rdf:rest arcs');\r\n            else\r\n              parent = quad;\r\n          }\r\n          else {\r\n            head = quad; // e.g. { :s :p (1 2) }\r\n            headPos = 'object';\r\n          }\r\n        }\r\n\r\n        // Store the list item and continue with parent\r\n        if (!first)\r\n          malformed = onError(current, 'has no list head');\r\n        else\r\n          items.unshift(first.object);\r\n        current = parent && parent.subject;\r\n      }\r\n\r\n      // Don't remove any quads if the list is malformed\r\n      if (malformed)\r\n        remove = false;\r\n      // Store the list under the value of its head\r\n      else if (head)\r\n        lists[head[headPos].value] = items;\r\n    });\r\n\r\n    // Remove list quads if requested\r\n    if (remove)\r\n      this.removeQuads(toRemove);\r\n    return lists;\r\n  }\r\n\r\n  // ### Store is an iterable.\r\n  // Can be used where iterables are expected: for...of loops, array spread operator,\r\n  // `yield*`, and destructuring assignment (order is not guaranteed).\r\n  *[Symbol.iterator]() {\r\n    yield* this.getQuads();\r\n  }\r\n}\r\n\r\n// Determines whether the argument is a string\r\nfunction isString(s) {\r\n  return typeof s === 'string' || s instanceof String;\r\n}\r\n\r\n/**\r\n * A class that implements both DatasetCore and Readable.\r\n */\r\nclass DatasetCoreAndReadableStream extends Readable {\r\n  constructor(n3Store, subject, predicate, object, graph) {\r\n    super({ objectMode: true });\r\n    Object.assign(this, { n3Store, subject, predicate, object, graph });\r\n  }\r\n\r\n  get filtered() {\r\n    if (!this._filtered) {\r\n      const { n3Store, graph, object, predicate, subject } = this;\r\n      const quads = n3Store.getQuads(subject, predicate, object, graph);\r\n      this._filtered = new N3Store(quads, { factory: n3Store._factory });\r\n    }\r\n    return this._filtered;\r\n  }\r\n\r\n  _read() {\r\n    for (const quad of this.filtered.getQuads())\r\n      this.push(quad);\r\n    this.push(null);\r\n  }\r\n\r\n  add(quad) {\r\n    return this.filtered.add(quad);\r\n  }\r\n\r\n  delete(quad) {\r\n    return this.filtered.delete(quad);\r\n  }\r\n\r\n  has(quad) {\r\n    return this.filtered.has(quad);\r\n  }\r\n\r\n  match(subject, predicate, object, graph) {\r\n    return new DatasetCoreAndReadableStream(this.filtered, subject, predicate, object, graph);\r\n  }\r\n\r\n  *[Symbol.iterator]() {\r\n    yield* this.filtered.getQuads();\r\n  }\r\n}\r\n","// **N3StreamParser** parses a text stream into a quad stream.\r\nimport N3Parser from './N3Parser';\r\nimport { Transform } from 'readable-stream';\r\n\r\n// ## Constructor\r\nexport default class N3StreamParser extends Transform {\r\n  constructor(options) {\r\n    super({ decodeStrings: true });\r\n    this._readableState.objectMode = true;\r\n\r\n    // Set up parser with dummy stream to obtain `data` and `end` callbacks\r\n    const parser = new N3Parser(options);\r\n    let onData, onEnd;\r\n    parser.parse({\r\n      on: (event, callback) => {\r\n        switch (event) {\r\n        case 'data': onData = callback; break;\r\n        case 'end':   onEnd = callback; break;\r\n        }\r\n      },\r\n    },\r\n      // Handle quads by pushing them down the pipeline\r\n      (error, quad) => { error && this.emit('error', error) || quad && this.push(quad); },\r\n      // Emit prefixes through the `prefix` event\r\n      (prefix, uri) => { this.emit('prefix', prefix, uri); }\r\n    );\r\n\r\n    // Implement Transform methods through parser callbacks\r\n    this._transform = (chunk, encoding, done) => { onData(chunk); done(); };\r\n    this._flush = done => { onEnd(); done(); };\r\n  }\r\n\r\n  // ### Parses a stream of strings\r\n  import(stream) {\r\n    stream.on('data',  chunk => { this.write(chunk); });\r\n    stream.on('end',   ()      => { this.end(); });\r\n    stream.on('error', error => { this.emit('error', error); });\r\n    return this;\r\n  }\r\n}\r\n","// **N3StreamWriter** serializes a quad stream into a text stream.\r\nimport { Transform } from 'readable-stream';\r\nimport N3Writer from './N3Writer';\r\n\r\n// ## Constructor\r\nexport default class N3StreamWriter extends Transform {\r\n  constructor(options) {\r\n    super({ encoding: 'utf8', writableObjectMode: true });\r\n\r\n    // Set up writer with a dummy stream object\r\n    const writer = this._writer = new N3Writer({\r\n      write: (quad, encoding, callback) => { this.push(quad); callback && callback(); },\r\n      end: callback => { this.push(null); callback && callback(); },\r\n    }, options);\r\n\r\n    // Implement Transform methods on top of writer\r\n    this._transform = (quad, encoding, done) => { writer.addQuad(quad, done); };\r\n    this._flush = done => { writer.end(done); };\r\n  }\r\n\r\n// ### Serializes a stream of quads\r\n  import(stream) {\r\n    stream.on('data',   quad => { this.write(quad); });\r\n    stream.on('end',    () => { this.end(); });\r\n    stream.on('error',  error => { this.emit('error', error); });\r\n    stream.on('prefix', (prefix, iri) => { this._writer.addPrefix(prefix, iri); });\r\n    return this;\r\n  }\r\n}\r\n","import Lexer from './N3Lexer';\r\nimport Parser from './N3Parser';\r\nimport Writer from './N3Writer';\r\nimport Store from './N3Store';\r\nimport StreamParser from './N3StreamParser';\r\nimport StreamWriter from './N3StreamWriter';\r\nimport * as Util from './N3Util';\r\n\r\nimport {\r\n  default as DataFactory,\r\n\r\n  Term,\r\n  NamedNode,\r\n  Literal,\r\n  BlankNode,\r\n  Variable,\r\n  DefaultGraph,\r\n  Quad,\r\n  Triple,\r\n\r\n  termFromId,\r\n  termToId,\r\n} from './N3DataFactory';\r\n\r\nexport {\r\n  Lexer,\r\n  Parser,\r\n  Writer,\r\n  Store,\r\n  StreamParser,\r\n  StreamWriter,\r\n  Util,\r\n\r\n  DataFactory,\r\n\r\n  Term,\r\n  NamedNode,\r\n  Literal,\r\n  BlankNode,\r\n  Variable,\r\n  DefaultGraph,\r\n  Quad,\r\n  Triple,\r\n\r\n  termFromId,\r\n  termToId,\r\n};\r\n"]}