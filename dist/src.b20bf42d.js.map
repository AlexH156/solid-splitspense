{"version":3,"sources":["node_modules/n3/src/IRIs.js","node_modules/queue-microtask/index.js","node_modules/n3/src/N3Lexer.js","node_modules/n3/src/N3Util.js","node_modules/n3/src/N3DataFactory.js","node_modules/n3/src/N3Parser.js","node_modules/n3/src/N3Writer.js","node_modules/n3/src/N3Store.js","node_modules/n3/src/N3StreamParser.js","node_modules/n3/src/N3StreamWriter.js","node_modules/n3/src/index.js","node_modules/parcel-bundler/src/builtins/hmr-runtime.js"],"names":["RDF","XSD","SWAP","xsd","decimal","boolean","double","integer","string","rdf","type","nil","first","rest","langString","owl","sameAs","r","forSome","forAll","log","implies","namespaces","escapeSequence","escapeReplacements","illegalIriChars","lineModeRegExps","_iri","_unescapedIri","_simpleQuotedString","_langcode","_blank","_newline","_comment","_whitespace","_endOfFile","invalidRegExp","N3Lexer","constructor","options","_simpleApostropheString","_prefix","_prefixed","_variable","_number","_boolean","_keyword","_sparqlKeyword","_shortPredicates","_lineMode","lineMode","_n3Mode","key","RegExp","n3","_comments","comments","_literalClosingPos","_tokenizeToEnd","callback","inputFinished","input","_input","outputComments","whiteSpaceMatch","comment","exec","line","_line","value","prefix","substr","length","test","firstChar","match","matchLength","inconclusive","_previousMarker","_unescape","reportSyntaxError","_parseLiteral","toUpperCase","token","previousToken","self","_syntaxError","item","invalid","replaced","replace","sequence","unicode4","unicode8","escapedChar","String","fromCharCode","Number","parseInt","charCode","opening","openingLength","closingPos","Math","max","indexOf","backslashCount","raw","substring","lines","split","issue","err","Error","context","undefined","tokenize","tokens","error","e","t","push","_pendingBuffer","setEncoding","on","data","Buffer","concat","isNamedNode","term","termType","isBlankNode","isLiteral","isVariable","isDefaultGraph","inDefaultGraph","quad","graph","iri","factory","prefixes","defaultPrefixes","Object","create","processPrefix","N3DataFactory","cache","local","namedNode","DEFAULTGRAPH","_blankNodeCounter","escapedLiteral","quadId","DataFactory","blankNode","variable","literal","defaultGraph","triple","Term","id","equals","other","toJSON","NamedNode","Literal","lastIndexOf","language","atPos","toLowerCase","datatype","datatypeString","dtPos","char","BlankNode","name","Variable","DefaultGraph","termFromId","endPos","components","unescapeQuotes","termToId","escapeQuotes","subject","predicate","object","Quad","_subject","_predicate","_object","_graph","_","quoted","languageOrDataType","isFinite","isInteger","isNaN","blankNodePrefix","N3Parser","_contextStack","_setBase","baseIRI","initDataFactory","format","isTurtle","isTriG","isNTriples","isNQuads","isN3","isLineMode","_supportsNamedGraphs","_readPredicateOrNamedGraph","_readPredicate","_supportsQuads","_supportsRDFStar","_resolveRelativeIRI","_blankNodePrefix","_lexer","lexer","_explicitQuantifiers","explicitQuantifiers","_resetBlankNodePrefix","_base","_basePath","fragmentPos","_baseRoot","_baseScheme","_saveContext","n3Mode","inverse","_inversePredicate","blankPrefix","_prefixes","quantified","_quantified","_restoreContext","pop","_readInTopContext","_error","_callback","_sparqlStyle","_readPrefix","_readBaseIRI","_readSubject","_readNamedGraphLabel","_readEntity","quantifier","_resolveIRI","_namedNode","_blankNode","_readBlankNodeHead","RDF_NIL","_readListItem","_readPunctuation","N3_FORSOME","_quantifier","_readQuantifierList","N3_FORALL","_literalValue","_completeSubjectLiteral","_literal","_getPathReader","ABBREVIATIONS","_readBlankNodeTail","_readObject","_readDataTypeOrLang","_getContextEndReader","_readGraph","_readBlankNodePunctuation","_emit","empty","_readPredicateAfterBlank","list","next","previousList","stack","parent","RDF_FIRST","_readListItemDataTypeOrLang","RDF_REST","_completeObjectLiteral","_completeLiteral","listItem","completed","_readCallback","_readFormulaTail","inversePredicate","_readQuadPunctuation","_readPrefixIRI","prefixNode","_prefixCallback","_readDeclarationPunctuation","_readNamedGraphBlankLabel","entity","QUANTIFIERS_GRAPH","_readQuantifierPunctuation","afterPath","_afterPath","_readPath","_readForwardPath","_readBackwardPath","_readRDFStarTailOrGraph","_readRDFStarTail","_quad","contextStack","message","noop","_removeDotSegments","result","i","pathStart","segmentStart","parse","quadCallback","prefixCallback","quads","every","parser","prototype","escape","escapeAll","escapedCharacters","SerializedTerm","N3Writer","outputStream","_prefixRegex","write","_lists","lists","output","_outputStream","chunk","encoding","done","end","_endStream","_baseIRI","_prefixIRIs","addPrefixes","_writeQuad","_writeQuadLine","_inDefaultGraph","_write","_encodeIriOrBlank","_encodeObject","_encodePredicate","_encodeSubject","_prefixMatch","quadToString","quadsToString","map","join","_encodeQuad","startsWith","characterReplacer","prefixMatch","_encodeLiteral","_blockedWrite","addQuad","addQuads","addPrefix","hasPrefixes","IRIlist","prefixList","prefixIRI","blank","children","child","contents","elements","Array","singleDone","character","charCodeAt","toString","N3Store","_size","_graphs","_id","_ids","_entities","_blankNodeIndex","_factory","size","graphs","subjects","graphKey","subjectKey","predicateKey","keys","_addToIndex","index0","key0","key1","key2","index1","index2","existed","_removeFromIndex","_findInIndex","name0","name1","name2","array","tmp","varCount","entityKeys","value0","entity0","value1","entity1","values","l","parts","_loop","_loopByKey0","_loopByKey1","_loopBy2Keys","_countInIndex","count","_getGraphs","isString","_uniqueEntities","uniqueIds","add","graphItem","predicates","objects","freeze","ids","entities","changed","delete","removeQuad","has","getQuads","import","stream","removeQuads","remove","removeMatches","Readable","objectMode","_read","deleteGraph","content","subjectId","predicateId","objectId","graphId","DatasetCoreAndReadableStream","countQuads","forEach","some","getSubjects","results","forSubjects","s","getPredicates","forPredicates","p","getObjects","forObjects","o","getGraphs","forGraphs","g","createBlankNode","suggestedName","index","extractLists","ignoreErrors","onError","node","tails","toRemove","tailQuad","items","malformed","head","headPos","current","objectQuads","subjectQuads","unshift","Symbol","iterator","n3Store","assign","filtered","_filtered","N3StreamParser","Transform","decodeStrings","_readableState","onData","onEnd","event","emit","uri","_transform","_flush","N3StreamWriter","writableObjectMode","writer","_writer","OVERLAY_ID","OldModule","module","bundle","Module","moduleName","call","hot","hotData","_acceptCallbacks","_disposeCallbacks","accept","fn","dispose","checkedAssets","assetsToAccept","isParcelRequire","WebSocket","hostname","location","protocol","ws","onmessage","JSON","handled","assets","asset","isNew","didAccept","hmrAcceptCheck","global","parcelRequire","generated","js","console","clear","hmrApply","v","hmrAcceptRun","reload","close","onclose","removeErrorOverlay","overlay","createErrorOverlay","document","body","appendChild","getElementById","createElement","stackTrace","innerText","innerHTML","getParents","modules","parents","k","d","dep","isArray","Function","deps","cached","cb"],"mappings":"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","file":"src.b20bf42d.js","sourceRoot":"..","sourcesContent":["const RDF  = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',\r\n    XSD  = 'http://www.w3.org/2001/XMLSchema#',\r\n    SWAP = 'http://www.w3.org/2000/10/swap/';\r\n\r\nexport default {\r\n  xsd: {\r\n    decimal: `${XSD}decimal`,\r\n    boolean: `${XSD}boolean`,\r\n    double:  `${XSD}double`,\r\n    integer: `${XSD}integer`,\r\n    string:  `${XSD}string`,\r\n  },\r\n  rdf: {\r\n    type:       `${RDF}type`,\r\n    nil:        `${RDF}nil`,\r\n    first:      `${RDF}first`,\r\n    rest:       `${RDF}rest`,\r\n    langString: `${RDF}langString`,\r\n  },\r\n  owl: {\r\n    sameAs: 'http://www.w3.org/2002/07/owl#sameAs',\r\n  },\r\n  r: {\r\n    forSome: `${SWAP}reify#forSome`,\r\n    forAll:  `${SWAP}reify#forAll`,\r\n  },\r\n  log: {\r\n    implies: `${SWAP}log#implies`,\r\n  },\r\n};\r\n","/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\r\nlet promise\r\n\r\nmodule.exports = typeof queueMicrotask === 'function'\r\n  ? queueMicrotask.bind(typeof window !== 'undefined' ? window : global)\r\n  // reuse resolved promise, and allocate it lazily\r\n  : cb => (promise || (promise = Promise.resolve()))\r\n    .then(cb)\r\n    .catch(err => setTimeout(() => { throw err }, 0))\r\n","// **N3Lexer** tokenizes N3 documents.\r\nimport namespaces from './IRIs';\r\nimport queueMicrotask from 'queue-microtask';\r\n\r\nconst { xsd } = namespaces;\r\n\r\n// Regular expression and replacement string to escape N3 strings\r\nconst escapeSequence = /\\\\u([a-fA-F0-9]{4})|\\\\U([a-fA-F0-9]{8})|\\\\([^])/g;\r\nconst escapeReplacements = {\r\n  '\\\\': '\\\\', \"'\": \"'\", '\"': '\"',\r\n  'n': '\\n', 'r': '\\r', 't': '\\t', 'f': '\\f', 'b': '\\b',\r\n  '_': '_', '~': '~', '.': '.', '-': '-', '!': '!', '$': '$', '&': '&',\r\n  '(': '(', ')': ')', '*': '*', '+': '+', ',': ',', ';': ';', '=': '=',\r\n  '/': '/', '?': '?', '#': '#', '@': '@', '%': '%',\r\n};\r\nconst illegalIriChars = /[\\x00-\\x20<>\\\\\"\\{\\}\\|\\^\\`]/;\r\n\r\nconst lineModeRegExps = {\r\n  _iri: true,\r\n  _unescapedIri: true,\r\n  _simpleQuotedString: true,\r\n  _langcode: true,\r\n  _blank: true,\r\n  _newline: true,\r\n  _comment: true,\r\n  _whitespace: true,\r\n  _endOfFile: true,\r\n};\r\nconst invalidRegExp = /$0^/;\r\n\r\n// ## Constructor\r\nexport default class N3Lexer {\r\n  constructor(options) {\r\n    // ## Regular expressions\r\n    // It's slightly faster to have these as properties than as in-scope variables\r\n    this._iri = /^<((?:[^ <>{}\\\\]|\\\\[uU])+)>[ \\t]*/; // IRI with escape sequences; needs sanity check after unescaping\r\n    this._unescapedIri = /^<([^\\x00-\\x20<>\\\\\"\\{\\}\\|\\^\\`]*)>[ \\t]*/; // IRI without escape sequences; no unescaping\r\n    this._simpleQuotedString = /^\"([^\"\\\\\\r\\n]*)\"(?=[^\"])/; // string without escape sequences\r\n    this._simpleApostropheString = /^'([^'\\\\\\r\\n]*)'(?=[^'])/;\r\n    this._langcode = /^@([a-z]+(?:-[a-z0-9]+)*)(?=[^a-z0-9\\-])/i;\r\n    this._prefix = /^((?:[A-Za-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)?:(?=[#\\s<])/;\r\n    this._prefixed = /^((?:[A-Za-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)?:((?:(?:[0-:A-Z_a-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~])(?:(?:[\\.\\-0-:A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~])*(?:[\\-0-:A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~]))?)?)(?:[ \\t]+|(?=\\.?[,;!\\^\\s#()\\[\\]\\{\\}\"'<>]))/;\r\n    this._variable = /^\\?(?:(?:[A-Z_a-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:[\\-0-:A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)(?=[.,;!\\^\\s#()\\[\\]\\{\\}\"'<>])/;\r\n    this._blank = /^_:((?:[0-9A-Z_a-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)(?:[ \\t]+|(?=\\.?[,;:\\s#()\\[\\]\\{\\}\"'<>]))/;\r\n    this._number = /^[\\-+]?(?:(\\d+\\.\\d*|\\.?\\d+)[eE][\\-+]?|\\d*(\\.)?)\\d+(?=\\.?[,;:\\s#()\\[\\]\\{\\}\"'<>])/;\r\n    this._boolean = /^(?:true|false)(?=[.,;\\s#()\\[\\]\\{\\}\"'<>])/;\r\n    this._keyword = /^@[a-z]+(?=[\\s#<:])/i;\r\n    this._sparqlKeyword = /^(?:PREFIX|BASE|GRAPH)(?=[\\s#<])/i;\r\n    this._shortPredicates = /^a(?=[\\s#()\\[\\]\\{\\}\"'<>])/;\r\n    this._newline = /^[ \\t]*(?:#[^\\n\\r]*)?(?:\\r\\n|\\n|\\r)[ \\t]*/;\r\n    this._comment = /#([^\\n\\r]*)/;\r\n    this._whitespace = /^[ \\t]+/;\r\n    this._endOfFile = /^(?:#[^\\n\\r]*)?$/;\r\n    options = options || {};\r\n\r\n    // In line mode (N-Triples or N-Quads), only simple features may be parsed\r\n    if (this._lineMode = !!options.lineMode) {\r\n      this._n3Mode = false;\r\n      // Don't tokenize special literals\r\n      for (const key in this) {\r\n        if (!(key in lineModeRegExps) && this[key] instanceof RegExp)\r\n          this[key] = invalidRegExp;\r\n      }\r\n    }\r\n    // When not in line mode, enable N3 functionality by default\r\n    else {\r\n      this._n3Mode = options.n3 !== false;\r\n    }\r\n    // Don't output comment tokens by default\r\n    this._comments = !!options.comments;\r\n    // Cache the last tested closing position of long literals\r\n    this._literalClosingPos = 0;\r\n  }\r\n\r\n  // ## Private methods\r\n\r\n  // ### `_tokenizeToEnd` tokenizes as for as possible, emitting tokens through the callback\r\n  _tokenizeToEnd(callback, inputFinished) {\r\n    // Continue parsing as far as possible; the loop will return eventually\r\n    let input = this._input;\r\n    const outputComments = this._comments;\r\n    while (true) {\r\n      // Count and skip whitespace lines\r\n      let whiteSpaceMatch, comment;\r\n      while (whiteSpaceMatch = this._newline.exec(input)) {\r\n        // Try to find a comment\r\n        if (outputComments && (comment = this._comment.exec(whiteSpaceMatch[0])))\r\n          callback(null, { line: this._line, type: 'comment', value: comment[1], prefix: '' });\r\n        // Advance the input\r\n        input = input.substr(whiteSpaceMatch[0].length, input.length);\r\n        this._line++;\r\n      }\r\n      // Skip whitespace on current line\r\n      if (!whiteSpaceMatch && (whiteSpaceMatch = this._whitespace.exec(input)))\r\n        input = input.substr(whiteSpaceMatch[0].length, input.length);\r\n\r\n      // Stop for now if we're at the end\r\n      if (this._endOfFile.test(input)) {\r\n        // If the input is finished, emit EOF\r\n        if (inputFinished) {\r\n          // Try to find a final comment\r\n          if (outputComments && (comment = this._comment.exec(input)))\r\n            callback(null, { line: this._line, type: 'comment', value: comment[1], prefix: '' });\r\n          callback(input = null, { line: this._line, type: 'eof', value: '', prefix: '' });\r\n        }\r\n        return this._input = input;\r\n      }\r\n\r\n      // Look for specific token types based on the first character\r\n      const line = this._line, firstChar = input[0];\r\n      let type = '', value = '', prefix = '',\r\n          match = null, matchLength = 0, inconclusive = false;\r\n      switch (firstChar) {\r\n      case '^':\r\n        // We need at least 3 tokens lookahead to distinguish ^^<IRI> and ^^pre:fixed\r\n        if (input.length < 3)\r\n          break;\r\n        // Try to match a type\r\n        else if (input[1] === '^') {\r\n          this._previousMarker = '^^';\r\n          // Move to type IRI or prefixed name\r\n          input = input.substr(2);\r\n          if (input[0] !== '<') {\r\n            inconclusive = true;\r\n            break;\r\n          }\r\n        }\r\n        // If no type, it must be a path expression\r\n        else {\r\n          if (this._n3Mode) {\r\n            matchLength = 1;\r\n            type = '^';\r\n          }\r\n          break;\r\n        }\r\n        // Fall through in case the type is an IRI\r\n      case '<':\r\n        // Try to find a full IRI without escape sequences\r\n        if (match = this._unescapedIri.exec(input))\r\n          type = 'IRI', value = match[1];\r\n        // Try to find a full IRI with escape sequences\r\n        else if (match = this._iri.exec(input)) {\r\n          value = this._unescape(match[1]);\r\n          if (value === null || illegalIriChars.test(value))\r\n            return reportSyntaxError(this);\r\n          type = 'IRI';\r\n        }\r\n        // Try to find a nested triple\r\n        else if (input.length > 1 && input[1] === '<')\r\n          type = '<<', matchLength = 2;\r\n        // Try to find a backwards implication arrow\r\n        else if (this._n3Mode && input.length > 1 && input[1] === '=')\r\n          type = 'inverse', matchLength = 2, value = '>';\r\n        break;\r\n\r\n      case '>':\r\n        if (input.length > 1 && input[1] === '>')\r\n          type = '>>', matchLength = 2;\r\n        break;\r\n\r\n      case '_':\r\n        // Try to find a blank node. Since it can contain (but not end with) a dot,\r\n        // we always need a non-dot character before deciding it is a blank node.\r\n        // Therefore, try inserting a space if we're at the end of the input.\r\n        if ((match = this._blank.exec(input)) ||\r\n            inputFinished && (match = this._blank.exec(`${input} `)))\r\n          type = 'blank', prefix = '_', value = match[1];\r\n        break;\r\n\r\n      case '\"':\r\n        // Try to find a literal without escape sequences\r\n        if (match = this._simpleQuotedString.exec(input))\r\n          value = match[1];\r\n        // Try to find a literal wrapped in three pairs of quotes\r\n        else {\r\n          ({ value, matchLength } = this._parseLiteral(input));\r\n          if (value === null)\r\n            return reportSyntaxError(this);\r\n        }\r\n        if (match !== null || matchLength !== 0) {\r\n          type = 'literal';\r\n          this._literalClosingPos = 0;\r\n        }\r\n        break;\r\n\r\n      case \"'\":\r\n        if (!this._lineMode) {\r\n          // Try to find a literal without escape sequences\r\n          if (match = this._simpleApostropheString.exec(input))\r\n            value = match[1];\r\n          // Try to find a literal wrapped in three pairs of quotes\r\n          else {\r\n            ({ value, matchLength } = this._parseLiteral(input));\r\n            if (value === null)\r\n              return reportSyntaxError(this);\r\n          }\r\n          if (match !== null || matchLength !== 0) {\r\n            type = 'literal';\r\n            this._literalClosingPos = 0;\r\n          }\r\n        }\r\n        break;\r\n\r\n      case '?':\r\n        // Try to find a variable\r\n        if (this._n3Mode && (match = this._variable.exec(input)))\r\n          type = 'var', value = match[0];\r\n        break;\r\n\r\n      case '@':\r\n        // Try to find a language code\r\n        if (this._previousMarker === 'literal' && (match = this._langcode.exec(input)))\r\n          type = 'langcode', value = match[1];\r\n        // Try to find a keyword\r\n        else if (match = this._keyword.exec(input))\r\n          type = match[0];\r\n        break;\r\n\r\n      case '.':\r\n        // Try to find a dot as punctuation\r\n        if (input.length === 1 ? inputFinished : (input[1] < '0' || input[1] > '9')) {\r\n          type = '.';\r\n          matchLength = 1;\r\n          break;\r\n        }\r\n        // Fall through to numerical case (could be a decimal dot)\r\n\r\n      case '0':\r\n      case '1':\r\n      case '2':\r\n      case '3':\r\n      case '4':\r\n      case '5':\r\n      case '6':\r\n      case '7':\r\n      case '8':\r\n      case '9':\r\n      case '+':\r\n      case '-':\r\n        // Try to find a number. Since it can contain (but not end with) a dot,\r\n        // we always need a non-dot character before deciding it is a number.\r\n        // Therefore, try inserting a space if we're at the end of the input.\r\n        if (match = this._number.exec(input) ||\r\n            inputFinished && (match = this._number.exec(`${input} `))) {\r\n          type = 'literal', value = match[0];\r\n          prefix = (typeof match[1] === 'string' ? xsd.double :\r\n                    (typeof match[2] === 'string' ? xsd.decimal : xsd.integer));\r\n        }\r\n        break;\r\n\r\n      case 'B':\r\n      case 'b':\r\n      case 'p':\r\n      case 'P':\r\n      case 'G':\r\n      case 'g':\r\n        // Try to find a SPARQL-style keyword\r\n        if (match = this._sparqlKeyword.exec(input))\r\n          type = match[0].toUpperCase();\r\n        else\r\n          inconclusive = true;\r\n        break;\r\n\r\n      case 'f':\r\n      case 't':\r\n        // Try to match a boolean\r\n        if (match = this._boolean.exec(input))\r\n          type = 'literal', value = match[0], prefix = xsd.boolean;\r\n        else\r\n          inconclusive = true;\r\n        break;\r\n\r\n      case 'a':\r\n        // Try to find an abbreviated predicate\r\n        if (match = this._shortPredicates.exec(input))\r\n          type = 'abbreviation', value = 'a';\r\n        else\r\n          inconclusive = true;\r\n        break;\r\n\r\n      case '=':\r\n        // Try to find an implication arrow or equals sign\r\n        if (this._n3Mode && input.length > 1) {\r\n          type = 'abbreviation';\r\n          if (input[1] !== '>')\r\n            matchLength = 1, value = '=';\r\n          else\r\n            matchLength = 2, value = '>';\r\n        }\r\n        break;\r\n\r\n      case '!':\r\n        if (!this._n3Mode)\r\n          break;\r\n      case ',':\r\n      case ';':\r\n      case '[':\r\n      case ']':\r\n      case '(':\r\n      case ')':\r\n      case '{':\r\n      case '}':\r\n        if (!this._lineMode) {\r\n          matchLength = 1;\r\n          type = firstChar;\r\n        }\r\n        break;\r\n\r\n      default:\r\n        inconclusive = true;\r\n      }\r\n\r\n      // Some first characters do not allow an immediate decision, so inspect more\r\n      if (inconclusive) {\r\n        // Try to find a prefix\r\n        if ((this._previousMarker === '@prefix' || this._previousMarker === 'PREFIX') &&\r\n            (match = this._prefix.exec(input)))\r\n          type = 'prefix', value = match[1] || '';\r\n        // Try to find a prefixed name. Since it can contain (but not end with) a dot,\r\n        // we always need a non-dot character before deciding it is a prefixed name.\r\n        // Therefore, try inserting a space if we're at the end of the input.\r\n        else if ((match = this._prefixed.exec(input)) ||\r\n                 inputFinished && (match = this._prefixed.exec(`${input} `)))\r\n          type = 'prefixed', prefix = match[1] || '', value = this._unescape(match[2]);\r\n      }\r\n\r\n      // A type token is special: it can only be emitted after an IRI or prefixed name is read\r\n      if (this._previousMarker === '^^') {\r\n        switch (type) {\r\n        case 'prefixed': type = 'type';    break;\r\n        case 'IRI':      type = 'typeIRI'; break;\r\n        default:         type = '';\r\n        }\r\n      }\r\n\r\n      // What if nothing of the above was found?\r\n      if (!type) {\r\n        // We could be in streaming mode, and then we just wait for more input to arrive.\r\n        // Otherwise, a syntax error has occurred in the input.\r\n        // One exception: error on an unaccounted linebreak (= not inside a triple-quoted literal).\r\n        if (inputFinished || (!/^'''|^\"\"\"/.test(input) && /\\n|\\r/.test(input)))\r\n          return reportSyntaxError(this);\r\n        else\r\n          return this._input = input;\r\n      }\r\n\r\n      // Emit the parsed token\r\n      const token = { line: line, type: type, value: value, prefix: prefix };\r\n      callback(null, token);\r\n      this.previousToken = token;\r\n      this._previousMarker = type;\r\n      // Advance to next part to tokenize\r\n      input = input.substr(matchLength || match[0].length, input.length);\r\n    }\r\n\r\n    // Signals the syntax error through the callback\r\n    function reportSyntaxError(self) { callback(self._syntaxError(/^\\S*/.exec(input)[0])); }\r\n  }\r\n\r\n  // ### `_unescape` replaces N3 escape codes by their corresponding characters\r\n  _unescape(item) {\r\n    let invalid = false;\r\n    const replaced = item.replace(escapeSequence, (sequence, unicode4, unicode8, escapedChar) => {\r\n      // 4-digit unicode character\r\n      if (typeof unicode4 === 'string')\r\n        return String.fromCharCode(Number.parseInt(unicode4, 16));\r\n      // 8-digit unicode character\r\n      if (typeof unicode8 === 'string') {\r\n        let charCode = Number.parseInt(unicode8, 16);\r\n        return charCode <= 0xFFFF ? String.fromCharCode(Number.parseInt(unicode8, 16)) :\r\n          String.fromCharCode(0xD800 + ((charCode -= 0x10000) >> 10), 0xDC00 + (charCode & 0x3FF));\r\n      }\r\n      // fixed escape sequence\r\n      if (escapedChar in escapeReplacements)\r\n        return escapeReplacements[escapedChar];\r\n      // invalid escape sequence\r\n      invalid = true;\r\n      return '';\r\n    });\r\n    return invalid ? null : replaced;\r\n  }\r\n\r\n  // ### `_parseLiteral` parses a literal into an unescaped value\r\n  _parseLiteral(input) {\r\n    // Ensure we have enough lookahead to identify triple-quoted strings\r\n    if (input.length >= 3) {\r\n      // Identify the opening quote(s)\r\n      const opening = input.match(/^(?:\"\"\"|\"|'''|'|)/)[0];\r\n      const openingLength = opening.length;\r\n\r\n      // Find the next candidate closing quotes\r\n      let closingPos = Math.max(this._literalClosingPos, openingLength);\r\n      while ((closingPos = input.indexOf(opening, closingPos)) > 0) {\r\n        // Count backslashes right before the closing quotes\r\n        let backslashCount = 0;\r\n        while (input[closingPos - backslashCount - 1] === '\\\\')\r\n          backslashCount++;\r\n\r\n        // An even number of backslashes (in particular 0)\r\n        // means these are actual, non-escaped closing quotes\r\n        if (backslashCount % 2 === 0) {\r\n          // Extract and unescape the value\r\n          const raw = input.substring(openingLength, closingPos);\r\n          const lines = raw.split(/\\r\\n|\\r|\\n/).length - 1;\r\n          const matchLength = closingPos + openingLength;\r\n          // Only triple-quoted strings can be multi-line\r\n          if (openingLength === 1 && lines !== 0 ||\r\n              openingLength === 3 && this._lineMode)\r\n            break;\r\n          this._line += lines;\r\n          return { value: this._unescape(raw), matchLength };\r\n        }\r\n        closingPos++;\r\n      }\r\n      this._literalClosingPos = input.length - openingLength + 1;\r\n    }\r\n    return { value: '', matchLength: 0 };\r\n  }\r\n\r\n  // ### `_syntaxError` creates a syntax error for the given issue\r\n  _syntaxError(issue) {\r\n    this._input = null;\r\n    const err = new Error(`Unexpected \"${issue}\" on line ${this._line}.`);\r\n    err.context = {\r\n      token: undefined,\r\n      line: this._line,\r\n      previousToken: this.previousToken,\r\n    };\r\n    return err;\r\n  }\r\n\r\n  // ## Public methods\r\n\r\n  // ### `tokenize` starts the transformation of an N3 document into an array of tokens.\r\n  // The input can be a string or a stream.\r\n  tokenize(input, callback) {\r\n    this._line = 1;\r\n\r\n    // If the input is a string, continuously emit tokens through the callback until the end\r\n    if (typeof input === 'string') {\r\n      this._input = input;\r\n      // If a callback was passed, asynchronously call it\r\n      if (typeof callback === 'function')\r\n        queueMicrotask(() => this._tokenizeToEnd(callback, true));\r\n      // If no callback was passed, tokenize synchronously and return\r\n      else {\r\n        const tokens = [];\r\n        let error;\r\n        this._tokenizeToEnd((e, t) => e ? (error = e) : tokens.push(t), true);\r\n        if (error) throw error;\r\n        return tokens;\r\n      }\r\n    }\r\n    // Otherwise, the input must be a stream\r\n    else {\r\n      this._input = '';\r\n      this._pendingBuffer = null;\r\n      if (typeof input.setEncoding === 'function')\r\n        input.setEncoding('utf8');\r\n      // Adds the data chunk to the buffer and parses as far as possible\r\n      input.on('data', data => {\r\n        if (this._input !== null && data.length !== 0) {\r\n          // Prepend any previous pending writes\r\n          if (this._pendingBuffer) {\r\n            data = Buffer.concat([this._pendingBuffer, data]);\r\n            this._pendingBuffer = null;\r\n          }\r\n          // Hold if the buffer ends in an incomplete unicode sequence\r\n          if (data[data.length - 1] & 0x80) {\r\n            this._pendingBuffer = data;\r\n          }\r\n          // Otherwise, tokenize as far as possible\r\n          else {\r\n            this._input += data;\r\n            this._tokenizeToEnd(callback, false);\r\n          }\r\n        }\r\n      });\r\n      // Parses until the end\r\n      input.on('end', () => {\r\n        if (this._input !== null)\r\n          this._tokenizeToEnd(callback, true);\r\n      });\r\n      input.on('error', callback);\r\n    }\r\n  }\r\n}\r\n","// **N3Util** provides N3 utility functions.\r\n\r\nimport N3DataFactory from './N3DataFactory';\r\n\r\n// Tests whether the given term represents an IRI\r\nexport function isNamedNode(term) {\r\n  return !!term && term.termType === 'NamedNode';\r\n}\r\n\r\n// Tests whether the given term represents a blank node\r\nexport function isBlankNode(term) {\r\n  return !!term && term.termType === 'BlankNode';\r\n}\r\n\r\n// Tests whether the given term represents a literal\r\nexport function isLiteral(term) {\r\n  return !!term && term.termType === 'Literal';\r\n}\r\n\r\n// Tests whether the given term represents a variable\r\nexport function isVariable(term) {\r\n  return !!term && term.termType === 'Variable';\r\n}\r\n\r\n// Tests whether the given term represents the default graph\r\nexport function isDefaultGraph(term) {\r\n  return !!term && term.termType === 'DefaultGraph';\r\n}\r\n\r\n// Tests whether the given quad is in the default graph\r\nexport function inDefaultGraph(quad) {\r\n  return isDefaultGraph(quad.graph);\r\n}\r\n\r\n// Creates a function that prepends the given IRI to a local name\r\nexport function prefix(iri, factory) {\r\n  return prefixes({ '': iri }, factory)('');\r\n}\r\n\r\n// Creates a function that allows registering and expanding prefixes\r\nexport function prefixes(defaultPrefixes, factory) {\r\n  // Add all of the default prefixes\r\n  const prefixes = Object.create(null);\r\n  for (const prefix in defaultPrefixes)\r\n    processPrefix(prefix, defaultPrefixes[prefix]);\r\n  // Set the default factory if none was specified\r\n  factory = factory || N3DataFactory;\r\n\r\n  // Registers a new prefix (if an IRI was specified)\r\n  // or retrieves a function that expands an existing prefix (if no IRI was specified)\r\n  function processPrefix(prefix, iri) {\r\n    // Create a new prefix if an IRI is specified or the prefix doesn't exist\r\n    if (typeof iri === 'string') {\r\n      // Create a function that expands the prefix\r\n      const cache = Object.create(null);\r\n      prefixes[prefix] = local => {\r\n        return cache[local] || (cache[local] = factory.namedNode(iri + local));\r\n      };\r\n    }\r\n    else if (!(prefix in prefixes)) {\r\n      throw new Error(`Unknown prefix: ${prefix}`);\r\n    }\r\n    return prefixes[prefix];\r\n  }\r\n  return processPrefix;\r\n}\r\n","// N3.js implementations of the RDF/JS core data types\r\n// See https://github.com/rdfjs/representation-task-force/blob/master/interface-spec.md\r\n\r\nimport namespaces from './IRIs';\r\nimport { isDefaultGraph } from './N3Util';\r\nconst { rdf, xsd } = namespaces;\r\n\r\n// eslint-disable-next-line prefer-const\r\nlet DEFAULTGRAPH;\r\nlet _blankNodeCounter = 0;\r\n\r\nconst escapedLiteral = /^\"(.*\".*)(?=\"[^\"]*$)/;\r\nconst quadId = /^<<(\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+) (\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+) (\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+) ?(\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+)?>>$/;\r\n\r\n// ## DataFactory singleton\r\nconst DataFactory = {\r\n  namedNode,\r\n  blankNode,\r\n  variable,\r\n  literal,\r\n  defaultGraph,\r\n  quad,\r\n  triple: quad,\r\n};\r\nexport default DataFactory;\r\n\r\n// ## Term constructor\r\nexport class Term {\r\n  constructor(id) {\r\n    this.id = id;\r\n  }\r\n\r\n  // ### The value of this term\r\n  get value() {\r\n    return this.id;\r\n  }\r\n\r\n  // ### Returns whether this object represents the same term as the other\r\n  equals(other) {\r\n    // If both terms were created by this library,\r\n    // equality can be computed through ids\r\n    if (other instanceof Term)\r\n      return this.id === other.id;\r\n    // Otherwise, compare term type and value\r\n    return !!other && this.termType === other.termType &&\r\n                      this.value    === other.value;\r\n  }\r\n\r\n  // ### Returns a plain object representation of this term\r\n  toJSON() {\r\n    return {\r\n      termType: this.termType,\r\n      value:    this.value,\r\n    };\r\n  }\r\n}\r\n\r\n\r\n// ## NamedNode constructor\r\nexport class NamedNode extends Term {\r\n  // ### The term type of this term\r\n  get termType() {\r\n    return 'NamedNode';\r\n  }\r\n}\r\n\r\n// ## Literal constructor\r\nexport class Literal extends Term {\r\n  // ### The term type of this term\r\n  get termType() {\r\n    return 'Literal';\r\n  }\r\n\r\n  // ### The text value of this literal\r\n  get value() {\r\n    return this.id.substring(1, this.id.lastIndexOf('\"'));\r\n  }\r\n\r\n  // ### The language of this literal\r\n  get language() {\r\n    // Find the last quotation mark (e.g., '\"abc\"@en-us')\r\n    const id = this.id;\r\n    let atPos = id.lastIndexOf('\"') + 1;\r\n    // If \"@\" it follows, return the remaining substring; empty otherwise\r\n    return atPos < id.length && id[atPos++] === '@' ? id.substr(atPos).toLowerCase() : '';\r\n  }\r\n\r\n  // ### The datatype IRI of this literal\r\n  get datatype() {\r\n    return new NamedNode(this.datatypeString);\r\n  }\r\n\r\n  // ### The datatype string of this literal\r\n  get datatypeString() {\r\n    // Find the last quotation mark (e.g., '\"abc\"^^http://ex.org/types#t')\r\n    const id = this.id, dtPos = id.lastIndexOf('\"') + 1;\r\n    const char = dtPos < id.length ? id[dtPos] : '';\r\n    // If \"^\" it follows, return the remaining substring\r\n    return char === '^' ? id.substr(dtPos + 2) :\r\n           // If \"@\" follows, return rdf:langString; xsd:string otherwise\r\n           (char !== '@' ? xsd.string : rdf.langString);\r\n  }\r\n\r\n  // ### Returns whether this object represents the same term as the other\r\n  equals(other) {\r\n    // If both literals were created by this library,\r\n    // equality can be computed through ids\r\n    if (other instanceof Literal)\r\n      return this.id === other.id;\r\n    // Otherwise, compare term type, value, language, and datatype\r\n    return !!other && !!other.datatype &&\r\n                      this.termType === other.termType &&\r\n                      this.value    === other.value    &&\r\n                      this.language === other.language &&\r\n                      this.datatype.value === other.datatype.value;\r\n  }\r\n\r\n  toJSON() {\r\n    return {\r\n      termType: this.termType,\r\n      value:    this.value,\r\n      language: this.language,\r\n      datatype: { termType: 'NamedNode', value: this.datatypeString },\r\n    };\r\n  }\r\n}\r\n\r\n// ## BlankNode constructor\r\nexport class BlankNode extends Term {\r\n  constructor(name) {\r\n    super(`_:${name}`);\r\n  }\r\n\r\n  // ### The term type of this term\r\n  get termType() {\r\n    return 'BlankNode';\r\n  }\r\n\r\n  // ### The name of this blank node\r\n  get value() {\r\n    return this.id.substr(2);\r\n  }\r\n}\r\n\r\nexport class Variable extends Term {\r\n  constructor(name) {\r\n    super(`?${name}`);\r\n  }\r\n\r\n  // ### The term type of this term\r\n  get termType() {\r\n    return 'Variable';\r\n  }\r\n\r\n  // ### The name of this variable\r\n  get value() {\r\n    return this.id.substr(1);\r\n  }\r\n}\r\n\r\n// ## DefaultGraph constructor\r\nexport class DefaultGraph extends Term {\r\n  constructor() {\r\n    super('');\r\n    return DEFAULTGRAPH || this;\r\n  }\r\n\r\n  // ### The term type of this term\r\n  get termType() {\r\n    return 'DefaultGraph';\r\n  }\r\n\r\n  // ### Returns whether this object represents the same term as the other\r\n  equals(other) {\r\n    // If both terms were created by this library,\r\n    // equality can be computed through strict equality;\r\n    // otherwise, compare term types.\r\n    return (this === other) || (!!other && (this.termType === other.termType));\r\n  }\r\n}\r\n\r\n// ## DefaultGraph singleton\r\nDEFAULTGRAPH = new DefaultGraph();\r\n\r\n\r\n// ### Constructs a term from the given internal string ID\r\nexport function termFromId(id, factory) {\r\n  factory = factory || DataFactory;\r\n\r\n  // Falsy value or empty string indicate the default graph\r\n  if (!id)\r\n    return factory.defaultGraph();\r\n\r\n  // Identify the term type based on the first character\r\n  switch (id[0]) {\r\n  case '?':\r\n    return factory.variable(id.substr(1));\r\n  case '_':\r\n    return factory.blankNode(id.substr(2));\r\n  case '\"':\r\n    // Shortcut for internal literals\r\n    if (factory === DataFactory)\r\n      return new Literal(id);\r\n    // Literal without datatype or language\r\n    if (id[id.length - 1] === '\"')\r\n      return factory.literal(id.substr(1, id.length - 2));\r\n    // Literal with datatype or language\r\n    const endPos = id.lastIndexOf('\"', id.length - 1);\r\n    return factory.literal(id.substr(1, endPos - 1),\r\n            id[endPos + 1] === '@' ? id.substr(endPos + 2)\r\n                                   : factory.namedNode(id.substr(endPos + 3)));\r\n  case '<':\r\n    const components = quadId.exec(id);\r\n    return factory.quad(\r\n      termFromId(unescapeQuotes(components[1]), factory),\r\n      termFromId(unescapeQuotes(components[2]), factory),\r\n      termFromId(unescapeQuotes(components[3]), factory),\r\n      components[4] && termFromId(unescapeQuotes(components[4]), factory)\r\n    );\r\n  default:\r\n    return factory.namedNode(id);\r\n  }\r\n}\r\n\r\n// ### Constructs an internal string ID from the given term or ID string\r\nexport function termToId(term) {\r\n  if (typeof term === 'string')\r\n    return term;\r\n  if (term instanceof Term && term.termType !== 'Quad')\r\n    return term.id;\r\n  if (!term)\r\n    return DEFAULTGRAPH.id;\r\n\r\n  // Term instantiated with another library\r\n  switch (term.termType) {\r\n  case 'NamedNode':    return term.value;\r\n  case 'BlankNode':    return `_:${term.value}`;\r\n  case 'Variable':     return `?${term.value}`;\r\n  case 'DefaultGraph': return '';\r\n  case 'Literal':      return `\"${term.value}\"${\r\n    term.language ? `@${term.language}` :\r\n      (term.datatype && term.datatype.value !== xsd.string ? `^^${term.datatype.value}` : '')}`;\r\n  case 'Quad':\r\n    // To identify RDF* quad components, we escape quotes by doubling them.\r\n    // This avoids the overhead of backslash parsing of Turtle-like syntaxes.\r\n    return `<<${\r\n        escapeQuotes(termToId(term.subject))\r\n      } ${\r\n        escapeQuotes(termToId(term.predicate))\r\n      } ${\r\n        escapeQuotes(termToId(term.object))\r\n      }${\r\n        (isDefaultGraph(term.graph)) ? '' : ` ${termToId(term.graph)}`\r\n      }>>`;\r\n  default: throw new Error(`Unexpected termType: ${term.termType}`);\r\n  }\r\n}\r\n\r\n\r\n// ## Quad constructor\r\nexport class Quad extends Term {\r\n  constructor(subject, predicate, object, graph) {\r\n    super('');\r\n    this._subject   = subject;\r\n    this._predicate = predicate;\r\n    this._object    = object;\r\n    this._graph     = graph || DEFAULTGRAPH;\r\n  }\r\n\r\n  // ### The term type of this term\r\n  get termType() {\r\n    return 'Quad';\r\n  }\r\n\r\n  get subject() {\r\n    return this._subject;\r\n  }\r\n\r\n  get predicate() {\r\n    return this._predicate;\r\n  }\r\n\r\n  get object() {\r\n    return this._object;\r\n  }\r\n\r\n  get graph() {\r\n    return this._graph;\r\n  }\r\n\r\n  // ### Returns a plain object representation of this quad\r\n  toJSON() {\r\n    return {\r\n      termType:  this.termType,\r\n      subject:   this._subject.toJSON(),\r\n      predicate: this._predicate.toJSON(),\r\n      object:    this._object.toJSON(),\r\n      graph:     this._graph.toJSON(),\r\n    };\r\n  }\r\n\r\n  // ### Returns whether this object represents the same quad as the other\r\n  equals(other) {\r\n    return !!other && this._subject.equals(other.subject)     &&\r\n                      this._predicate.equals(other.predicate) &&\r\n                      this._object.equals(other.object)       &&\r\n                      this._graph.equals(other.graph);\r\n  }\r\n}\r\nexport { Quad as Triple };\r\n\r\n// ### Escapes the quotes within the given literal\r\nexport function escapeQuotes(id) {\r\n  return id.replace(escapedLiteral, (_, quoted) => `\"${quoted.replace(/\"/g, '\"\"')}`);\r\n}\r\n\r\n// ### Unescapes the quotes within the given literal\r\nexport function unescapeQuotes(id) {\r\n  return id.replace(escapedLiteral, (_, quoted) => `\"${quoted.replace(/\"\"/g, '\"')}`);\r\n}\r\n\r\n// ### Creates an IRI\r\nfunction namedNode(iri) {\r\n  return new NamedNode(iri);\r\n}\r\n\r\n// ### Creates a blank node\r\nfunction blankNode(name) {\r\n  return new BlankNode(name || `n3-${_blankNodeCounter++}`);\r\n}\r\n\r\n// ### Creates a literal\r\nfunction literal(value, languageOrDataType) {\r\n  // Create a language-tagged string\r\n  if (typeof languageOrDataType === 'string')\r\n    return new Literal(`\"${value}\"@${languageOrDataType.toLowerCase()}`);\r\n\r\n  // Automatically determine datatype for booleans and numbers\r\n  let datatype = languageOrDataType ? languageOrDataType.value : '';\r\n  if (datatype === '') {\r\n    // Convert a boolean\r\n    if (typeof value === 'boolean')\r\n      datatype = xsd.boolean;\r\n    // Convert an integer or double\r\n    else if (typeof value === 'number') {\r\n      if (Number.isFinite(value))\r\n        datatype = Number.isInteger(value) ? xsd.integer : xsd.double;\r\n      else {\r\n        datatype = xsd.double;\r\n        if (!Number.isNaN(value))\r\n          value = value > 0 ? 'INF' : '-INF';\r\n      }\r\n    }\r\n  }\r\n\r\n  // Create a datatyped literal\r\n  return (datatype === '' || datatype === xsd.string) ?\r\n    new Literal(`\"${value}\"`) :\r\n    new Literal(`\"${value}\"^^${datatype}`);\r\n}\r\n\r\n// ### Creates a variable\r\nfunction variable(name) {\r\n  return new Variable(name);\r\n}\r\n\r\n// ### Returns the default graph\r\nfunction defaultGraph() {\r\n  return DEFAULTGRAPH;\r\n}\r\n\r\n// ### Creates a quad\r\nfunction quad(subject, predicate, object, graph) {\r\n  return new Quad(subject, predicate, object, graph);\r\n}\r\n","// **N3Parser** parses N3 documents.\r\nimport N3Lexer from './N3Lexer';\r\nimport N3DataFactory from './N3DataFactory';\r\nimport namespaces from './IRIs';\r\n\r\nlet blankNodePrefix = 0;\r\n\r\n// ## Constructor\r\nexport default class N3Parser {\r\n  constructor(options) {\r\n    this._contextStack = [];\r\n    this._graph = null;\r\n\r\n    // Set the document IRI\r\n    options = options || {};\r\n    this._setBase(options.baseIRI);\r\n    options.factory && initDataFactory(this, options.factory);\r\n\r\n    // Set supported features depending on the format\r\n    const format = (typeof options.format === 'string') ?\r\n                 options.format.match(/\\w*$/)[0].toLowerCase() : '',\r\n        isTurtle = /turtle/.test(format), isTriG = /trig/.test(format),\r\n        isNTriples = /triple/.test(format), isNQuads = /quad/.test(format),\r\n        isN3 = this._n3Mode = /n3/.test(format),\r\n        isLineMode = isNTriples || isNQuads;\r\n    if (!(this._supportsNamedGraphs = !(isTurtle || isN3)))\r\n      this._readPredicateOrNamedGraph = this._readPredicate;\r\n    // Support triples in other graphs\r\n    this._supportsQuads = !(isTurtle || isTriG || isNTriples || isN3);\r\n    // Support nesting of triples\r\n    this._supportsRDFStar = format === '' || /star|\\*$/.test(format);\r\n    // Disable relative IRIs in N-Triples or N-Quads mode\r\n    if (isLineMode)\r\n      this._resolveRelativeIRI = iri => { return null; };\r\n    this._blankNodePrefix = typeof options.blankNodePrefix !== 'string' ? '' :\r\n                              options.blankNodePrefix.replace(/^(?!_:)/, '_:');\r\n    this._lexer = options.lexer || new N3Lexer({ lineMode: isLineMode, n3: isN3 });\r\n    // Disable explicit quantifiers by default\r\n    this._explicitQuantifiers = !!options.explicitQuantifiers;\r\n  }\r\n\r\n  // ## Static class methods\r\n\r\n  // ### `_resetBlankNodePrefix` restarts blank node prefix identification\r\n  static _resetBlankNodePrefix() {\r\n    blankNodePrefix = 0;\r\n  }\r\n\r\n  // ## Private methods\r\n\r\n  // ### `_setBase` sets the base IRI to resolve relative IRIs\r\n  _setBase(baseIRI) {\r\n    if (!baseIRI) {\r\n      this._base = '';\r\n      this._basePath = '';\r\n    }\r\n    else {\r\n      // Remove fragment if present\r\n      const fragmentPos = baseIRI.indexOf('#');\r\n      if (fragmentPos >= 0)\r\n        baseIRI = baseIRI.substr(0, fragmentPos);\r\n      // Set base IRI and its components\r\n      this._base = baseIRI;\r\n      this._basePath   = baseIRI.indexOf('/') < 0 ? baseIRI :\r\n                         baseIRI.replace(/[^\\/?]*(?:\\?.*)?$/, '');\r\n      baseIRI = baseIRI.match(/^(?:([a-z][a-z0-9+.-]*:))?(?:\\/\\/[^\\/]*)?/i);\r\n      this._baseRoot   = baseIRI[0];\r\n      this._baseScheme = baseIRI[1];\r\n    }\r\n  }\r\n\r\n  // ### `_saveContext` stores the current parsing context\r\n  // when entering a new scope (list, blank node, formula)\r\n  _saveContext(type, graph, subject, predicate, object) {\r\n    const n3Mode = this._n3Mode;\r\n    this._contextStack.push({\r\n      subject: subject, predicate: predicate, object: object,\r\n      graph: graph, type: type,\r\n      inverse: n3Mode ? this._inversePredicate : false,\r\n      blankPrefix: n3Mode ? this._prefixes._ : '',\r\n      quantified: n3Mode ? this._quantified : null,\r\n    });\r\n    // The settings below only apply to N3 streams\r\n    if (n3Mode) {\r\n      // Every new scope resets the predicate direction\r\n      this._inversePredicate = false;\r\n      // In N3, blank nodes are scoped to a formula\r\n      // (using a dot as separator, as a blank node label cannot start with it)\r\n      this._prefixes._ = (this._graph ? `${this._graph.id.substr(2)}.` : '.');\r\n      // Quantifiers are scoped to a formula\r\n      this._quantified = Object.create(this._quantified);\r\n    }\r\n  }\r\n\r\n  // ### `_restoreContext` restores the parent context\r\n  // when leaving a scope (list, blank node, formula)\r\n  _restoreContext() {\r\n    const context = this._contextStack.pop(), n3Mode = this._n3Mode;\r\n    this._subject   = context.subject;\r\n    this._predicate = context.predicate;\r\n    this._object    = context.object;\r\n    this._graph     = context.graph;\r\n    // The settings below only apply to N3 streams\r\n    if (n3Mode) {\r\n      this._inversePredicate = context.inverse;\r\n      this._prefixes._ = context.blankPrefix;\r\n      this._quantified = context.quantified;\r\n    }\r\n  }\r\n\r\n  // ### `_readInTopContext` reads a token when in the top context\r\n  _readInTopContext(token) {\r\n    switch (token.type) {\r\n    // If an EOF token arrives in the top context, signal that we're done\r\n    case 'eof':\r\n      if (this._graph !== null)\r\n        return this._error('Unclosed graph', token);\r\n      delete this._prefixes._;\r\n      return this._callback(null, null, this._prefixes);\r\n    // It could be a prefix declaration\r\n    case 'PREFIX':\r\n      this._sparqlStyle = true;\r\n    case '@prefix':\r\n      return this._readPrefix;\r\n    // It could be a base declaration\r\n    case 'BASE':\r\n      this._sparqlStyle = true;\r\n    case '@base':\r\n      return this._readBaseIRI;\r\n    // It could be a graph\r\n    case '{':\r\n      if (this._supportsNamedGraphs) {\r\n        this._graph = '';\r\n        this._subject = null;\r\n        return this._readSubject;\r\n      }\r\n    case 'GRAPH':\r\n      if (this._supportsNamedGraphs)\r\n        return this._readNamedGraphLabel;\r\n    // Otherwise, the next token must be a subject\r\n    default:\r\n      return this._readSubject(token);\r\n    }\r\n  }\r\n\r\n  // ### `_readEntity` reads an IRI, prefixed name, blank node, or variable\r\n  _readEntity(token, quantifier) {\r\n    let value;\r\n    switch (token.type) {\r\n    // Read a relative or absolute IRI\r\n    case 'IRI':\r\n    case 'typeIRI':\r\n      const iri = this._resolveIRI(token.value);\r\n      if (iri === null)\r\n        return this._error('Invalid IRI', token);\r\n      value = this._namedNode(iri);\r\n      break;\r\n    // Read a prefixed name\r\n    case 'type':\r\n    case 'prefixed':\r\n      const prefix = this._prefixes[token.prefix];\r\n      if (prefix === undefined)\r\n        return this._error(`Undefined prefix \"${token.prefix}:\"`, token);\r\n      value = this._namedNode(prefix + token.value);\r\n      break;\r\n    // Read a blank node\r\n    case 'blank':\r\n      value = this._blankNode(this._prefixes[token.prefix] + token.value);\r\n      break;\r\n    // Read a variable\r\n    case 'var':\r\n      value = this._variable(token.value.substr(1));\r\n      break;\r\n    // Everything else is not an entity\r\n    default:\r\n      return this._error(`Expected entity but got ${token.type}`, token);\r\n    }\r\n    // In N3 mode, replace the entity if it is quantified\r\n    if (!quantifier && this._n3Mode && (value.id in this._quantified))\r\n      value = this._quantified[value.id];\r\n    return value;\r\n  }\r\n\r\n  // ### `_readSubject` reads a quad's subject\r\n  _readSubject(token) {\r\n    this._predicate = null;\r\n    switch (token.type) {\r\n    case '[':\r\n      // Start a new quad with a new blank node as subject\r\n      this._saveContext('blank', this._graph,\r\n                        this._subject = this._blankNode(), null, null);\r\n      return this._readBlankNodeHead;\r\n    case '(':\r\n      // Start a new list\r\n      this._saveContext('list', this._graph, this.RDF_NIL, null, null);\r\n      this._subject = null;\r\n      return this._readListItem;\r\n    case '{':\r\n      // Start a new formula\r\n      if (!this._n3Mode)\r\n        return this._error('Unexpected graph', token);\r\n      this._saveContext('formula', this._graph,\r\n                        this._graph = this._blankNode(), null, null);\r\n      return this._readSubject;\r\n    case '}':\r\n       // No subject; the graph in which we are reading is closed instead\r\n      return this._readPunctuation(token);\r\n    case '@forSome':\r\n      if (!this._n3Mode)\r\n        return this._error('Unexpected \"@forSome\"', token);\r\n      this._subject = null;\r\n      this._predicate = this.N3_FORSOME;\r\n      this._quantifier = this._blankNode;\r\n      return this._readQuantifierList;\r\n    case '@forAll':\r\n      if (!this._n3Mode)\r\n        return this._error('Unexpected \"@forAll\"', token);\r\n      this._subject = null;\r\n      this._predicate = this.N3_FORALL;\r\n      this._quantifier = this._variable;\r\n      return this._readQuantifierList;\r\n    case 'literal':\r\n      if (!this._n3Mode)\r\n        return this._error('Unexpected literal', token);\r\n\r\n      if (token.prefix.length === 0) {\r\n        this._literalValue = token.value;\r\n        return this._completeSubjectLiteral;\r\n      }\r\n      else\r\n        this._subject = this._literal(token.value, this._namedNode(token.prefix));\r\n\r\n      break;\r\n    case '<<':\r\n      if (!this._supportsRDFStar)\r\n        return this._error('Unexpected RDF* syntax', token);\r\n      this._saveContext('<<', this._graph, null, null, null);\r\n      this._graph = null;\r\n      return this._readSubject;\r\n    default:\r\n      // Read the subject entity\r\n      if ((this._subject = this._readEntity(token)) === undefined)\r\n        return;\r\n      // In N3 mode, the subject might be a path\r\n      if (this._n3Mode)\r\n        return this._getPathReader(this._readPredicateOrNamedGraph);\r\n    }\r\n\r\n    // The next token must be a predicate,\r\n    // or, if the subject was actually a graph IRI, a named graph\r\n    return this._readPredicateOrNamedGraph;\r\n  }\r\n\r\n  // ### `_readPredicate` reads a quad's predicate\r\n  _readPredicate(token) {\r\n    const type = token.type;\r\n    switch (type) {\r\n    case 'inverse':\r\n      this._inversePredicate = true;\r\n    case 'abbreviation':\r\n      this._predicate = this.ABBREVIATIONS[token.value];\r\n      break;\r\n    case '.':\r\n    case ']':\r\n    case '}':\r\n      // Expected predicate didn't come, must have been trailing semicolon\r\n      if (this._predicate === null)\r\n        return this._error(`Unexpected ${type}`, token);\r\n      this._subject = null;\r\n      return type === ']' ? this._readBlankNodeTail(token) : this._readPunctuation(token);\r\n    case ';':\r\n      // Additional semicolons can be safely ignored\r\n      return this._predicate !== null ? this._readPredicate :\r\n             this._error('Expected predicate but got ;', token);\r\n    case 'blank':\r\n      if (!this._n3Mode)\r\n        return this._error('Disallowed blank node as predicate', token);\r\n    default:\r\n      if ((this._predicate = this._readEntity(token)) === undefined)\r\n        return;\r\n    }\r\n    // The next token must be an object\r\n    return this._readObject;\r\n  }\r\n\r\n  // ### `_readObject` reads a quad's object\r\n  _readObject(token) {\r\n    switch (token.type) {\r\n    case 'literal':\r\n      // Regular literal, can still get a datatype or language\r\n      if (token.prefix.length === 0) {\r\n        this._literalValue = token.value;\r\n        return this._readDataTypeOrLang;\r\n      }\r\n      // Pre-datatyped string literal (prefix stores the datatype)\r\n      else\r\n        this._object = this._literal(token.value, this._namedNode(token.prefix));\r\n      break;\r\n    case '[':\r\n      // Start a new quad with a new blank node as subject\r\n      this._saveContext('blank', this._graph, this._subject, this._predicate,\r\n                        this._subject = this._blankNode());\r\n      return this._readBlankNodeHead;\r\n    case '(':\r\n      // Start a new list\r\n      this._saveContext('list', this._graph, this._subject, this._predicate, this.RDF_NIL);\r\n      this._subject = null;\r\n      return this._readListItem;\r\n    case '{':\r\n      // Start a new formula\r\n      if (!this._n3Mode)\r\n        return this._error('Unexpected graph', token);\r\n      this._saveContext('formula', this._graph, this._subject, this._predicate,\r\n                        this._graph = this._blankNode());\r\n      return this._readSubject;\r\n    case '<<':\r\n      if (!this._supportsRDFStar)\r\n        return this._error('Unexpected RDF* syntax', token);\r\n      this._saveContext('<<', this._graph, this._subject, this._predicate, null);\r\n      this._graph = null;\r\n      return this._readSubject;\r\n    default:\r\n      // Read the object entity\r\n      if ((this._object = this._readEntity(token)) === undefined)\r\n        return;\r\n      // In N3 mode, the object might be a path\r\n      if (this._n3Mode)\r\n        return this._getPathReader(this._getContextEndReader());\r\n    }\r\n    return this._getContextEndReader();\r\n  }\r\n\r\n  // ### `_readPredicateOrNamedGraph` reads a quad's predicate, or a named graph\r\n  _readPredicateOrNamedGraph(token) {\r\n    return token.type === '{' ? this._readGraph(token) : this._readPredicate(token);\r\n  }\r\n\r\n  // ### `_readGraph` reads a graph\r\n  _readGraph(token) {\r\n    if (token.type !== '{')\r\n      return this._error(`Expected graph but got ${token.type}`, token);\r\n    // The \"subject\" we read is actually the GRAPH's label\r\n    this._graph = this._subject, this._subject = null;\r\n    return this._readSubject;\r\n  }\r\n\r\n  // ### `_readBlankNodeHead` reads the head of a blank node\r\n  _readBlankNodeHead(token) {\r\n    if (token.type === ']') {\r\n      this._subject = null;\r\n      return this._readBlankNodeTail(token);\r\n    }\r\n    else {\r\n      this._predicate = null;\r\n      return this._readPredicate(token);\r\n    }\r\n  }\r\n\r\n  // ### `_readBlankNodeTail` reads the end of a blank node\r\n  _readBlankNodeTail(token) {\r\n    if (token.type !== ']')\r\n      return this._readBlankNodePunctuation(token);\r\n\r\n    // Store blank node quad\r\n    if (this._subject !== null)\r\n      this._emit(this._subject, this._predicate, this._object, this._graph);\r\n\r\n    // Restore the parent context containing this blank node\r\n    const empty = this._predicate === null;\r\n    this._restoreContext();\r\n    // If the blank node was the subject, continue reading the predicate\r\n    if (this._object === null)\r\n      // If the blank node was empty, it could be a named graph label\r\n      return empty ? this._readPredicateOrNamedGraph : this._readPredicateAfterBlank;\r\n    // If the blank node was the object, restore previous context and read punctuation\r\n    else\r\n      return this._getContextEndReader();\r\n  }\r\n\r\n  // ### `_readPredicateAfterBlank` reads a predicate after an anonymous blank node\r\n  _readPredicateAfterBlank(token) {\r\n    switch (token.type) {\r\n    case '.':\r\n    case '}':\r\n      // No predicate is coming if the triple is terminated here\r\n      this._subject = null;\r\n      return this._readPunctuation(token);\r\n    default:\r\n      return this._readPredicate(token);\r\n    }\r\n  }\r\n\r\n  // ### `_readListItem` reads items from a list\r\n  _readListItem(token) {\r\n    let item = null,                      // The item of the list\r\n        list = null,                      // The list itself\r\n        next = this._readListItem;        // The next function to execute\r\n    const previousList = this._subject,   // The previous list that contains this list\r\n        stack = this._contextStack,       // The stack of parent contexts\r\n        parent = stack[stack.length - 1]; // The parent containing the current list\r\n\r\n    switch (token.type) {\r\n    case '[':\r\n      // Stack the current list quad and start a new quad with a blank node as subject\r\n      this._saveContext('blank', this._graph,\r\n                        list = this._blankNode(), this.RDF_FIRST,\r\n                        this._subject = item = this._blankNode());\r\n      next = this._readBlankNodeHead;\r\n      break;\r\n    case '(':\r\n      // Stack the current list quad and start a new list\r\n      this._saveContext('list', this._graph,\r\n                        list = this._blankNode(), this.RDF_FIRST, this.RDF_NIL);\r\n      this._subject = null;\r\n      break;\r\n    case ')':\r\n      // Closing the list; restore the parent context\r\n      this._restoreContext();\r\n      // If this list is contained within a parent list, return the membership quad here.\r\n      // This will be `<parent list element> rdf:first <this list>.`.\r\n      if (stack.length !== 0 && stack[stack.length - 1].type === 'list')\r\n        this._emit(this._subject, this._predicate, this._object, this._graph);\r\n      // Was this list the parent's subject?\r\n      if (this._predicate === null) {\r\n        // The next token is the predicate\r\n        next = this._readPredicate;\r\n        // No list tail if this was an empty list\r\n        if (this._subject === this.RDF_NIL)\r\n          return next;\r\n      }\r\n      // The list was in the parent context's object\r\n      else {\r\n        next = this._getContextEndReader();\r\n        // No list tail if this was an empty list\r\n        if (this._object === this.RDF_NIL)\r\n          return next;\r\n      }\r\n      // Close the list by making the head nil\r\n      list = this.RDF_NIL;\r\n      break;\r\n    case 'literal':\r\n      // Regular literal, can still get a datatype or language\r\n      if (token.prefix.length === 0) {\r\n        this._literalValue = token.value;\r\n        next = this._readListItemDataTypeOrLang;\r\n      }\r\n      // Pre-datatyped string literal (prefix stores the datatype)\r\n      else {\r\n        item = this._literal(token.value, this._namedNode(token.prefix));\r\n        next = this._getContextEndReader();\r\n      }\r\n      break;\r\n    case '{':\r\n      // Start a new formula\r\n      if (!this._n3Mode)\r\n        return this._error('Unexpected graph', token);\r\n      this._saveContext('formula', this._graph, this._subject, this._predicate,\r\n                        this._graph = this._blankNode());\r\n      return this._readSubject;\r\n    default:\r\n      if ((item = this._readEntity(token)) === undefined)\r\n        return;\r\n    }\r\n\r\n     // Create a new blank node if no item head was assigned yet\r\n    if (list === null)\r\n      this._subject = list = this._blankNode();\r\n\r\n    // Is this the first element of the list?\r\n    if (previousList === null) {\r\n      // This list is either the subject or the object of its parent\r\n      if (parent.predicate === null)\r\n        parent.subject = list;\r\n      else\r\n        parent.object = list;\r\n    }\r\n    else {\r\n      // Continue the previous list with the current list\r\n      this._emit(previousList, this.RDF_REST, list, this._graph);\r\n    }\r\n    // If an item was read, add it to the list\r\n    if (item !== null) {\r\n      // In N3 mode, the item might be a path\r\n      if (this._n3Mode && (token.type === 'IRI' || token.type === 'prefixed')) {\r\n        // Create a new context to add the item's path\r\n        this._saveContext('item', this._graph, list, this.RDF_FIRST, item);\r\n        this._subject = item, this._predicate = null;\r\n        // _readPath will restore the context and output the item\r\n        return this._getPathReader(this._readListItem);\r\n      }\r\n      // Output the item\r\n      this._emit(list, this.RDF_FIRST, item, this._graph);\r\n    }\r\n    return next;\r\n  }\r\n\r\n  // ### `_readDataTypeOrLang` reads an _optional_ datatype or language\r\n  _readDataTypeOrLang(token) {\r\n    return this._completeObjectLiteral(token, false);\r\n  }\r\n\r\n\r\n  // ### `_readListItemDataTypeOrLang` reads an _optional_ datatype or language in a list\r\n  _readListItemDataTypeOrLang(token) {\r\n    return this._completeObjectLiteral(token, true);\r\n  }\r\n\r\n  // ### `_completeLiteral` completes a literal with an optional datatype or language\r\n  _completeLiteral(token) {\r\n    // Create a simple string literal by default\r\n    let literal = this._literal(this._literalValue);\r\n\r\n    switch (token.type) {\r\n    // Create a datatyped literal\r\n    case 'type':\r\n    case 'typeIRI':\r\n      const datatype = this._readEntity(token);\r\n      if (datatype === undefined) return; // No datatype means an error occurred\r\n      literal = this._literal(this._literalValue, datatype);\r\n      token = null;\r\n      break;\r\n    // Create a language-tagged string\r\n    case 'langcode':\r\n      literal = this._literal(this._literalValue, token.value);\r\n      token = null;\r\n      break;\r\n    }\r\n\r\n    return { token, literal };\r\n  }\r\n\r\n  // Completes a literal in subject position\r\n  _completeSubjectLiteral(token) {\r\n    this._subject = this._completeLiteral(token).literal;\r\n    return this._readPredicateOrNamedGraph;\r\n  }\r\n\r\n  // Completes a literal in object position\r\n  _completeObjectLiteral(token, listItem) {\r\n    const completed = this._completeLiteral(token);\r\n    if (!completed)\r\n      return;\r\n    this._object = completed.literal;\r\n\r\n    // If this literal was part of a list, write the item\r\n    // (we could also check the context stack, but passing in a flag is faster)\r\n    if (listItem)\r\n      this._emit(this._subject, this.RDF_FIRST, this._object, this._graph);\r\n    // If the token was consumed, continue with the rest of the input\r\n    if (completed.token === null)\r\n      return this._getContextEndReader();\r\n    // Otherwise, consume the token now\r\n    else {\r\n      this._readCallback = this._getContextEndReader();\r\n      return this._readCallback(completed.token);\r\n    }\r\n  }\r\n\r\n  // ### `_readFormulaTail` reads the end of a formula\r\n  _readFormulaTail(token) {\r\n    if (token.type !== '}')\r\n      return this._readPunctuation(token);\r\n\r\n    // Store the last quad of the formula\r\n    if (this._subject !== null)\r\n      this._emit(this._subject, this._predicate, this._object, this._graph);\r\n\r\n    // Restore the parent context containing this formula\r\n    this._restoreContext();\r\n    // If the formula was the subject, continue reading the predicate.\r\n    // If the formula was the object, read punctuation.\r\n    return this._object === null ? this._readPredicate : this._getContextEndReader();\r\n  }\r\n\r\n  // ### `_readPunctuation` reads punctuation between quads or quad parts\r\n  _readPunctuation(token) {\r\n    let next, graph = this._graph;\r\n    const subject = this._subject, inversePredicate = this._inversePredicate;\r\n    switch (token.type) {\r\n    // A closing brace ends a graph\r\n    case '}':\r\n      if (this._graph === null)\r\n        return this._error('Unexpected graph closing', token);\r\n      if (this._n3Mode)\r\n        return this._readFormulaTail(token);\r\n      this._graph = null;\r\n    // A dot just ends the statement, without sharing anything with the next\r\n    case '.':\r\n      this._subject = null;\r\n      next = this._contextStack.length ? this._readSubject : this._readInTopContext;\r\n      if (inversePredicate) this._inversePredicate = false;\r\n      break;\r\n    // Semicolon means the subject is shared; predicate and object are different\r\n    case ';':\r\n      next = this._readPredicate;\r\n      break;\r\n    // Comma means both the subject and predicate are shared; the object is different\r\n    case ',':\r\n      next = this._readObject;\r\n      break;\r\n    default:\r\n      // An entity means this is a quad (only allowed if not already inside a graph)\r\n      if (this._supportsQuads && this._graph === null && (graph = this._readEntity(token)) !== undefined) {\r\n        next = this._readQuadPunctuation;\r\n        break;\r\n      }\r\n      return this._error(`Expected punctuation to follow \"${this._object.id}\"`, token);\r\n    }\r\n    // A quad has been completed now, so return it\r\n    if (subject !== null) {\r\n      const predicate = this._predicate, object = this._object;\r\n      if (!inversePredicate)\r\n        this._emit(subject, predicate, object,  graph);\r\n      else\r\n        this._emit(object,  predicate, subject, graph);\r\n    }\r\n    return next;\r\n  }\r\n\r\n    // ### `_readBlankNodePunctuation` reads punctuation in a blank node\r\n  _readBlankNodePunctuation(token) {\r\n    let next;\r\n    switch (token.type) {\r\n    // Semicolon means the subject is shared; predicate and object are different\r\n    case ';':\r\n      next = this._readPredicate;\r\n      break;\r\n    // Comma means both the subject and predicate are shared; the object is different\r\n    case ',':\r\n      next = this._readObject;\r\n      break;\r\n    default:\r\n      return this._error(`Expected punctuation to follow \"${this._object.id}\"`, token);\r\n    }\r\n    // A quad has been completed now, so return it\r\n    this._emit(this._subject, this._predicate, this._object, this._graph);\r\n    return next;\r\n  }\r\n\r\n  // ### `_readQuadPunctuation` reads punctuation after a quad\r\n  _readQuadPunctuation(token) {\r\n    if (token.type !== '.')\r\n      return this._error('Expected dot to follow quad', token);\r\n    return this._readInTopContext;\r\n  }\r\n\r\n  // ### `_readPrefix` reads the prefix of a prefix declaration\r\n  _readPrefix(token) {\r\n    if (token.type !== 'prefix')\r\n      return this._error('Expected prefix to follow @prefix', token);\r\n    this._prefix = token.value;\r\n    return this._readPrefixIRI;\r\n  }\r\n\r\n  // ### `_readPrefixIRI` reads the IRI of a prefix declaration\r\n  _readPrefixIRI(token) {\r\n    if (token.type !== 'IRI')\r\n      return this._error(`Expected IRI to follow prefix \"${this._prefix}:\"`, token);\r\n    const prefixNode = this._readEntity(token);\r\n    this._prefixes[this._prefix] = prefixNode.value;\r\n    this._prefixCallback(this._prefix, prefixNode);\r\n    return this._readDeclarationPunctuation;\r\n  }\r\n\r\n  // ### `_readBaseIRI` reads the IRI of a base declaration\r\n  _readBaseIRI(token) {\r\n    const iri = token.type === 'IRI' && this._resolveIRI(token.value);\r\n    if (!iri)\r\n      return this._error('Expected valid IRI to follow base declaration', token);\r\n    this._setBase(iri);\r\n    return this._readDeclarationPunctuation;\r\n  }\r\n\r\n  // ### `_readNamedGraphLabel` reads the label of a named graph\r\n  _readNamedGraphLabel(token) {\r\n    switch (token.type) {\r\n    case 'IRI':\r\n    case 'blank':\r\n    case 'prefixed':\r\n      return this._readSubject(token), this._readGraph;\r\n    case '[':\r\n      return this._readNamedGraphBlankLabel;\r\n    default:\r\n      return this._error('Invalid graph label', token);\r\n    }\r\n  }\r\n\r\n  // ### `_readNamedGraphLabel` reads a blank node label of a named graph\r\n  _readNamedGraphBlankLabel(token) {\r\n    if (token.type !== ']')\r\n      return this._error('Invalid graph label', token);\r\n    this._subject = this._blankNode();\r\n    return this._readGraph;\r\n  }\r\n\r\n  // ### `_readDeclarationPunctuation` reads the punctuation of a declaration\r\n  _readDeclarationPunctuation(token) {\r\n    // SPARQL-style declarations don't have punctuation\r\n    if (this._sparqlStyle) {\r\n      this._sparqlStyle = false;\r\n      return this._readInTopContext(token);\r\n    }\r\n\r\n    if (token.type !== '.')\r\n      return this._error('Expected declaration to end with a dot', token);\r\n    return this._readInTopContext;\r\n  }\r\n\r\n  // Reads a list of quantified symbols from a @forSome or @forAll statement\r\n  _readQuantifierList(token) {\r\n    let entity;\r\n    switch (token.type) {\r\n    case 'IRI':\r\n    case 'prefixed':\r\n      if ((entity = this._readEntity(token, true)) !== undefined)\r\n        break;\r\n    default:\r\n      return this._error(`Unexpected ${token.type}`, token);\r\n    }\r\n    // Without explicit quantifiers, map entities to a quantified entity\r\n    if (!this._explicitQuantifiers)\r\n      this._quantified[entity.id] = this._quantifier(this._blankNode().value);\r\n    // With explicit quantifiers, output the reified quantifier\r\n    else {\r\n      // If this is the first item, start a new quantifier list\r\n      if (this._subject === null)\r\n        this._emit(this._graph || this.DEFAULTGRAPH, this._predicate,\r\n                   this._subject = this._blankNode(), this.QUANTIFIERS_GRAPH);\r\n      // Otherwise, continue the previous list\r\n      else\r\n        this._emit(this._subject, this.RDF_REST,\r\n                   this._subject = this._blankNode(), this.QUANTIFIERS_GRAPH);\r\n      // Output the list item\r\n      this._emit(this._subject, this.RDF_FIRST, entity, this.QUANTIFIERS_GRAPH);\r\n    }\r\n    return this._readQuantifierPunctuation;\r\n  }\r\n\r\n  // Reads punctuation from a @forSome or @forAll statement\r\n  _readQuantifierPunctuation(token) {\r\n    // Read more quantifiers\r\n    if (token.type === ',')\r\n      return this._readQuantifierList;\r\n    // End of the quantifier list\r\n    else {\r\n      // With explicit quantifiers, close the quantifier list\r\n      if (this._explicitQuantifiers) {\r\n        this._emit(this._subject, this.RDF_REST, this.RDF_NIL, this.QUANTIFIERS_GRAPH);\r\n        this._subject = null;\r\n      }\r\n      // Read a dot\r\n      this._readCallback = this._getContextEndReader();\r\n      return this._readCallback(token);\r\n    }\r\n  }\r\n\r\n  // ### `_getPathReader` reads a potential path and then resumes with the given function\r\n  _getPathReader(afterPath) {\r\n    this._afterPath = afterPath;\r\n    return this._readPath;\r\n  }\r\n\r\n  // ### `_readPath` reads a potential path\r\n  _readPath(token) {\r\n    switch (token.type) {\r\n    // Forward path\r\n    case '!': return this._readForwardPath;\r\n    // Backward path\r\n    case '^': return this._readBackwardPath;\r\n    // Not a path; resume reading where we left off\r\n    default:\r\n      const stack = this._contextStack, parent = stack.length && stack[stack.length - 1];\r\n      // If we were reading a list item, we still need to output it\r\n      if (parent && parent.type === 'item') {\r\n        // The list item is the remaining subejct after reading the path\r\n        const item = this._subject;\r\n        // Switch back to the context of the list\r\n        this._restoreContext();\r\n        // Output the list item\r\n        this._emit(this._subject, this.RDF_FIRST, item, this._graph);\r\n      }\r\n      return this._afterPath(token);\r\n    }\r\n  }\r\n\r\n  // ### `_readForwardPath` reads a '!' path\r\n  _readForwardPath(token) {\r\n    let subject, predicate;\r\n    const object = this._blankNode();\r\n    // The next token is the predicate\r\n    if ((predicate = this._readEntity(token)) === undefined)\r\n      return;\r\n    // If we were reading a subject, replace the subject by the path's object\r\n    if (this._predicate === null)\r\n      subject = this._subject, this._subject = object;\r\n    // If we were reading an object, replace the subject by the path's object\r\n    else\r\n      subject = this._object,  this._object  = object;\r\n    // Emit the path's current quad and read its next section\r\n    this._emit(subject, predicate, object, this._graph);\r\n    return this._readPath;\r\n  }\r\n\r\n  // ### `_readBackwardPath` reads a '^' path\r\n  _readBackwardPath(token) {\r\n    const subject = this._blankNode();\r\n    let predicate, object;\r\n    // The next token is the predicate\r\n    if ((predicate = this._readEntity(token)) === undefined)\r\n      return;\r\n    // If we were reading a subject, replace the subject by the path's subject\r\n    if (this._predicate === null)\r\n      object = this._subject, this._subject = subject;\r\n    // If we were reading an object, replace the subject by the path's subject\r\n    else\r\n      object = this._object,  this._object  = subject;\r\n    // Emit the path's current quad and read its next section\r\n    this._emit(subject, predicate, object, this._graph);\r\n    return this._readPath;\r\n  }\r\n\r\n  // ### `_readRDFStarTailOrGraph` reads the graph of a nested RDF* quad or the end of a nested RDF* triple\r\n  _readRDFStarTailOrGraph(token) {\r\n    if (token.type !== '>>') {\r\n      // An entity means this is a quad (only allowed if not already inside a graph)\r\n      if (this._supportsQuads && this._graph === null && (this._graph = this._readEntity(token)) !== undefined)\r\n        return this._readRDFStarTail;\r\n      return this._error(`Expected >> to follow \"${this._object.id}\"`, token);\r\n    }\r\n    return this._readRDFStarTail(token);\r\n  }\r\n\r\n  // ### `_readRDFStarTail` reads the end of a nested RDF* triple\r\n  _readRDFStarTail(token) {\r\n    if (token.type !== '>>')\r\n      return this._error(`Expected >> but got ${token.type}`, token);\r\n    // Read the quad and restore the previous context\r\n    const quad = this._quad(this._subject, this._predicate, this._object,\r\n      this._graph || this.DEFAULTGRAPH);\r\n    this._restoreContext();\r\n    // If the triple was the subject, continue by reading the predicate.\r\n    if (this._subject === null) {\r\n      this._subject = quad;\r\n      return this._readPredicate;\r\n    }\r\n    // If the triple was the object, read context end.\r\n    else {\r\n      this._object = quad;\r\n      return this._getContextEndReader();\r\n    }\r\n  }\r\n\r\n  // ### `_getContextEndReader` gets the next reader function at the end of a context\r\n  _getContextEndReader() {\r\n    const contextStack = this._contextStack;\r\n    if (!contextStack.length)\r\n      return this._readPunctuation;\r\n\r\n    switch (contextStack[contextStack.length - 1].type) {\r\n    case 'blank':\r\n      return this._readBlankNodeTail;\r\n    case 'list':\r\n      return this._readListItem;\r\n    case 'formula':\r\n      return this._readFormulaTail;\r\n    case '<<':\r\n      return this._readRDFStarTailOrGraph;\r\n    }\r\n  }\r\n\r\n  // ### `_emit` sends a quad through the callback\r\n  _emit(subject, predicate, object, graph) {\r\n    this._callback(null, this._quad(subject, predicate, object, graph || this.DEFAULTGRAPH));\r\n  }\r\n\r\n  // ### `_error` emits an error message through the callback\r\n  _error(message, token) {\r\n    const err = new Error(`${message} on line ${token.line}.`);\r\n    err.context = {\r\n      token: token,\r\n      line: token.line,\r\n      previousToken: this._lexer.previousToken,\r\n    };\r\n    this._callback(err);\r\n    this._callback = noop;\r\n  }\r\n\r\n  // ### `_resolveIRI` resolves an IRI against the base path\r\n  _resolveIRI(iri) {\r\n    return /^[a-z][a-z0-9+.-]*:/i.test(iri) ? iri : this._resolveRelativeIRI(iri);\r\n  }\r\n\r\n  // ### `_resolveRelativeIRI` resolves an IRI against the base path,\r\n  // assuming that a base path has been set and that the IRI is indeed relative\r\n  _resolveRelativeIRI(iri) {\r\n    // An empty relative IRI indicates the base IRI\r\n    if (!iri.length)\r\n      return this._base;\r\n    // Decide resolving strategy based in the first character\r\n    switch (iri[0]) {\r\n    // Resolve relative fragment IRIs against the base IRI\r\n    case '#': return this._base + iri;\r\n    // Resolve relative query string IRIs by replacing the query string\r\n    case '?': return this._base.replace(/(?:\\?.*)?$/, iri);\r\n    // Resolve root-relative IRIs at the root of the base IRI\r\n    case '/':\r\n      // Resolve scheme-relative IRIs to the scheme\r\n      return (iri[1] === '/' ? this._baseScheme : this._baseRoot) + this._removeDotSegments(iri);\r\n    // Resolve all other IRIs at the base IRI's path\r\n    default:\r\n      // Relative IRIs cannot contain a colon in the first path segment\r\n      return (/^[^/:]*:/.test(iri)) ? null : this._removeDotSegments(this._basePath + iri);\r\n    }\r\n  }\r\n\r\n  // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986\r\n  _removeDotSegments(iri) {\r\n    // Don't modify the IRI if it does not contain any dot segments\r\n    if (!/(^|\\/)\\.\\.?($|[/#?])/.test(iri))\r\n      return iri;\r\n\r\n    // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'\r\n    const length = iri.length;\r\n    let result = '', i = -1, pathStart = -1, segmentStart = 0, next = '/';\r\n\r\n    while (i < length) {\r\n      switch (next) {\r\n      // The path starts with the first slash after the authority\r\n      case ':':\r\n        if (pathStart < 0) {\r\n          // Skip two slashes before the authority\r\n          if (iri[++i] === '/' && iri[++i] === '/')\r\n            // Skip to slash after the authority\r\n            while ((pathStart = i + 1) < length && iri[pathStart] !== '/')\r\n              i = pathStart;\r\n        }\r\n        break;\r\n      // Don't modify a query string or fragment\r\n      case '?':\r\n      case '#':\r\n        i = length;\r\n        break;\r\n      // Handle '/.' or '/..' path segments\r\n      case '/':\r\n        if (iri[i + 1] === '.') {\r\n          next = iri[++i + 1];\r\n          switch (next) {\r\n          // Remove a '/.' segment\r\n          case '/':\r\n            result += iri.substring(segmentStart, i - 1);\r\n            segmentStart = i + 1;\r\n            break;\r\n          // Remove a trailing '/.' segment\r\n          case undefined:\r\n          case '?':\r\n          case '#':\r\n            return result + iri.substring(segmentStart, i) + iri.substr(i + 1);\r\n          // Remove a '/..' segment\r\n          case '.':\r\n            next = iri[++i + 1];\r\n            if (next === undefined || next === '/' || next === '?' || next === '#') {\r\n              result += iri.substring(segmentStart, i - 2);\r\n              // Try to remove the parent path from result\r\n              if ((segmentStart = result.lastIndexOf('/')) >= pathStart)\r\n                result = result.substr(0, segmentStart);\r\n              // Remove a trailing '/..' segment\r\n              if (next !== '/')\r\n                return `${result}/${iri.substr(i + 1)}`;\r\n              segmentStart = i + 1;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      next = iri[++i];\r\n    }\r\n    return result + iri.substring(segmentStart);\r\n  }\r\n\r\n  // ## Public methods\r\n\r\n  // ### `parse` parses the N3 input and emits each parsed quad through the callback\r\n  parse(input, quadCallback, prefixCallback) {\r\n    // The read callback is the next function to be executed when a token arrives.\r\n    // We start reading in the top context.\r\n    this._readCallback = this._readInTopContext;\r\n    this._sparqlStyle = false;\r\n    this._prefixes = Object.create(null);\r\n    this._prefixes._ = this._blankNodePrefix ? this._blankNodePrefix.substr(2)\r\n                                             : `b${blankNodePrefix++}_`;\r\n    this._prefixCallback = prefixCallback || noop;\r\n    this._inversePredicate = false;\r\n    this._quantified = Object.create(null);\r\n\r\n    // Parse synchronously if no quad callback is given\r\n    if (!quadCallback) {\r\n      const quads = [];\r\n      let error;\r\n      this._callback = (e, t) => { e ? (error = e) : t && quads.push(t); };\r\n      this._lexer.tokenize(input).every(token => {\r\n        return this._readCallback = this._readCallback(token);\r\n      });\r\n      if (error) throw error;\r\n      return quads;\r\n    }\r\n\r\n    // Parse asynchronously otherwise, executing the read callback when a token arrives\r\n    this._callback = quadCallback;\r\n    this._lexer.tokenize(input, (error, token) => {\r\n      if (error !== null)\r\n        this._callback(error), this._callback = noop;\r\n      else if (this._readCallback)\r\n        this._readCallback = this._readCallback(token);\r\n    });\r\n  }\r\n}\r\n\r\n// The empty function\r\nfunction noop() {}\r\n\r\n// Initializes the parser with the given data factory\r\nfunction initDataFactory(parser, factory) {\r\n  // Set factory methods\r\n  const namedNode = factory.namedNode;\r\n  parser._namedNode   = namedNode;\r\n  parser._blankNode   = factory.blankNode;\r\n  parser._literal     = factory.literal;\r\n  parser._variable    = factory.variable;\r\n  parser._quad        = factory.quad;\r\n  parser.DEFAULTGRAPH = factory.defaultGraph();\r\n\r\n  // Set common named nodes\r\n  parser.RDF_FIRST  = namedNode(namespaces.rdf.first);\r\n  parser.RDF_REST   = namedNode(namespaces.rdf.rest);\r\n  parser.RDF_NIL    = namedNode(namespaces.rdf.nil);\r\n  parser.N3_FORALL  = namedNode(namespaces.r.forAll);\r\n  parser.N3_FORSOME = namedNode(namespaces.r.forSome);\r\n  parser.ABBREVIATIONS = {\r\n    'a': namedNode(namespaces.rdf.type),\r\n    '=': namedNode(namespaces.owl.sameAs),\r\n    '>': namedNode(namespaces.log.implies),\r\n  };\r\n  parser.QUANTIFIERS_GRAPH = namedNode('urn:n3:quantifiers');\r\n}\r\ninitDataFactory(N3Parser.prototype, N3DataFactory);\r\n","// **N3Writer** writes N3 documents.\r\nimport namespaces from './IRIs';\r\nimport { default as N3DataFactory, Term } from './N3DataFactory';\r\nimport { isDefaultGraph } from './N3Util';\r\n\r\nconst DEFAULTGRAPH = N3DataFactory.defaultGraph();\r\n\r\nconst { rdf, xsd } = namespaces;\r\n\r\n// Characters in literals that require escaping\r\nconst escape    = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019\\ud800-\\udbff]/,\r\n    escapeAll = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019]|[\\ud800-\\udbff][\\udc00-\\udfff]/g,\r\n    escapedCharacters = {\r\n      '\\\\': '\\\\\\\\', '\"': '\\\\\"', '\\t': '\\\\t',\r\n      '\\n': '\\\\n', '\\r': '\\\\r', '\\b': '\\\\b', '\\f': '\\\\f',\r\n    };\r\n\r\n// ## Placeholder class to represent already pretty-printed terms\r\nclass SerializedTerm extends Term {\r\n  // Pretty-printed nodes are not equal to any other node\r\n  // (e.g., [] does not equal [])\r\n  equals() {\r\n    return false;\r\n  }\r\n}\r\n\r\n// ## Constructor\r\nexport default class N3Writer {\r\n  constructor(outputStream, options) {\r\n    // ### `_prefixRegex` matches a prefixed name or IRI that begins with one of the added prefixes\r\n    this._prefixRegex = /$0^/;\r\n\r\n    // Shift arguments if the first argument is not a stream\r\n    if (outputStream && typeof outputStream.write !== 'function')\r\n      options = outputStream, outputStream = null;\r\n    options = options || {};\r\n    this._lists = options.lists;\r\n\r\n    // If no output stream given, send the output as string through the end callback\r\n    if (!outputStream) {\r\n      let output = '';\r\n      this._outputStream = {\r\n        write(chunk, encoding, done) { output += chunk; done && done(); },\r\n        end: done => { done && done(null, output); },\r\n      };\r\n      this._endStream = true;\r\n    }\r\n    else {\r\n      this._outputStream = outputStream;\r\n      this._endStream = options.end === undefined ? true : !!options.end;\r\n    }\r\n\r\n    // Initialize writer, depending on the format\r\n    this._subject = null;\r\n    if (!(/triple|quad/i).test(options.format)) {\r\n      this._lineMode = false;\r\n      this._graph = DEFAULTGRAPH;\r\n      this._baseIRI = options.baseIRI;\r\n      this._prefixIRIs = Object.create(null);\r\n      options.prefixes && this.addPrefixes(options.prefixes);\r\n    }\r\n    else {\r\n      this._lineMode = true;\r\n      this._writeQuad = this._writeQuadLine;\r\n    }\r\n  }\r\n\r\n  // ## Private methods\r\n\r\n  // ### Whether the current graph is the default graph\r\n  get _inDefaultGraph() {\r\n    return DEFAULTGRAPH.equals(this._graph);\r\n  }\r\n\r\n  // ### `_write` writes the argument to the output stream\r\n  _write(string, callback) {\r\n    this._outputStream.write(string, 'utf8', callback);\r\n  }\r\n\r\n  // ### `_writeQuad` writes the quad to the output stream\r\n  _writeQuad(subject, predicate, object, graph, done) {\r\n    try {\r\n      // Write the graph's label if it has changed\r\n      if (!graph.equals(this._graph)) {\r\n        // Close the previous graph and start the new one\r\n        this._write((this._subject === null ? '' : (this._inDefaultGraph ? '.\\n' : '\\n}\\n')) +\r\n                    (DEFAULTGRAPH.equals(graph) ? '' : `${this._encodeIriOrBlank(graph)} {\\n`));\r\n        this._graph = graph;\r\n        this._subject = null;\r\n      }\r\n      // Don't repeat the subject if it's the same\r\n      if (subject.equals(this._subject)) {\r\n        // Don't repeat the predicate if it's the same\r\n        if (predicate.equals(this._predicate))\r\n          this._write(`, ${this._encodeObject(object)}`, done);\r\n        // Same subject, different predicate\r\n        else\r\n          this._write(`;\\n    ${\r\n                      this._encodePredicate(this._predicate = predicate)} ${\r\n                      this._encodeObject(object)}`, done);\r\n      }\r\n      // Different subject; write the whole quad\r\n      else\r\n        this._write(`${(this._subject === null ? '' : '.\\n') +\r\n                    this._encodeSubject(this._subject = subject)} ${\r\n                    this._encodePredicate(this._predicate = predicate)} ${\r\n                    this._encodeObject(object)}`, done);\r\n    }\r\n    catch (error) { done && done(error); }\r\n  }\r\n\r\n  // ### `_writeQuadLine` writes the quad to the output stream as a single line\r\n  _writeQuadLine(subject, predicate, object, graph, done) {\r\n    // Write the quad without prefixes\r\n    delete this._prefixMatch;\r\n    this._write(this.quadToString(subject, predicate, object, graph), done);\r\n  }\r\n\r\n  // ### `quadToString` serializes a quad as a string\r\n  quadToString(subject, predicate, object, graph) {\r\n    return  `${this._encodeSubject(subject)} ${\r\n            this._encodeIriOrBlank(predicate)} ${\r\n            this._encodeObject(object)\r\n            }${graph && graph.value ? ` ${this._encodeIriOrBlank(graph)} .\\n` : ' .\\n'}`;\r\n  }\r\n\r\n  // ### `quadsToString` serializes an array of quads as a string\r\n  quadsToString(quads) {\r\n    return quads.map(t => {\r\n      return this.quadToString(t.subject, t.predicate, t.object, t.graph);\r\n    }).join('');\r\n  }\r\n\r\n  // ### `_encodeSubject` represents a subject\r\n  _encodeSubject(entity) {\r\n    return entity.termType === 'Quad' ?\r\n      this._encodeQuad(entity) : this._encodeIriOrBlank(entity);\r\n  }\r\n\r\n  // ### `_encodeIriOrBlank` represents an IRI or blank node\r\n  _encodeIriOrBlank(entity) {\r\n    // A blank node or list is represented as-is\r\n    if (entity.termType !== 'NamedNode') {\r\n      // If it is a list head, pretty-print it\r\n      if (this._lists && (entity.value in this._lists))\r\n        entity = this.list(this._lists[entity.value]);\r\n      return 'id' in entity ? entity.id : `_:${entity.value}`;\r\n    }\r\n    let iri = entity.value;\r\n    // Use relative IRIs if requested and possible\r\n    if (this._baseIRI && iri.startsWith(this._baseIRI))\r\n      iri = iri.substr(this._baseIRI.length);\r\n    // Escape special characters\r\n    if (escape.test(iri))\r\n      iri = iri.replace(escapeAll, characterReplacer);\r\n    // Try to represent the IRI as prefixed name\r\n    const prefixMatch = this._prefixRegex.exec(iri);\r\n    return !prefixMatch ? `<${iri}>` :\r\n           (!prefixMatch[1] ? iri : this._prefixIRIs[prefixMatch[1]] + prefixMatch[2]);\r\n  }\r\n\r\n  // ### `_encodeLiteral` represents a literal\r\n  _encodeLiteral(literal) {\r\n    // Escape special characters\r\n    let value = literal.value;\r\n    if (escape.test(value))\r\n      value = value.replace(escapeAll, characterReplacer);\r\n\r\n    // Write a language-tagged literal\r\n    if (literal.language)\r\n      return `\"${value}\"@${literal.language}`;\r\n\r\n    // Write dedicated literals per data type\r\n    if (this._lineMode) {\r\n      // Only abbreviate strings in N-Triples or N-Quads\r\n      if (literal.datatype.value === xsd.string)\r\n        return `\"${value}\"`;\r\n    }\r\n    else {\r\n      // Use common datatype abbreviations in Turtle or TriG\r\n      switch (literal.datatype.value) {\r\n      case xsd.string:\r\n        return `\"${value}\"`;\r\n      case xsd.boolean:\r\n        if (value === 'true' || value === 'false')\r\n          return value;\r\n        break;\r\n      case xsd.integer:\r\n        if (/^[+-]?\\d+$/.test(value))\r\n          return value;\r\n        break;\r\n      case xsd.decimal:\r\n        if (/^[+-]?\\d*\\.\\d+$/.test(value))\r\n          return value;\r\n        break;\r\n      case xsd.double:\r\n        if (/^[+-]?(?:\\d+\\.\\d*|\\.?\\d+)[eE][+-]?\\d+$/.test(value))\r\n          return value;\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Write a regular datatyped literal\r\n    return `\"${value}\"^^${this._encodeIriOrBlank(literal.datatype)}`;\r\n  }\r\n\r\n  // ### `_encodePredicate` represents a predicate\r\n  _encodePredicate(predicate) {\r\n    return predicate.value === rdf.type ? 'a' : this._encodeIriOrBlank(predicate);\r\n  }\r\n\r\n  // ### `_encodeObject` represents an object\r\n  _encodeObject(object) {\r\n    switch (object.termType) {\r\n    case 'Quad':\r\n      return this._encodeQuad(object);\r\n    case 'Literal':\r\n      return this._encodeLiteral(object);\r\n    default:\r\n      return this._encodeIriOrBlank(object);\r\n    }\r\n  }\r\n\r\n  // ### `_encodeQuad` encodes an RDF* quad\r\n  _encodeQuad({ subject, predicate, object, graph }) {\r\n    return `<<${\r\n      this._encodeSubject(subject)} ${\r\n      this._encodePredicate(predicate)} ${\r\n      this._encodeObject(object)}${\r\n      isDefaultGraph(graph) ? '' : ` ${this._encodeIriOrBlank(graph)}`}>>`;\r\n  }\r\n\r\n  // ### `_blockedWrite` replaces `_write` after the writer has been closed\r\n  _blockedWrite() {\r\n    throw new Error('Cannot write because the writer has been closed.');\r\n  }\r\n\r\n  // ### `addQuad` adds the quad to the output stream\r\n  addQuad(subject, predicate, object, graph, done) {\r\n    // The quad was given as an object, so shift parameters\r\n    if (object === undefined)\r\n      this._writeQuad(subject.subject, subject.predicate, subject.object, subject.graph, predicate);\r\n    // The optional `graph` parameter was not provided\r\n    else if (typeof graph === 'function')\r\n      this._writeQuad(subject, predicate, object, DEFAULTGRAPH, graph);\r\n    // The `graph` parameter was provided\r\n    else\r\n      this._writeQuad(subject, predicate, object, graph || DEFAULTGRAPH, done);\r\n  }\r\n\r\n  // ### `addQuads` adds the quads to the output stream\r\n  addQuads(quads) {\r\n    for (let i = 0; i < quads.length; i++)\r\n      this.addQuad(quads[i]);\r\n  }\r\n\r\n  // ### `addPrefix` adds the prefix to the output stream\r\n  addPrefix(prefix, iri, done) {\r\n    const prefixes = {};\r\n    prefixes[prefix] = iri;\r\n    this.addPrefixes(prefixes, done);\r\n  }\r\n\r\n  // ### `addPrefixes` adds the prefixes to the output stream\r\n  addPrefixes(prefixes, done) {\r\n    // Ignore prefixes if not supported by the serialization\r\n    if (!this._prefixIRIs)\r\n      return done && done();\r\n\r\n    // Write all new prefixes\r\n    let hasPrefixes = false;\r\n    for (let prefix in prefixes) {\r\n      let iri = prefixes[prefix];\r\n      if (typeof iri !== 'string')\r\n        iri = iri.value;\r\n      hasPrefixes = true;\r\n      // Finish a possible pending quad\r\n      if (this._subject !== null) {\r\n        this._write(this._inDefaultGraph ? '.\\n' : '\\n}\\n');\r\n        this._subject = null, this._graph = '';\r\n      }\r\n      // Store and write the prefix\r\n      this._prefixIRIs[iri] = (prefix += ':');\r\n      this._write(`@prefix ${prefix} <${iri}>.\\n`);\r\n    }\r\n    // Recreate the prefix matcher\r\n    if (hasPrefixes) {\r\n      let IRIlist = '', prefixList = '';\r\n      for (const prefixIRI in this._prefixIRIs) {\r\n        IRIlist += IRIlist ? `|${prefixIRI}` : prefixIRI;\r\n        prefixList += (prefixList ? '|' : '') + this._prefixIRIs[prefixIRI];\r\n      }\r\n      IRIlist = IRIlist.replace(/[\\]\\/\\(\\)\\*\\+\\?\\.\\\\\\$]/g, '\\\\$&');\r\n      this._prefixRegex = new RegExp(`^(?:${prefixList})[^\\/]*$|` +\r\n                                     `^(${IRIlist})([a-zA-Z][\\\\-_a-zA-Z0-9]*)$`);\r\n    }\r\n    // End a prefix block with a newline\r\n    this._write(hasPrefixes ? '\\n' : '', done);\r\n  }\r\n\r\n  // ### `blank` creates a blank node with the given content\r\n  blank(predicate, object) {\r\n    let children = predicate, child, length;\r\n    // Empty blank node\r\n    if (predicate === undefined)\r\n      children = [];\r\n    // Blank node passed as blank(Term(\"predicate\"), Term(\"object\"))\r\n    else if (predicate.termType)\r\n      children = [{ predicate: predicate, object: object }];\r\n    // Blank node passed as blank({ predicate: predicate, object: object })\r\n    else if (!('length' in predicate))\r\n      children = [predicate];\r\n\r\n    switch (length = children.length) {\r\n    // Generate an empty blank node\r\n    case 0:\r\n      return new SerializedTerm('[]');\r\n    // Generate a non-nested one-triple blank node\r\n    case 1:\r\n      child = children[0];\r\n      if (!(child.object instanceof SerializedTerm))\r\n        return new SerializedTerm(`[ ${this._encodePredicate(child.predicate)} ${\r\n                                  this._encodeObject(child.object)} ]`);\r\n    // Generate a multi-triple or nested blank node\r\n    default:\r\n      let contents = '[';\r\n      // Write all triples in order\r\n      for (let i = 0; i < length; i++) {\r\n        child = children[i];\r\n        // Write only the object is the predicate is the same as the previous\r\n        if (child.predicate.equals(predicate))\r\n          contents += `, ${this._encodeObject(child.object)}`;\r\n        // Otherwise, write the predicate and the object\r\n        else {\r\n          contents += `${(i ? ';\\n  ' : '\\n  ') +\r\n                      this._encodePredicate(child.predicate)} ${\r\n                      this._encodeObject(child.object)}`;\r\n          predicate = child.predicate;\r\n        }\r\n      }\r\n      return new SerializedTerm(`${contents}\\n]`);\r\n    }\r\n  }\r\n\r\n  // ### `list` creates a list node with the given content\r\n  list(elements) {\r\n    const length = elements && elements.length || 0, contents = new Array(length);\r\n    for (let i = 0; i < length; i++)\r\n      contents[i] = this._encodeObject(elements[i]);\r\n    return new SerializedTerm(`(${contents.join(' ')})`);\r\n  }\r\n\r\n  // ### `end` signals the end of the output stream\r\n  end(done) {\r\n    // Finish a possible pending quad\r\n    if (this._subject !== null) {\r\n      this._write(this._inDefaultGraph ? '.\\n' : '\\n}\\n');\r\n      this._subject = null;\r\n    }\r\n    // Disallow further writing\r\n    this._write = this._blockedWrite;\r\n\r\n    // Try to end the underlying stream, ensuring done is called exactly one time\r\n    let singleDone = done && ((error, result) => { singleDone = null, done(error, result); });\r\n    if (this._endStream) {\r\n      try { return this._outputStream.end(singleDone); }\r\n      catch (error) { /* error closing stream */ }\r\n    }\r\n    singleDone && singleDone();\r\n  }\r\n}\r\n\r\n// Replaces a character by its escaped version\r\nfunction characterReplacer(character) {\r\n  // Replace a single character by its escaped version\r\n  let result = escapedCharacters[character];\r\n  if (result === undefined) {\r\n    // Replace a single character with its 4-bit unicode escape sequence\r\n    if (character.length === 1) {\r\n      result = character.charCodeAt(0).toString(16);\r\n      result = '\\\\u0000'.substr(0, 6 - result.length) + result;\r\n    }\r\n    // Replace a surrogate pair with its 8-bit unicode escape sequence\r\n    else {\r\n      result = ((character.charCodeAt(0) - 0xD800) * 0x400 +\r\n                 character.charCodeAt(1) + 0x2400).toString(16);\r\n      result = '\\\\U00000000'.substr(0, 10 - result.length) + result;\r\n    }\r\n  }\r\n  return result;\r\n}\r\n","// **N3Store** objects store N3 quads by graph in memory.\r\nimport { default as N3DataFactory, termToId, termFromId } from './N3DataFactory';\r\nimport { Readable } from 'readable-stream';\r\nimport namespaces from './IRIs';\r\n\r\n// ## Constructor\r\nexport default class N3Store {\r\n  constructor(quads, options) {\r\n    // The number of quads is initially zero\r\n    this._size = 0;\r\n    // `_graphs` contains subject, predicate, and object indexes per graph\r\n    this._graphs = Object.create(null);\r\n    // `_ids` maps entities such as `http://xmlns.com/foaf/0.1/name` to numbers,\r\n    // saving memory by using only numbers as keys in `_graphs`\r\n    this._id = 0;\r\n    this._ids = Object.create(null);\r\n    this._ids['><'] = 0; // dummy entry, so the first actual key is non-zero\r\n    this._entities = Object.create(null); // inverse of `_ids`\r\n    // `_blankNodeIndex` is the index of the last automatically named blank node\r\n    this._blankNodeIndex = 0;\r\n\r\n    // Shift parameters if `quads` is not given\r\n    if (!options && quads && !quads[0])\r\n      options = quads, quads = null;\r\n    options = options || {};\r\n    this._factory = options.factory || N3DataFactory;\r\n\r\n    // Add quads if passed\r\n    if (quads)\r\n      this.addQuads(quads);\r\n  }\r\n\r\n  // ## Public properties\r\n\r\n  // ### `size` returns the number of quads in the store\r\n  get size() {\r\n    // Return the quad count if if was cached\r\n    let size = this._size;\r\n    if (size !== null)\r\n      return size;\r\n\r\n    // Calculate the number of quads by counting to the deepest level\r\n    size = 0;\r\n    const graphs = this._graphs;\r\n    let subjects, subject;\r\n    for (const graphKey in graphs)\r\n      for (const subjectKey in (subjects = graphs[graphKey].subjects))\r\n        for (const predicateKey in (subject = subjects[subjectKey]))\r\n          size += Object.keys(subject[predicateKey]).length;\r\n    return this._size = size;\r\n  }\r\n\r\n  // ## Private methods\r\n\r\n  // ### `_addToIndex` adds a quad to a three-layered index.\r\n  // Returns if the index has changed, if the entry did not already exist.\r\n  _addToIndex(index0, key0, key1, key2) {\r\n    // Create layers as necessary\r\n    const index1 = index0[key0] || (index0[key0] = {});\r\n    const index2 = index1[key1] || (index1[key1] = {});\r\n    // Setting the key to _any_ value signals the presence of the quad\r\n    const existed = key2 in index2;\r\n    if (!existed)\r\n      index2[key2] = null;\r\n    return !existed;\r\n  }\r\n\r\n  // ### `_removeFromIndex` removes a quad from a three-layered index\r\n  _removeFromIndex(index0, key0, key1, key2) {\r\n    // Remove the quad from the index\r\n    const index1 = index0[key0], index2 = index1[key1];\r\n    delete index2[key2];\r\n\r\n    // Remove intermediary index layers if they are empty\r\n    for (const key in index2) return;\r\n    delete index1[key1];\r\n    for (const key in index1) return;\r\n    delete index0[key0];\r\n  }\r\n\r\n  // ### `_findInIndex` finds a set of quads in a three-layered index.\r\n  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.\r\n  // Any of these keys can be undefined, which is interpreted as a wildcard.\r\n  // `name0`, `name1`, and `name2` are the names of the keys at each level,\r\n  // used when reconstructing the resulting quad\r\n  // (for instance: _subject_, _predicate_, and _object_).\r\n  // Finally, `graph` will be the graph of the created quads.\r\n  // If `callback` is given, each result is passed through it\r\n  // and iteration halts when it returns truthy for any quad.\r\n  // If instead `array` is given, each result is added to the array.\r\n  _findInIndex(index0, key0, key1, key2, name0, name1, name2, graph, callback, array) {\r\n    let tmp, index1, index2;\r\n    // Depending on the number of variables, keys or reverse index are faster\r\n    const varCount = !key0 + !key1 + !key2,\r\n        entityKeys = varCount > 1 ? Object.keys(this._ids) : this._entities;\r\n\r\n    // If a key is specified, use only that part of index 0.\r\n    if (key0) (tmp = index0, index0 = {})[key0] = tmp[key0];\r\n    for (const value0 in index0) {\r\n      const entity0 = entityKeys[value0];\r\n\r\n      if (index1 = index0[value0]) {\r\n        // If a key is specified, use only that part of index 1.\r\n        if (key1) (tmp = index1, index1 = {})[key1] = tmp[key1];\r\n        for (const value1 in index1) {\r\n          const entity1 = entityKeys[value1];\r\n\r\n          if (index2 = index1[value1]) {\r\n            // If a key is specified, use only that part of index 2, if it exists.\r\n            const values = key2 ? (key2 in index2 ? [key2] : []) : Object.keys(index2);\r\n            // Create quads for all items found in index 2.\r\n            for (let l = 0; l < values.length; l++) {\r\n              const parts = { subject: null, predicate: null, object: null };\r\n              parts[name0] = termFromId(entity0, this._factory);\r\n              parts[name1] = termFromId(entity1, this._factory);\r\n              parts[name2] = termFromId(entityKeys[values[l]], this._factory);\r\n              const quad = this._factory.quad(\r\n                parts.subject, parts.predicate, parts.object, termFromId(graph, this._factory));\r\n              if (array)\r\n                array.push(quad);\r\n              else if (callback(quad))\r\n                return true;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return array;\r\n  }\r\n\r\n  // ### `_loop` executes the callback on all keys of index 0\r\n  _loop(index0, callback) {\r\n    for (const key0 in index0)\r\n      callback(key0);\r\n  }\r\n\r\n  // ### `_loopByKey0` executes the callback on all keys of a certain entry in index 0\r\n  _loopByKey0(index0, key0, callback) {\r\n    let index1, key1;\r\n    if (index1 = index0[key0]) {\r\n      for (key1 in index1)\r\n        callback(key1);\r\n    }\r\n  }\r\n\r\n  // ### `_loopByKey1` executes the callback on given keys of all entries in index 0\r\n  _loopByKey1(index0, key1, callback) {\r\n    let key0, index1;\r\n    for (key0 in index0) {\r\n      index1 = index0[key0];\r\n      if (index1[key1])\r\n        callback(key0);\r\n    }\r\n  }\r\n\r\n  // ### `_loopBy2Keys` executes the callback on given keys of certain entries in index 2\r\n  _loopBy2Keys(index0, key0, key1, callback) {\r\n    let index1, index2, key2;\r\n    if ((index1 = index0[key0]) && (index2 = index1[key1])) {\r\n      for (key2 in index2)\r\n        callback(key2);\r\n    }\r\n  }\r\n\r\n  // ### `_countInIndex` counts matching quads in a three-layered index.\r\n  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.\r\n  // Any of these keys can be undefined, which is interpreted as a wildcard.\r\n  _countInIndex(index0, key0, key1, key2) {\r\n    let count = 0, tmp, index1, index2;\r\n\r\n    // If a key is specified, count only that part of index 0\r\n    if (key0) (tmp = index0, index0 = {})[key0] = tmp[key0];\r\n    for (const value0 in index0) {\r\n      if (index1 = index0[value0]) {\r\n        // If a key is specified, count only that part of index 1\r\n        if (key1) (tmp = index1, index1 = {})[key1] = tmp[key1];\r\n        for (const value1 in index1) {\r\n          if (index2 = index1[value1]) {\r\n            // If a key is specified, count the quad if it exists\r\n            if (key2) (key2 in index2) && count++;\r\n            // Otherwise, count all quads\r\n            else count += Object.keys(index2).length;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return count;\r\n  }\r\n\r\n  // ### `_getGraphs` returns an array with the given graph,\r\n  // or all graphs if the argument is null or undefined.\r\n  _getGraphs(graph) {\r\n    if (!isString(graph))\r\n      return this._graphs;\r\n    const graphs = {};\r\n    graphs[graph] = this._graphs[graph];\r\n    return graphs;\r\n  }\r\n\r\n  // ### `_uniqueEntities` returns a function that accepts an entity ID\r\n  // and passes the corresponding entity to callback if it hasn't occurred before.\r\n  _uniqueEntities(callback) {\r\n    const uniqueIds = Object.create(null);\r\n    return id => {\r\n      if (!(id in uniqueIds)) {\r\n        uniqueIds[id] = true;\r\n        callback(termFromId(this._entities[id], this._factory));\r\n      }\r\n    };\r\n  }\r\n\r\n  // ## Public methods\r\n\r\n  // ### `add` adds the specified quad to the dataset.\r\n  // Returns the dataset instance it was called on.\r\n  // Existing quads, as defined in Quad.equals, will be ignored.\r\n  add(quad) {\r\n    this.addQuad(quad);\r\n    return this;\r\n  }\r\n\r\n  // ### `addQuad` adds a new quad to the store.\r\n  // Returns if the quad index has changed, if the quad did not already exist.\r\n  addQuad(subject, predicate, object, graph) {\r\n    // Shift arguments if a quad object is given instead of components\r\n    if (!predicate)\r\n      graph = subject.graph, object = subject.object,\r\n        predicate = subject.predicate, subject = subject.subject;\r\n\r\n    // Convert terms to internal string representation\r\n    subject = termToId(subject);\r\n    predicate = termToId(predicate);\r\n    object = termToId(object);\r\n    graph = termToId(graph);\r\n\r\n    // Find the graph that will contain the triple\r\n    let graphItem = this._graphs[graph];\r\n    // Create the graph if it doesn't exist yet\r\n    if (!graphItem) {\r\n      graphItem = this._graphs[graph] = { subjects: {}, predicates: {}, objects: {} };\r\n      // Freezing a graph helps subsequent `add` performance,\r\n      // and properties will never be modified anyway\r\n      Object.freeze(graphItem);\r\n    }\r\n\r\n    // Since entities can often be long IRIs, we avoid storing them in every index.\r\n    // Instead, we have a separate index that maps entities to numbers,\r\n    // which are then used as keys in the other indexes.\r\n    const ids = this._ids;\r\n    const entities = this._entities;\r\n    subject   = ids[subject]   || (ids[entities[++this._id] = subject]   = this._id);\r\n    predicate = ids[predicate] || (ids[entities[++this._id] = predicate] = this._id);\r\n    object    = ids[object]    || (ids[entities[++this._id] = object]    = this._id);\r\n\r\n    const changed = this._addToIndex(graphItem.subjects,   subject,   predicate, object);\r\n    this._addToIndex(graphItem.predicates, predicate, object,    subject);\r\n    this._addToIndex(graphItem.objects,    object,    subject,   predicate);\r\n\r\n    // The cached quad count is now invalid\r\n    this._size = null;\r\n    return changed;\r\n  }\r\n\r\n  // ### `addQuads` adds multiple quads to the store\r\n  addQuads(quads) {\r\n    for (let i = 0; i < quads.length; i++)\r\n      this.addQuad(quads[i]);\r\n  }\r\n\r\n  // ### `delete` removes the specified quad from the dataset.\r\n  // Returns the dataset instance it was called on.\r\n  delete(quad) {\r\n    this.removeQuad(quad);\r\n    return this;\r\n  }\r\n\r\n  // ### `has` determines whether a dataset includes a certain quad.\r\n  // Returns true or false as appropriate.\r\n  has(quad) {\r\n    const quads = this.getQuads(quad.subject, quad.predicate, quad.object, quad.graph);\r\n    return quads.length !== 0;\r\n  }\r\n\r\n  // ### `import` adds a stream of quads to the store\r\n  import(stream) {\r\n    stream.on('data', quad => { this.addQuad(quad); });\r\n    return stream;\r\n  }\r\n\r\n  // ### `removeQuad` removes a quad from the store if it exists\r\n  removeQuad(subject, predicate, object, graph) {\r\n    // Shift arguments if a quad object is given instead of components\r\n    if (!predicate)\r\n      graph = subject.graph, object = subject.object,\r\n        predicate = subject.predicate, subject = subject.subject;\r\n\r\n    // Convert terms to internal string representation\r\n    subject = termToId(subject);\r\n    predicate = termToId(predicate);\r\n    object = termToId(object);\r\n    graph = termToId(graph);\r\n\r\n    // Find internal identifiers for all components\r\n    // and verify the quad exists.\r\n    const ids = this._ids, graphs = this._graphs;\r\n    let graphItem, subjects, predicates;\r\n    if (!(subject    = ids[subject]) || !(predicate = ids[predicate]) ||\r\n        !(object     = ids[object])  || !(graphItem = graphs[graph])  ||\r\n        !(subjects   = graphItem.subjects[subject]) ||\r\n        !(predicates = subjects[predicate]) ||\r\n        !(object in predicates))\r\n      return false;\r\n\r\n    // Remove it from all indexes\r\n    this._removeFromIndex(graphItem.subjects,   subject,   predicate, object);\r\n    this._removeFromIndex(graphItem.predicates, predicate, object,    subject);\r\n    this._removeFromIndex(graphItem.objects,    object,    subject,   predicate);\r\n    if (this._size !== null) this._size--;\r\n\r\n    // Remove the graph if it is empty\r\n    for (subject in graphItem.subjects) return true;\r\n    delete graphs[graph];\r\n    return true;\r\n  }\r\n\r\n  // ### `removeQuads` removes multiple quads from the store\r\n  removeQuads(quads) {\r\n    for (let i = 0; i < quads.length; i++)\r\n      this.removeQuad(quads[i]);\r\n  }\r\n\r\n  // ### `remove` removes a stream of quads from the store\r\n  remove(stream) {\r\n    stream.on('data', quad => { this.removeQuad(quad); });\r\n    return stream;\r\n  }\r\n\r\n  // ### `removeMatches` removes all matching quads from the store\r\n  // Setting any field to `undefined` or `null` indicates a wildcard.\r\n  removeMatches(subject, predicate, object, graph) {\r\n    const stream = new Readable({ objectMode: true });\r\n\r\n    stream._read = () => {\r\n      for (const quad of this.getQuads(subject, predicate, object, graph))\r\n        stream.push(quad);\r\n      stream.push(null);\r\n    };\r\n\r\n    return this.remove(stream);\r\n  }\r\n\r\n  // ### `deleteGraph` removes all triples with the given graph from the store\r\n  deleteGraph(graph) {\r\n    return this.removeMatches(null, null, null, graph);\r\n  }\r\n\r\n  // ### `getQuads` returns an array of quads matching a pattern.\r\n  // Setting any field to `undefined` or `null` indicates a wildcard.\r\n  getQuads(subject, predicate, object, graph) {\r\n    // Convert terms to internal string representation\r\n    subject = subject && termToId(subject);\r\n    predicate = predicate && termToId(predicate);\r\n    object = object && termToId(object);\r\n    graph = graph && termToId(graph);\r\n\r\n    const quads = [], graphs = this._getGraphs(graph), ids = this._ids;\r\n    let content, subjectId, predicateId, objectId;\r\n\r\n    // Translate IRIs to internal index keys.\r\n    if (isString(subject)   && !(subjectId   = ids[subject])   ||\r\n        isString(predicate) && !(predicateId = ids[predicate]) ||\r\n        isString(object)    && !(objectId    = ids[object]))\r\n      return quads;\r\n\r\n    for (const graphId in graphs) {\r\n      // Only if the specified graph contains triples, there can be results\r\n      if (content = graphs[graphId]) {\r\n        // Choose the optimal index, based on what fields are present\r\n        if (subjectId) {\r\n          if (objectId)\r\n            // If subject and object are given, the object index will be the fastest\r\n            this._findInIndex(content.objects, objectId, subjectId, predicateId,\r\n                              'object', 'subject', 'predicate', graphId, null, quads);\r\n          else\r\n            // If only subject and possibly predicate are given, the subject index will be the fastest\r\n            this._findInIndex(content.subjects, subjectId, predicateId, null,\r\n                              'subject', 'predicate', 'object', graphId, null, quads);\r\n        }\r\n        else if (predicateId)\r\n          // If only predicate and possibly object are given, the predicate index will be the fastest\r\n          this._findInIndex(content.predicates, predicateId, objectId, null,\r\n                            'predicate', 'object', 'subject', graphId, null, quads);\r\n        else if (objectId)\r\n          // If only object is given, the object index will be the fastest\r\n          this._findInIndex(content.objects, objectId, null, null,\r\n                            'object', 'subject', 'predicate', graphId, null, quads);\r\n        else\r\n          // If nothing is given, iterate subjects and predicates first\r\n          this._findInIndex(content.subjects, null, null, null,\r\n                            'subject', 'predicate', 'object', graphId, null, quads);\r\n      }\r\n    }\r\n    return quads;\r\n  }\r\n\r\n  // ### `match` returns a new dataset that is comprised of all quads in the current instance matching the given arguments.\r\n  // The logic described in Quad Matching is applied for each quad in this dataset to check if it should be included in the output dataset.\r\n  // Note: This method always returns a new DatasetCore, even if that dataset contains no quads.\r\n  // Note: Since a DatasetCore is an unordered set, the order of the quads within the returned sequence is arbitrary.\r\n  // Setting any field to `undefined` or `null` indicates a wildcard.\r\n  // For backwards compatibility, the object return also implements the Readable stream interface.\r\n  match(subject, predicate, object, graph) {\r\n    return new DatasetCoreAndReadableStream(this, subject, predicate, object, graph);\r\n  }\r\n\r\n  // ### `countQuads` returns the number of quads matching a pattern.\r\n  // Setting any field to `undefined` or `null` indicates a wildcard.\r\n  countQuads(subject, predicate, object, graph) {\r\n    // Convert terms to internal string representation\r\n    subject = subject && termToId(subject);\r\n    predicate = predicate && termToId(predicate);\r\n    object = object && termToId(object);\r\n    graph = graph && termToId(graph);\r\n\r\n    const graphs = this._getGraphs(graph), ids = this._ids;\r\n    let count = 0, content, subjectId, predicateId, objectId;\r\n\r\n    // Translate IRIs to internal index keys.\r\n    if (isString(subject)   && !(subjectId   = ids[subject])   ||\r\n        isString(predicate) && !(predicateId = ids[predicate]) ||\r\n        isString(object)    && !(objectId    = ids[object]))\r\n      return 0;\r\n\r\n    for (const graphId in graphs) {\r\n      // Only if the specified graph contains triples, there can be results\r\n      if (content = graphs[graphId]) {\r\n        // Choose the optimal index, based on what fields are present\r\n        if (subject) {\r\n          if (object)\r\n            // If subject and object are given, the object index will be the fastest\r\n            count += this._countInIndex(content.objects, objectId, subjectId, predicateId);\r\n          else\r\n            // If only subject and possibly predicate are given, the subject index will be the fastest\r\n            count += this._countInIndex(content.subjects, subjectId, predicateId, objectId);\r\n        }\r\n        else if (predicate) {\r\n          // If only predicate and possibly object are given, the predicate index will be the fastest\r\n          count += this._countInIndex(content.predicates, predicateId, objectId, subjectId);\r\n        }\r\n        else {\r\n          // If only object is possibly given, the object index will be the fastest\r\n          count += this._countInIndex(content.objects, objectId, subjectId, predicateId);\r\n        }\r\n      }\r\n    }\r\n    return count;\r\n  }\r\n\r\n  // ### `forEach` executes the callback on all quads.\r\n  // Setting any field to `undefined` or `null` indicates a wildcard.\r\n  forEach(callback, subject, predicate, object, graph) {\r\n    this.some(quad => {\r\n      callback(quad);\r\n      return false;\r\n    }, subject, predicate, object, graph);\r\n  }\r\n\r\n  // ### `every` executes the callback on all quads,\r\n  // and returns `true` if it returns truthy for all them.\r\n  // Setting any field to `undefined` or `null` indicates a wildcard.\r\n  every(callback, subject, predicate, object, graph) {\r\n    let some = false;\r\n    const every = !this.some(quad => {\r\n      some = true;\r\n      return !callback(quad);\r\n    }, subject, predicate, object, graph);\r\n    return some && every;\r\n  }\r\n\r\n  // ### `some` executes the callback on all quads,\r\n  // and returns `true` if it returns truthy for any of them.\r\n  // Setting any field to `undefined` or `null` indicates a wildcard.\r\n  some(callback, subject, predicate, object, graph) {\r\n    // Convert terms to internal string representation\r\n    subject = subject && termToId(subject);\r\n    predicate = predicate && termToId(predicate);\r\n    object = object && termToId(object);\r\n    graph = graph && termToId(graph);\r\n\r\n    const graphs = this._getGraphs(graph), ids = this._ids;\r\n    let content, subjectId, predicateId, objectId;\r\n\r\n    // Translate IRIs to internal index keys.\r\n    if (isString(subject)   && !(subjectId   = ids[subject])   ||\r\n        isString(predicate) && !(predicateId = ids[predicate]) ||\r\n        isString(object)    && !(objectId    = ids[object]))\r\n      return false;\r\n\r\n    for (const graphId in graphs) {\r\n      // Only if the specified graph contains triples, there can be results\r\n      if (content = graphs[graphId]) {\r\n        // Choose the optimal index, based on what fields are present\r\n        if (subjectId) {\r\n          if (objectId) {\r\n          // If subject and object are given, the object index will be the fastest\r\n            if (this._findInIndex(content.objects, objectId, subjectId, predicateId,\r\n                                  'object', 'subject', 'predicate', graphId, callback, null))\r\n              return true;\r\n          }\r\n          else\r\n            // If only subject and possibly predicate are given, the subject index will be the fastest\r\n            if (this._findInIndex(content.subjects, subjectId, predicateId, null,\r\n                                  'subject', 'predicate', 'object', graphId, callback, null))\r\n              return true;\r\n        }\r\n        else if (predicateId) {\r\n          // If only predicate and possibly object are given, the predicate index will be the fastest\r\n          if (this._findInIndex(content.predicates, predicateId, objectId, null,\r\n                                'predicate', 'object', 'subject', graphId, callback, null)) {\r\n            return true;\r\n          }\r\n        }\r\n        else if (objectId) {\r\n          // If only object is given, the object index will be the fastest\r\n          if (this._findInIndex(content.objects, objectId, null, null,\r\n                                'object', 'subject', 'predicate', graphId, callback, null)) {\r\n            return true;\r\n          }\r\n        }\r\n        else\r\n        // If nothing is given, iterate subjects and predicates first\r\n        if (this._findInIndex(content.subjects, null, null, null,\r\n                              'subject', 'predicate', 'object', graphId, callback, null)) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // ### `getSubjects` returns all subjects that match the pattern.\r\n  // Setting any field to `undefined` or `null` indicates a wildcard.\r\n  getSubjects(predicate, object, graph) {\r\n    const results = [];\r\n    this.forSubjects(s => { results.push(s); }, predicate, object, graph);\r\n    return results;\r\n  }\r\n\r\n  // ### `forSubjects` executes the callback on all subjects that match the pattern.\r\n  // Setting any field to `undefined` or `null` indicates a wildcard.\r\n  forSubjects(callback, predicate, object, graph) {\r\n    // Convert terms to internal string representation\r\n    predicate = predicate && termToId(predicate);\r\n    object = object && termToId(object);\r\n    graph = graph && termToId(graph);\r\n\r\n    const ids = this._ids, graphs = this._getGraphs(graph);\r\n    let content, predicateId, objectId;\r\n    callback = this._uniqueEntities(callback);\r\n\r\n    // Translate IRIs to internal index keys.\r\n    if (isString(predicate) && !(predicateId = ids[predicate]) ||\r\n        isString(object)    && !(objectId    = ids[object]))\r\n      return;\r\n\r\n    for (graph in graphs) {\r\n      // Only if the specified graph contains triples, there can be results\r\n      if (content = graphs[graph]) {\r\n        // Choose optimal index based on which fields are wildcards\r\n        if (predicateId) {\r\n          if (objectId)\r\n            // If predicate and object are given, the POS index is best.\r\n            this._loopBy2Keys(content.predicates, predicateId, objectId, callback);\r\n          else\r\n            // If only predicate is given, the SPO index is best.\r\n            this._loopByKey1(content.subjects, predicateId, callback);\r\n        }\r\n        else if (objectId)\r\n          // If only object is given, the OSP index is best.\r\n          this._loopByKey0(content.objects, objectId, callback);\r\n        else\r\n          // If no params given, iterate all the subjects\r\n          this._loop(content.subjects, callback);\r\n      }\r\n    }\r\n  }\r\n\r\n  // ### `getPredicates` returns all predicates that match the pattern.\r\n  // Setting any field to `undefined` or `null` indicates a wildcard.\r\n  getPredicates(subject, object, graph) {\r\n    const results = [];\r\n    this.forPredicates(p => { results.push(p); }, subject, object, graph);\r\n    return results;\r\n  }\r\n\r\n  // ### `forPredicates` executes the callback on all predicates that match the pattern.\r\n  // Setting any field to `undefined` or `null` indicates a wildcard.\r\n  forPredicates(callback, subject, object, graph) {\r\n    // Convert terms to internal string representation\r\n    subject = subject && termToId(subject);\r\n    object = object && termToId(object);\r\n    graph = graph && termToId(graph);\r\n\r\n    const ids = this._ids, graphs = this._getGraphs(graph);\r\n    let content, subjectId, objectId;\r\n    callback = this._uniqueEntities(callback);\r\n\r\n    // Translate IRIs to internal index keys.\r\n    if (isString(subject) && !(subjectId = ids[subject]) ||\r\n        isString(object)  && !(objectId  = ids[object]))\r\n      return;\r\n\r\n    for (graph in graphs) {\r\n      // Only if the specified graph contains triples, there can be results\r\n      if (content = graphs[graph]) {\r\n        // Choose optimal index based on which fields are wildcards\r\n        if (subjectId) {\r\n          if (objectId)\r\n            // If subject and object are given, the OSP index is best.\r\n            this._loopBy2Keys(content.objects, objectId, subjectId, callback);\r\n          else\r\n            // If only subject is given, the SPO index is best.\r\n            this._loopByKey0(content.subjects, subjectId, callback);\r\n        }\r\n        else if (objectId)\r\n          // If only object is given, the POS index is best.\r\n          this._loopByKey1(content.predicates, objectId, callback);\r\n        else\r\n          // If no params given, iterate all the predicates.\r\n          this._loop(content.predicates, callback);\r\n      }\r\n    }\r\n  }\r\n\r\n  // ### `getObjects` returns all objects that match the pattern.\r\n  // Setting any field to `undefined` or `null` indicates a wildcard.\r\n  getObjects(subject, predicate, graph) {\r\n    const results = [];\r\n    this.forObjects(o => { results.push(o); }, subject, predicate, graph);\r\n    return results;\r\n  }\r\n\r\n  // ### `forObjects` executes the callback on all objects that match the pattern.\r\n  // Setting any field to `undefined` or `null` indicates a wildcard.\r\n  forObjects(callback, subject, predicate, graph) {\r\n    // Convert terms to internal string representation\r\n    subject = subject && termToId(subject);\r\n    predicate = predicate && termToId(predicate);\r\n    graph = graph && termToId(graph);\r\n\r\n    const ids = this._ids, graphs = this._getGraphs(graph);\r\n    let content, subjectId, predicateId;\r\n    callback = this._uniqueEntities(callback);\r\n\r\n    // Translate IRIs to internal index keys.\r\n    if (isString(subject)   && !(subjectId   = ids[subject]) ||\r\n        isString(predicate) && !(predicateId = ids[predicate]))\r\n      return;\r\n\r\n    for (graph in graphs) {\r\n      // Only if the specified graph contains triples, there can be results\r\n      if (content = graphs[graph]) {\r\n        // Choose optimal index based on which fields are wildcards\r\n        if (subjectId) {\r\n          if (predicateId)\r\n            // If subject and predicate are given, the SPO index is best.\r\n            this._loopBy2Keys(content.subjects, subjectId, predicateId, callback);\r\n          else\r\n            // If only subject is given, the OSP index is best.\r\n            this._loopByKey1(content.objects, subjectId, callback);\r\n        }\r\n        else if (predicateId)\r\n          // If only predicate is given, the POS index is best.\r\n          this._loopByKey0(content.predicates, predicateId, callback);\r\n        else\r\n          // If no params given, iterate all the objects.\r\n          this._loop(content.objects, callback);\r\n      }\r\n    }\r\n  }\r\n\r\n  // ### `getGraphs` returns all graphs that match the pattern.\r\n  // Setting any field to `undefined` or `null` indicates a wildcard.\r\n  getGraphs(subject, predicate, object) {\r\n    const results = [];\r\n    this.forGraphs(g => { results.push(g); }, subject, predicate, object);\r\n    return results;\r\n  }\r\n\r\n  // ### `forGraphs` executes the callback on all graphs that match the pattern.\r\n  // Setting any field to `undefined` or `null` indicates a wildcard.\r\n  forGraphs(callback, subject, predicate, object) {\r\n    for (const graph in this._graphs) {\r\n      this.some(quad => {\r\n        callback(quad.graph);\r\n        return true; // Halt iteration of some()\r\n      }, subject, predicate, object, graph);\r\n    }\r\n  }\r\n\r\n  // ### `createBlankNode` creates a new blank node, returning its name\r\n  createBlankNode(suggestedName) {\r\n    let name, index;\r\n    // Generate a name based on the suggested name\r\n    if (suggestedName) {\r\n      name = suggestedName = `_:${suggestedName}`, index = 1;\r\n      while (this._ids[name])\r\n        name = suggestedName + index++;\r\n    }\r\n    // Generate a generic blank node name\r\n    else {\r\n      do { name = `_:b${this._blankNodeIndex++}`; }\r\n      while (this._ids[name]);\r\n    }\r\n    // Add the blank node to the entities, avoiding the generation of duplicates\r\n    this._ids[name] = ++this._id;\r\n    this._entities[this._id] = name;\r\n    return this._factory.blankNode(name.substr(2));\r\n  }\r\n\r\n  // ### `extractLists` finds and removes all list triples\r\n  // and returns the items per list.\r\n  extractLists({ remove = false, ignoreErrors = false } = {}) {\r\n    const lists = {}; // has scalar keys so could be a simple Object\r\n    const onError = ignoreErrors ? (() => true) :\r\n                  ((node, message) => { throw new Error(`${node.value} ${message}`); });\r\n\r\n    // Traverse each list from its tail\r\n    const tails = this.getQuads(null, namespaces.rdf.rest, namespaces.rdf.nil, null);\r\n    const toRemove = remove ? [...tails] : [];\r\n    tails.forEach(tailQuad => {\r\n      const items = [];             // the members found as objects of rdf:first quads\r\n      let malformed = false;      // signals whether the current list is malformed\r\n      let head;                   // the head of the list (_:b1 in above example)\r\n      let headPos;                // set to subject or object when head is set\r\n      const graph = tailQuad.graph; // make sure list is in exactly one graph\r\n\r\n      // Traverse the list from tail to end\r\n      let current = tailQuad.subject;\r\n      while (current && !malformed) {\r\n        const objectQuads = this.getQuads(null, null, current, null);\r\n        const subjectQuads = this.getQuads(current, null, null, null);\r\n        let quad, first = null, rest = null, parent = null;\r\n\r\n        // Find the first and rest of this list node\r\n        for (let i = 0; i < subjectQuads.length && !malformed; i++) {\r\n          quad = subjectQuads[i];\r\n          if (!quad.graph.equals(graph))\r\n            malformed = onError(current, 'not confined to single graph');\r\n          else if (head)\r\n            malformed = onError(current, 'has non-list arcs out');\r\n\r\n          // one rdf:first\r\n          else if (quad.predicate.value === namespaces.rdf.first) {\r\n            if (first)\r\n              malformed = onError(current, 'has multiple rdf:first arcs');\r\n            else\r\n              toRemove.push(first = quad);\r\n          }\r\n\r\n          // one rdf:rest\r\n          else if (quad.predicate.value === namespaces.rdf.rest) {\r\n            if (rest)\r\n              malformed = onError(current, 'has multiple rdf:rest arcs');\r\n            else\r\n              toRemove.push(rest = quad);\r\n          }\r\n\r\n          // alien triple\r\n          else if (objectQuads.length)\r\n            malformed = onError(current, 'can\\'t be subject and object');\r\n          else {\r\n            head = quad; // e.g. { (1 2 3) :p :o }\r\n            headPos = 'subject';\r\n          }\r\n        }\r\n\r\n        // { :s :p (1 2) } arrives here with no head\r\n        // { (1 2) :p :o } arrives here with head set to the list.\r\n        for (let i = 0; i < objectQuads.length && !malformed; ++i) {\r\n          quad = objectQuads[i];\r\n          if (head)\r\n            malformed = onError(current, 'can\\'t have coreferences');\r\n          // one rdf:rest\r\n          else if (quad.predicate.value === namespaces.rdf.rest) {\r\n            if (parent)\r\n              malformed = onError(current, 'has incoming rdf:rest arcs');\r\n            else\r\n              parent = quad;\r\n          }\r\n          else {\r\n            head = quad; // e.g. { :s :p (1 2) }\r\n            headPos = 'object';\r\n          }\r\n        }\r\n\r\n        // Store the list item and continue with parent\r\n        if (!first)\r\n          malformed = onError(current, 'has no list head');\r\n        else\r\n          items.unshift(first.object);\r\n        current = parent && parent.subject;\r\n      }\r\n\r\n      // Don't remove any quads if the list is malformed\r\n      if (malformed)\r\n        remove = false;\r\n      // Store the list under the value of its head\r\n      else if (head)\r\n        lists[head[headPos].value] = items;\r\n    });\r\n\r\n    // Remove list quads if requested\r\n    if (remove)\r\n      this.removeQuads(toRemove);\r\n    return lists;\r\n  }\r\n\r\n  // ### Store is an iterable.\r\n  // Can be used where iterables are expected: for...of loops, array spread operator,\r\n  // `yield*`, and destructuring assignment (order is not guaranteed).\r\n  *[Symbol.iterator]() {\r\n    yield* this.getQuads();\r\n  }\r\n}\r\n\r\n// Determines whether the argument is a string\r\nfunction isString(s) {\r\n  return typeof s === 'string' || s instanceof String;\r\n}\r\n\r\n/**\r\n * A class that implements both DatasetCore and Readable.\r\n */\r\nclass DatasetCoreAndReadableStream extends Readable {\r\n  constructor(n3Store, subject, predicate, object, graph) {\r\n    super({ objectMode: true });\r\n    Object.assign(this, { n3Store, subject, predicate, object, graph });\r\n  }\r\n\r\n  get filtered() {\r\n    if (!this._filtered) {\r\n      const { n3Store, graph, object, predicate, subject } = this;\r\n      const quads = n3Store.getQuads(subject, predicate, object, graph);\r\n      this._filtered = new N3Store(quads, { factory: n3Store._factory });\r\n    }\r\n    return this._filtered;\r\n  }\r\n\r\n  _read() {\r\n    for (const quad of this.filtered.getQuads())\r\n      this.push(quad);\r\n    this.push(null);\r\n  }\r\n\r\n  add(quad) {\r\n    return this.filtered.add(quad);\r\n  }\r\n\r\n  delete(quad) {\r\n    return this.filtered.delete(quad);\r\n  }\r\n\r\n  has(quad) {\r\n    return this.filtered.has(quad);\r\n  }\r\n\r\n  match(subject, predicate, object, graph) {\r\n    return new DatasetCoreAndReadableStream(this.filtered, subject, predicate, object, graph);\r\n  }\r\n\r\n  *[Symbol.iterator]() {\r\n    yield* this.filtered.getQuads();\r\n  }\r\n}\r\n","// **N3StreamParser** parses a text stream into a quad stream.\r\nimport N3Parser from './N3Parser';\r\nimport { Transform } from 'readable-stream';\r\n\r\n// ## Constructor\r\nexport default class N3StreamParser extends Transform {\r\n  constructor(options) {\r\n    super({ decodeStrings: true });\r\n    this._readableState.objectMode = true;\r\n\r\n    // Set up parser with dummy stream to obtain `data` and `end` callbacks\r\n    const parser = new N3Parser(options);\r\n    let onData, onEnd;\r\n    parser.parse({\r\n      on: (event, callback) => {\r\n        switch (event) {\r\n        case 'data': onData = callback; break;\r\n        case 'end':   onEnd = callback; break;\r\n        }\r\n      },\r\n    },\r\n      // Handle quads by pushing them down the pipeline\r\n      (error, quad) => { error && this.emit('error', error) || quad && this.push(quad); },\r\n      // Emit prefixes through the `prefix` event\r\n      (prefix, uri) => { this.emit('prefix', prefix, uri); }\r\n    );\r\n\r\n    // Implement Transform methods through parser callbacks\r\n    this._transform = (chunk, encoding, done) => { onData(chunk); done(); };\r\n    this._flush = done => { onEnd(); done(); };\r\n  }\r\n\r\n  // ### Parses a stream of strings\r\n  import(stream) {\r\n    stream.on('data',  chunk => { this.write(chunk); });\r\n    stream.on('end',   ()      => { this.end(); });\r\n    stream.on('error', error => { this.emit('error', error); });\r\n    return this;\r\n  }\r\n}\r\n","// **N3StreamWriter** serializes a quad stream into a text stream.\r\nimport { Transform } from 'readable-stream';\r\nimport N3Writer from './N3Writer';\r\n\r\n// ## Constructor\r\nexport default class N3StreamWriter extends Transform {\r\n  constructor(options) {\r\n    super({ encoding: 'utf8', writableObjectMode: true });\r\n\r\n    // Set up writer with a dummy stream object\r\n    const writer = this._writer = new N3Writer({\r\n      write: (quad, encoding, callback) => { this.push(quad); callback && callback(); },\r\n      end: callback => { this.push(null); callback && callback(); },\r\n    }, options);\r\n\r\n    // Implement Transform methods on top of writer\r\n    this._transform = (quad, encoding, done) => { writer.addQuad(quad, done); };\r\n    this._flush = done => { writer.end(done); };\r\n  }\r\n\r\n// ### Serializes a stream of quads\r\n  import(stream) {\r\n    stream.on('data',   quad => { this.write(quad); });\r\n    stream.on('end',    () => { this.end(); });\r\n    stream.on('error',  error => { this.emit('error', error); });\r\n    stream.on('prefix', (prefix, iri) => { this._writer.addPrefix(prefix, iri); });\r\n    return this;\r\n  }\r\n}\r\n","import Lexer from './N3Lexer';\r\nimport Parser from './N3Parser';\r\nimport Writer from './N3Writer';\r\nimport Store from './N3Store';\r\nimport StreamParser from './N3StreamParser';\r\nimport StreamWriter from './N3StreamWriter';\r\nimport * as Util from './N3Util';\r\n\r\nimport {\r\n  default as DataFactory,\r\n\r\n  Term,\r\n  NamedNode,\r\n  Literal,\r\n  BlankNode,\r\n  Variable,\r\n  DefaultGraph,\r\n  Quad,\r\n  Triple,\r\n\r\n  termFromId,\r\n  termToId,\r\n} from './N3DataFactory';\r\n\r\nexport {\r\n  Lexer,\r\n  Parser,\r\n  Writer,\r\n  Store,\r\n  StreamParser,\r\n  StreamWriter,\r\n  Util,\r\n\r\n  DataFactory,\r\n\r\n  Term,\r\n  NamedNode,\r\n  Literal,\r\n  BlankNode,\r\n  Variable,\r\n  DefaultGraph,\r\n  Quad,\r\n  Triple,\r\n\r\n  termFromId,\r\n  termToId,\r\n};\r\n","var OVERLAY_ID = '__parcel__error__overlay__';\r\n\r\nvar OldModule = module.bundle.Module;\r\n\r\nfunction Module(moduleName) {\r\n  OldModule.call(this, moduleName);\r\n  this.hot = {\r\n    data: module.bundle.hotData,\r\n    _acceptCallbacks: [],\r\n    _disposeCallbacks: [],\r\n    accept: function (fn) {\r\n      this._acceptCallbacks.push(fn || function () {});\r\n    },\r\n    dispose: function (fn) {\r\n      this._disposeCallbacks.push(fn);\r\n    }\r\n  };\r\n\r\n  module.bundle.hotData = null;\r\n}\r\n\r\nmodule.bundle.Module = Module;\r\nvar checkedAssets, assetsToAccept;\r\n\r\nvar parent = module.bundle.parent;\r\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\r\n  var hostname = process.env.HMR_HOSTNAME || location.hostname;\r\n  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';\r\n  var ws = new WebSocket(protocol + '://' + hostname + ':' + process.env.HMR_PORT + '/');\r\n  ws.onmessage = function(event) {\r\n    checkedAssets = {};\r\n    assetsToAccept = [];\r\n\r\n    var data = JSON.parse(event.data);\r\n\r\n    if (data.type === 'update') {\r\n      var handled = false;\r\n      data.assets.forEach(function(asset) {\r\n        if (!asset.isNew) {\r\n          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);\r\n          if (didAccept) {\r\n            handled = true;\r\n          }\r\n        }\r\n      });\r\n\r\n      // Enable HMR for CSS by default.\r\n      handled = handled || data.assets.every(function(asset) {\r\n        return asset.type === 'css' && asset.generated.js;\r\n      });\r\n\r\n      if (handled) {\r\n        console.clear();\r\n\r\n        data.assets.forEach(function (asset) {\r\n          hmrApply(global.parcelRequire, asset);\r\n        });\r\n\r\n        assetsToAccept.forEach(function (v) {\r\n          hmrAcceptRun(v[0], v[1]);\r\n        });\r\n      } else if (location.reload) { // `location` global exists in a web worker context but lacks `.reload()` function.\r\n        location.reload();\r\n      }\r\n    }\r\n\r\n    if (data.type === 'reload') {\r\n      ws.close();\r\n      ws.onclose = function () {\r\n        location.reload();\r\n      }\r\n    }\r\n\r\n    if (data.type === 'error-resolved') {\r\n      console.log('[parcel] ✨ Error resolved');\r\n\r\n      removeErrorOverlay();\r\n    }\r\n\r\n    if (data.type === 'error') {\r\n      console.error('[parcel] 🚨  ' + data.error.message + '\\n' + data.error.stack);\r\n\r\n      removeErrorOverlay();\r\n\r\n      var overlay = createErrorOverlay(data);\r\n      document.body.appendChild(overlay);\r\n    }\r\n  };\r\n}\r\n\r\nfunction removeErrorOverlay() {\r\n  var overlay = document.getElementById(OVERLAY_ID);\r\n  if (overlay) {\r\n    overlay.remove();\r\n  }\r\n}\r\n\r\nfunction createErrorOverlay(data) {\r\n  var overlay = document.createElement('div');\r\n  overlay.id = OVERLAY_ID;\r\n\r\n  // html encode message and stack trace\r\n  var message = document.createElement('div');\r\n  var stackTrace = document.createElement('pre');\r\n  message.innerText = data.error.message;\r\n  stackTrace.innerText = data.error.stack;\r\n\r\n  overlay.innerHTML = (\r\n    '<div style=\"background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;\">' +\r\n      '<span style=\"background: red; padding: 2px 4px; border-radius: 2px;\">ERROR</span>' +\r\n      '<span style=\"top: 2px; margin-left: 5px; position: relative;\">🚨</span>' +\r\n      '<div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">' + message.innerHTML + '</div>' +\r\n      '<pre>' + stackTrace.innerHTML + '</pre>' +\r\n    '</div>'\r\n  );\r\n\r\n  return overlay;\r\n\r\n}\r\n\r\nfunction getParents(bundle, id) {\r\n  var modules = bundle.modules;\r\n  if (!modules) {\r\n    return [];\r\n  }\r\n\r\n  var parents = [];\r\n  var k, d, dep;\r\n\r\n  for (k in modules) {\r\n    for (d in modules[k][1]) {\r\n      dep = modules[k][1][d];\r\n      if (dep === id || (Array.isArray(dep) && dep[dep.length - 1] === id)) {\r\n        parents.push(k);\r\n      }\r\n    }\r\n  }\r\n\r\n  if (bundle.parent) {\r\n    parents = parents.concat(getParents(bundle.parent, id));\r\n  }\r\n\r\n  return parents;\r\n}\r\n\r\nfunction hmrApply(bundle, asset) {\r\n  var modules = bundle.modules;\r\n  if (!modules) {\r\n    return;\r\n  }\r\n\r\n  if (modules[asset.id] || !bundle.parent) {\r\n    var fn = new Function('require', 'module', 'exports', asset.generated.js);\r\n    asset.isNew = !modules[asset.id];\r\n    modules[asset.id] = [fn, asset.deps];\r\n  } else if (bundle.parent) {\r\n    hmrApply(bundle.parent, asset);\r\n  }\r\n}\r\n\r\nfunction hmrAcceptCheck(bundle, id) {\r\n  var modules = bundle.modules;\r\n  if (!modules) {\r\n    return;\r\n  }\r\n\r\n  if (!modules[id] && bundle.parent) {\r\n    return hmrAcceptCheck(bundle.parent, id);\r\n  }\r\n\r\n  if (checkedAssets[id]) {\r\n    return;\r\n  }\r\n  checkedAssets[id] = true;\r\n\r\n  var cached = bundle.cache[id];\r\n\r\n  assetsToAccept.push([bundle, id]);\r\n\r\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\r\n    return true;\r\n  }\r\n\r\n  return getParents(global.parcelRequire, id).some(function (id) {\r\n    return hmrAcceptCheck(global.parcelRequire, id)\r\n  });\r\n}\r\n\r\nfunction hmrAcceptRun(bundle, id) {\r\n  var cached = bundle.cache[id];\r\n  bundle.hotData = {};\r\n  if (cached) {\r\n    cached.hot.data = bundle.hotData;\r\n  }\r\n\r\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\r\n    cached.hot._disposeCallbacks.forEach(function (cb) {\r\n      cb(bundle.hotData);\r\n    });\r\n  }\r\n\r\n  delete bundle.cache[id];\r\n  bundle(id);\r\n\r\n  cached = bundle.cache[id];\r\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\r\n    cached.hot._acceptCallbacks.forEach(function (cb) {\r\n      cb();\r\n    });\r\n    return true;\r\n  }\r\n}\r\n"]}